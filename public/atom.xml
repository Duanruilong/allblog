<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>About-龙大</title>
  
  <subtitle>不忘初心，继续前进。</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://duanruilong.github.io/"/>
  <updated>2019-07-29T02:52:36.117Z</updated>
  <id>https://duanruilong.github.io/</id>
  
  <author>
    <name>DRLong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Taro+dva+Typescript 搭建微信小程序架构</title>
    <link href="https://duanruilong.github.io/2019/07/24/Taro-dva-Typescript%E6%90%AD%E5%BB%BA%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%9E%B6%E6%9E%84/"/>
    <id>https://duanruilong.github.io/2019/07/24/Taro-dva-Typescript搭建微信小程序架构/</id>
    <published>2019-07-24T08:28:20.000Z</published>
    <updated>2019-07-29T02:52:36.117Z</updated>
    
    <content type="html"><![CDATA[<p>微信小程序的开发目前是很热的一个领域，有很多的开发模式，找到一种属于自己的方法才会使得开发顺心顺利。</p><p>此架构是使用 Taro + dva + typescript 构建前端开发</p><ul><li>京东凹凸实验室的React框架Taro很成熟，又是大厂在维护更新迭代，不用担心没人维护的问题，他有自己的UI还有物料社区，比起原生小程序方便很多，支持多端，一处代码，多处运行，微信小程序、H5、百度小程序、支付宝小程序、字节跳动小程序、QQ轻应用、快应用、ReactNative；</li><li>数据管理是Redux集成的dva框架，是一个基于 redux 和 redux-saga 的数据流方案，然后为了简化开发体验，dva 还额外内置了 react-router 和 fetch，所以也可以理解为一个轻量级的应用框架；</li><li>TypeScript就是所谓的JavaScript超集。它不是JavaScript的替代品，也不会为JavaScript代码添加任何新功能。相反，TypeScript允许程序员在其代码中使用面向对象的构造，然后将其转换为JavaScript。它还包括类型安全和编译时类型检查等便利功能。</li></ul><p><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/taro.jpg" alt="Taro"></p><a id="more"></a><blockquote><p>资料</p></blockquote><p><a href="https://taro.aotu.io/" target="_blank" rel="noopener">Taro官网地址：https://taro.aotu.io/</a><br><a href="https://dvajs.com/guide/" target="_blank" rel="noopener">dva官网地址：https://dvajs.com/guide/</a></p><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="前期工作准备"><a href="#前期工作准备" class="headerlink" title="前期工作准备"></a>前期工作准备</h2><p>cli 工具安装:</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 使用 npm 安装 cli</span><br><span class="line">$ npm install -g @tarojs/cli</span><br><span class="line"></span><br><span class="line"># OR 使用 yarn 安装 cli</span><br><span class="line">$ yarn global add @tarojs/cli</span><br><span class="line"></span><br><span class="line"># OR 安装了 cnpm，使用 cnpm 安装 cli</span><br><span class="line">$ cnpm install -g @tarojs/cli</span><br></pre></td></tr></table></figure><p>使用命令创建模板项目:</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ taro init Taro_dva_Typescript</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/taro/tdt1.jpg" alt="Taro"></p><h2 id="安装配置文件"><a href="#安装配置文件" class="headerlink" title="安装配置文件"></a>安装配置文件</h2><p>安装dva</p><p><code>cnpm install --save dva-core dva-loading</code></p><ul><li><code>dva-core</code>：封装了 redux 和 redux-saga的一个插件</li><li><code>dva-loading</code>：管理页面的loading状态</li></ul><p>安装@tarojs/redux</p><p><code>cnpm install --save redux @tarojs/redux @tarojs/redux-h5 redux-thunk redux-logger</code></p><h1 id="配置项目文件"><a href="#配置项目文件" class="headerlink" title="配置项目文件"></a>配置项目文件</h1><p>去除不需要的文件，添加实际需要的一些文件，先删除<code>./ssrc/page</code>下的index文件夹，后期使用命令行生成完整结构的文件夹。</p><p>在<code></code>/src`目录下根据自己的实际需求进行一下配置：</p><ul><li><code>assets</code>: 一些静态资源，比如：image、iconfont</li><li><code>config</code>: 项目配置文件</li><li><code>components</code>: 项目编写的一些共用组件</li><li><code>types</code>: 项目公共的Typescript类型声明</li><li><code>models</code>: 项目dva插件model函数的引用或者是一些共用的js文件</li><li><code>utils</code>: 项目里封装的一些插件</li></ul><h2 id="项目一些具体配置操作"><a href="#项目一些具体配置操作" class="headerlink" title="项目一些具体配置操作"></a>项目一些具体配置操作</h2><h3 id="1、在-src-config下创建index-ts，添加项目配置信息"><a href="#1、在-src-config下创建index-ts，添加项目配置信息" class="headerlink" title="1、在./src/config下创建index.ts，添加项目配置信息"></a>1、在<code>./src/config</code>下创建index.ts，添加项目配置信息</h3><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 这里为了方便测试使用 Easy Mock 模拟接口数据</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * https://www.easy-mock.com/mock/5d38269ffb233553ab0d10ad/getlist</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">export const ONLINEHOST = 'https://www.easy-mock.com/mock/5d38269ffb233553ab0d10ad/getlist';</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * mock 接口</span></span><br><span class="line"><span class="comment"> * */</span> </span><br><span class="line">export const MOCKHOST = 'https://www.easy-mock.com/mock/5d38269ffb233553ab0d10ad/getlist';</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 是否mock</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ISMOCK = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这是一个全局的分享信息 不用每一个都去写</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> SHAREINFO = &#123;</span><br><span class="line">    'title': '分享标题',</span><br><span class="line">    'path': '路径',</span><br><span class="line">    'imageUrl': '图片'</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="2、在-src-utils下创建dva-ts，配置dva"><a href="#2、在-src-utils下创建dva-ts，配置dva" class="headerlink" title="2、在./src/utils下创建dva.ts，配置dva"></a>2、在<code>./src/utils</code>下创建dva.ts，配置dva</h3><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; create &#125; from <span class="string">"dva-core"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createLogger &#125; from <span class="string">"redux-logger"</span>;</span><br><span class="line"><span class="keyword">import</span>  createLoading  from <span class="string">"dva-loading"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">let app</span><br><span class="line">let store</span><br><span class="line">let dispatch</span><br><span class="line">let registered</span><br><span class="line"></span><br><span class="line"><span class="function">function <span class="title">createApp</span><span class="params">(opt)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// redux 的日志</span></span><br><span class="line">    opt.onAction = [createLogger()]</span><br><span class="line">    app = create(opt)</span><br><span class="line">    app.use(createLoading(&#123;&#125;))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!registered) &#123;</span><br><span class="line">        opt.models.forEach(model =&gt; app.model(model));</span><br><span class="line">    &#125;</span><br><span class="line">    registered = <span class="literal">true</span>;</span><br><span class="line">    app.start()</span><br><span class="line"></span><br><span class="line">    store = app._store;</span><br><span class="line">    app.getStore = () =&gt; store;</span><br><span class="line">    app.use(&#123;</span><br><span class="line">        onError(err)&#123;</span><br><span class="line">            console.<span class="built_in">log</span>(err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    dispatch = store.dispatch;</span><br><span class="line">    app.dispatch = dispatch;</span><br><span class="line">    <span class="keyword">return</span> app;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    createApp,</span><br><span class="line">    getDispatch()&#123;</span><br><span class="line">        <span class="keyword">return</span> app.dispatch</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、在-src-utils下创建tips-ts，整合封装微信原生弹窗"><a href="#3、在-src-utils下创建tips-ts，整合封装微信原生弹窗" class="headerlink" title="3、在./src/utils下创建tips.ts，整合封装微信原生弹窗"></a>3、在<code>./src/utils</code>下创建tips.ts，整合封装微信原生弹窗</h3><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> Taro from <span class="string">"@tarojs/taro"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; node &#125; from <span class="string">"_@types_prop-types@15.7.1@@types/prop-types"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 整合封装微信的原生弹窗</span></span><br><span class="line"><span class="comment"> * 提示、加载、工具类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Tips</span> &#123;</span></span><br><span class="line"><span class="keyword">static</span> isLoading = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 提示信息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">toast</span><span class="params">(title: <span class="built_in">string</span>, onHide?: ()</span> </span>=&gt; <span class="keyword">void</span>) &#123;</span><br><span class="line">Taro.showToast(&#123;</span><br><span class="line">title: title,</span><br><span class="line">icon: 'node',</span><br><span class="line">mask: <span class="literal">true</span>,</span><br><span class="line">duration: <span class="number">1500</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 去除结束回调函数</span></span><br><span class="line"><span class="keyword">if</span> (onHide) &#123;</span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">onHide();</span><br><span class="line">&#125;, <span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 加载提示弹窗</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">static loding(title:'加载中',force = false)&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.isLoading &amp;&amp; !force) &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.isLoading = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (Taro.showLoading) &#123;</span><br><span class="line">Taro.showLoading(&#123;</span><br><span class="line">title:title,</span><br><span class="line">mask:<span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">Taro.showNavigationBarLoading() <span class="comment">//导航条加载动画</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 加载完成</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">static</span> loaded()&#123;</span><br><span class="line">let duration = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.isLoading) &#123;</span><br><span class="line"><span class="keyword">this</span>.isLoading = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (Taro.hideLoading) &#123;</span><br><span class="line">Taro.hideLoading()</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">Taro.hideNavigationBarLoading(); <span class="comment">//导航条加载动画</span></span><br><span class="line">&#125;</span><br><span class="line">duration = <span class="number">500</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设定隐藏的动画时长为500ms,防止直接toast时出现问题</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Promise(resolve =&gt; setTimeout(resolve,duration))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 弹出提示框</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> success(title,duration = <span class="number">1500</span>)&#123;</span><br><span class="line">Taro.showToast(&#123;</span><br><span class="line">title: title,</span><br><span class="line">icon: 'success',</span><br><span class="line">duration: duration,</span><br><span class="line">mask:<span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> (duration &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Promise(resolve =&gt; setTimeout(resolve,duration))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、在-src-config下创建requestConfig-ts，统一配置请求接口"><a href="#4、在-src-config下创建requestConfig-ts，统一配置请求接口" class="headerlink" title="4、在./src/config下创建requestConfig.ts，统一配置请求接口"></a>4、在<code>./src/config</code>下创建requestConfig.ts，统一配置请求接口</h3><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 请求公共参数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> commonParame = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 请求的映射文件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> requestConfig = &#123;</span><br><span class="line">    loginUrl:'/api/user/wechat-auth' // 微信的登陆接口</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、在-src-utils下创建common-ts，共用函数"><a href="#5、在-src-utils下创建common-ts，共用函数" class="headerlink" title="5、在./src/utils下创建common.ts，共用函数"></a>5、在<code>./src/utils</code>下创建common.ts，共用函数</h3><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 共用函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> repeat = (str = <span class="string">'0'</span>, times) =&gt; (<span class="keyword">new</span> Array(times + <span class="number">1</span>)).join(str);</span><br><span class="line"><span class="comment">// 时间前面 +0 </span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> pad = (num, maxLength = <span class="number">2</span>) =&gt; repeat(<span class="string">'0'</span>, maxLength - num.toString().length) + num;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局的公共变量</span></span><br><span class="line"><span class="keyword">export</span> let globalData: any = &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间格式装换函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> formatTime = time =&gt; &#123;</span><br><span class="line">    `$&#123;pad(time.getHours())&#125;:$&#123;pad(time.getMinutes())&#125;:$&#123;pad(time.getSeconds())&#125;.$&#123;pad(time.getMilliseconds(), <span class="number">3</span>)&#125;`</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、在-src-utils下创建logger-ts，封装log函数"><a href="#6、在-src-utils下创建logger-ts，封装log函数" class="headerlink" title="6、在./src/utils下创建logger.ts，封装log函数"></a>6、在<code>./src/utils</code>下创建logger.ts，封装log函数</h3><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 封装logo函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">import &#123; formatTime &#125; from './common';</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> defaults = &#123;</span><br><span class="line">level: 'log',</span><br><span class="line">logger: console,</span><br><span class="line">logErrors: <span class="literal">true</span>,</span><br><span class="line">colors: &#123;</span><br><span class="line">title:'logger',</span><br><span class="line">req:'#9e9e9e',</span><br><span class="line">res:'#4caf50',</span><br><span class="line">error:'#f20404',</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">function <span class="title">printBuffer</span><span class="params">(logEntry, options)</span></span>&#123;</span><br><span class="line"><span class="keyword">const</span> &#123;logger,colors&#125; = options;</span><br><span class="line">let &#123;title,started,req,res&#125; = logEntry;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Message</span></span><br><span class="line">const headerCSS = ['color:gray; font-weight:lighter;']</span><br><span class="line"><span class="keyword">const</span> styles = s =&gt; `color $&#123;s&#125;; font-weight: bold`;</span><br><span class="line"></span><br><span class="line"><span class="comment">// render</span></span><br><span class="line">logger.group(`%c $&#123;title&#125; @$&#123;formatTime(started)&#125;`, ...headerCSS);</span><br><span class="line">logger.log('%c req', styles(colors.req), req)</span><br><span class="line">logger.log('%c res', styles(colors.res), res)</span><br><span class="line">logger.groupEnd()</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface LogEntry&#123;</span><br><span class="line">started ? : object  <span class="comment">// 触发时间</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">function <span class="title">createLogger</span><span class="params">(options: LogEntry = &#123;&#125;)</span></span>&#123;</span><br><span class="line"><span class="keyword">const</span> loggerOptions = Object.assign(&#123;&#125;, defaults, options)</span><br><span class="line"><span class="keyword">const</span> logEntry = options</span><br><span class="line">logEntry.started = <span class="keyword">new</span> Date();</span><br><span class="line">printBuffer(logEntry, Object.assign(&#123;&#125;, loggerOptions))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">defaults,</span><br><span class="line">createLogger,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7、在-src-utils下创建request-ts，封装http请求"><a href="#7、在-src-utils下创建request-ts，封装http请求" class="headerlink" title="7、在./src/utils下创建request.ts，封装http请求"></a>7、在<code>./src/utils</code>下创建request.ts，封装http请求</h3><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> Taro,&#123; Component &#125; from <span class="string">"@tarojs/taro"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ISMOCK,MAINHOST &#125; from <span class="string">"../config"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; commonParame,requestConfig &#125; from <span class="string">"../config/requestConfig"</span>;</span><br><span class="line"><span class="keyword">import</span> Tips from <span class="string">"./tips"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装请求</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">declare type Methohs = <span class="string">"GET"</span> | <span class="string">"OPTIONS"</span> | <span class="string">"HEAD"</span> | <span class="string">"PUT"</span> | <span class="string">"DELETE"</span> | <span class="string">"TRACE"</span> | <span class="string">"CONNECT"</span>;</span><br><span class="line">declare type Headers = &#123; [key :<span class="built_in">string</span>]:<span class="built_in">string</span>&#125;;</span><br><span class="line">declare type Datas = &#123;method : Methohs; [key: <span class="built_in">string</span>] : any;&#125;;</span><br><span class="line">interface Options&#123;</span><br><span class="line">    url: <span class="built_in">string</span>;</span><br><span class="line">    host?: <span class="built_in">string</span>;</span><br><span class="line">    method?: Methohs;</span><br><span class="line">    data?: Datas;</span><br><span class="line">    header?: Headers;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Request</span> &#123;</span></span><br><span class="line">    <span class="comment">// 登陆时的promise</span></span><br><span class="line">    <span class="keyword">static</span> loginReadyPromise: Promise&lt;any&gt; = Promise.resolve()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 正在登陆</span></span><br><span class="line">    <span class="keyword">static</span> isLoading: boolean = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 导出的API对象</span></span><br><span class="line">    <span class="keyword">static</span> apiLists: &#123; [key: <span class="built_in">string</span>]: () =&gt; any;&#125; = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// token</span></span><br><span class="line">    <span class="keyword">static</span> token: <span class="built_in">string</span> = <span class="string">''</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    // 开始处理options</span><br><span class="line">    static conbineOptions(opts, data: Datas, method: Methohs): Options &#123;</span><br><span class="line">        typeof opts ===  'string' &amp;&amp; (opts = &#123;url: opts&#125;)</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            data: &#123; ...commonParame, ...opts.data, ...data &#125;,</span><br><span class="line">            method: opts.method || data.method || method || 'GET',</span><br><span class="line">            url: `$&#123;opts.host || MAINHOST&#125;$&#123;opts.url&#125;`</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="title">getToken</span><span class="params">()</span></span>&#123;</span><br><span class="line">        !this.token &amp;&amp; (this.token = Taro.getStorageSync('token'))</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.token</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 登陆</span></span><br><span class="line">    <span class="keyword">static</span> login()&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.isLoading) &#123;</span><br><span class="line">            <span class="keyword">this</span>.loginReadyPromise = <span class="keyword">this</span>.onLogining()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.loginReadyPromise</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> onLogining()&#123;</span><br><span class="line">        <span class="keyword">this</span>.isLoading = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Promise(async (resolve, reject) =&gt; &#123;</span><br><span class="line">            <span class="comment">// 获取code</span></span><br><span class="line">            <span class="keyword">const</span> &#123; code &#125; = await Taro.login();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> &#123; data &#125; = await Taro.request(&#123;</span><br><span class="line">                url: `$&#123;MAINHOST&#125;$&#123;requestConfig.loginUrl&#125;`,</span><br><span class="line">                data:&#123;code: code&#125;</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (data.code !== <span class="number">0</span> || !data.data || !data.data.token) &#123;</span><br><span class="line">                reject()</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 基于 Taro.request 的 request 请求</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * */</span> </span><br><span class="line">    <span class="keyword">static</span> async request(opts: Options) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Taro.request 请求</span></span><br><span class="line">        <span class="keyword">const</span> res = await Taro.request(opts);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 是否mock</span></span><br><span class="line">        <span class="keyword">if</span>(ISMOCK) <span class="keyword">return</span> res.data;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 请求失败</span></span><br><span class="line">        <span class="keyword">if</span> (res.data.code === <span class="number">99999</span>) &#123;</span><br><span class="line">            await <span class="keyword">this</span>.login();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.request(opts)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 请求成功</span></span><br><span class="line">        <span class="keyword">if</span> (res.data) &#123;</span><br><span class="line">            <span class="keyword">return</span> res.data</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 请求错误</span></span><br><span class="line">        const edata = &#123; ...res.data, err : (res.data &amp;&amp; res.data.msg) || '网络错误 ~'&#125;</span><br><span class="line">        Tips.toast(edata.err)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Error(edata.err)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 创建请求函数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">static</span> creatRequests(opts: Options | <span class="built_in">string</span>) : () =&gt; &#123;&#125; &#123;</span><br><span class="line">       console.log('opts==&gt;',opts);</span><br><span class="line">       <span class="keyword">return</span> async (data=&#123;&#125;, method: Methods = <span class="string">"GET"</span>) =&gt; &#123;</span><br><span class="line">           <span class="keyword">const</span> _opts = <span class="keyword">this</span>.conbineOptions(opts, data, method)</span><br><span class="line">           <span class="keyword">const</span> res = await <span class="keyword">this</span>.request(_opts)</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/** </span></span><br><span class="line"><span class="comment">    * 抛出API方法</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">static</span> <span class="title">getApiList</span><span class="params">(requestConfig)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!Object.keys(requestConfig).length) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Object.keys(requestConfig).forEach((key)=&gt;&#123;</span><br><span class="line">            <span class="keyword">this</span>.apiLists[key] = <span class="keyword">this</span>.creatRequests(requestConfig[key])</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.apiLists</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Api = Request.getApiList(requestConfig)</span><br><span class="line">Component.prototype.$api = Api</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Api as any</span><br></pre></td></tr></table></figure><blockquote><p>注：</p></blockquote><p>在这里tslint会报这样的错：<code>类型“Component&lt;any, any&gt;”上不存在属性“$api”</code>。，因为没有添加声明，需在./src目录下创建<code>app-shim.d.ts</code></p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 添加taro等自定义类型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">import Taro,&#123; Component &#125; from '@tarojs/taro'</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在Component上定义自定义方法类型</span></span><br><span class="line">declare module '@tarojs/taro' &#123;</span><br><span class="line">    interface Component &#123;</span><br><span class="line">        $api: any</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明</span></span><br><span class="line">declare let require: any;</span><br><span class="line">declare let dispatch: any</span><br></pre></td></tr></table></figure><h3 id="8、在-src-config下创建taroConfig-ts，封装taro小程序的一些方法"><a href="#8、在-src-config下创建taroConfig-ts，封装taro小程序的一些方法" class="headerlink" title="8、在./src/config下创建taroConfig.ts，封装taro小程序的一些方法"></a>8、在<code>./src/config</code>下创建taroConfig.ts，封装taro小程序的一些方法</h3><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import Taro,&#123; Component &#125; from '@tarojs/taro'</span><br><span class="line">import &#123; SHAREINFO &#125; from '../config/index'</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 封装taro小程序的一些方法</span></span><br><span class="line"><span class="comment"> *  - 方法改写</span></span><br><span class="line"><span class="comment"> *  - utils 挂载</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// navigateTo 超过8次后，强行进行redirectTo,避免页面卡顿</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">const</span> nav = Taro.navigateTo</span><br><span class="line"> Taro.navigateTo = (data) =&gt; &#123;</span><br><span class="line">     <span class="keyword">if</span> (Taro.getCurrentPages().length &gt; <span class="number">8</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> Taro.redirectTo(data)</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> nav(data)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载分享方法 Component</span></span><br><span class="line"></span><br><span class="line">Component.prototype.onShareAppMessage = function () &#123;</span><br><span class="line">    <span class="keyword">return</span> SHAREINFO</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置文件生成脚本"><a href="#配置文件生成脚本" class="headerlink" title="配置文件生成脚本"></a>配置文件生成脚本</h2><h3 id="1、在根目录下创建scripts文件夹，添加-scripts-template-js"><a href="#1、在根目录下创建scripts文件夹，添加-scripts-template-js" class="headerlink" title="1、在根目录下创建scripts文件夹，添加./scripts/template.js"></a>1、在根目录下创建scripts文件夹，添加<code>./scripts/template.js</code></h3><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> *  pages 页面快速生成脚本</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> *  npm run tem '文件名‘</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">const fs = require('fs')</span><br><span class="line"><span class="keyword">const</span> dirName = process.argv[<span class="number">2</span>]</span><br><span class="line"><span class="keyword">const</span> capPirName = dirName.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase() + dirName.substring(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!dirName) &#123;</span><br><span class="line">    console.log('文件名不能为空');</span><br><span class="line">    console.log('用法：npm run tem test');</span><br><span class="line">    process.<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 页面模板构建</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> indexTep = `</span><br><span class="line">    import Taro, &#123; Component, Config &#125; from '@tarojs/taro'</span><br><span class="line">    import &#123; View &#125; from '@tarojs/components'</span><br><span class="line">    <span class="comment">// import &#123; connect &#125; from '@tarojs/redux'</span></span><br><span class="line">    <span class="comment">// import Api from '../../utils/request'</span></span><br><span class="line">    <span class="comment">// import Tips from '../../utils/tips'</span></span><br><span class="line">    import &#123; $&#123;capPirName&#125;Props, $&#123;capPirName&#125;State &#125; from './$&#123;dirName&#125;.interface'</span><br><span class="line">    import './$&#123;dirName&#125;.scss'</span><br><span class="line">    <span class="comment">// import &#123;  &#125; from '../../components'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// @connect((&#123; $&#123;dirName&#125; &#125;) =&gt; (&#123;</span></span><br><span class="line">    <span class="comment">//     ...$&#123;dirName&#125;,</span></span><br><span class="line">    <span class="comment">// &#125;))</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> $&#123;</span>capPirName&#125; extends Component&lt;$&#123;capPirName&#125;Props,$&#123;capPirName&#125;State &gt; &#123;</span><br><span class="line">    config:Config = &#123;</span><br><span class="line">        navigationBarTitleText: '页面标题'</span><br><span class="line">    &#125;</span><br><span class="line">    constructor(props: $&#123;capPirName&#125;Props) &#123;</span><br><span class="line">        super(props)</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">        &lt;View className='fx-$&#123;dirName&#125;-wrap'&gt;</span><br><span class="line">            页面内容</span><br><span class="line">        &lt;/View&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> $&#123;capPirName&#125;</span><br><span class="line">`</span><br><span class="line"></span><br><span class="line"><span class="comment">// scss 文件模板</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> scssTep = `</span><br><span class="line">    @<span class="keyword">import</span> <span class="string">"../../assets/scss/variables"</span>;</span><br><span class="line">    .#&#123;$prefix&#125; &#123;</span><br><span class="line">        &amp;-$&#123;dirName&#125;-wrap &#123;</span><br><span class="line">            width: <span class="number">100</span>%;</span><br><span class="line">            min-height: <span class="number">100</span>Vh;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">`</span><br><span class="line"></span><br><span class="line"><span class="comment">// config 接口地址配置模板</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> configTep =`</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        test:'/wechat/perfect-info',  //XX接口</span><br><span class="line">    &#125;</span><br><span class="line">`</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口请求模板</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> serviceTep =`</span><br><span class="line">    import Api from '../../utils/request'</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">const</span> testApi = data =&gt; Api.test(</span><br><span class="line">        data</span><br><span class="line">    )</span><br><span class="line">`</span><br><span class="line"></span><br><span class="line"><span class="comment">// model 模板</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> modelTep = `</span><br><span class="line">    <span class="comment">// import Taro from '@tarojs/taro';</span></span><br><span class="line">    <span class="comment">// import * as $&#123;dirName&#125;Api from './service';</span></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        namespace: '$&#123;dirName&#125;',</span><br><span class="line">        state: &#123;</span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line">        effects: &#123;&#125;,</span><br><span class="line">        </span><br><span class="line">        reducers: &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">`</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> interfaceTep = `</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * $&#123;dirName&#125;.state 参数类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @export</span></span><br><span class="line"><span class="comment"> * @interface $&#123;capPirName&#125;State</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> interface $&#123;capPirName&#125;State &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * $&#123;dirName&#125;.props 参数类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @export</span></span><br><span class="line"><span class="comment"> * @interface $&#123;capPirName&#125;Props</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> interface $&#123;capPirName&#125;Props &#123;&#125;</span><br><span class="line">`</span><br><span class="line"></span><br><span class="line">fs.mkdirSync(`./src/pages/$&#123;dirName&#125;`); <span class="comment">// mkdir $1</span></span><br><span class="line">process.chdir(`./src/pages/$&#123;dirName&#125;`); <span class="comment">// cd $1</span></span><br><span class="line"></span><br><span class="line">fs.writeFileSync(`$&#123;dirName&#125;.tsx`, indexTep); <span class="comment">//tsx</span></span><br><span class="line">fs.writeFileSync(`$&#123;dirName&#125;.scss`, scssTep); <span class="comment">// scss</span></span><br><span class="line">fs.writeFileSync('config.ts', configTep); // config</span><br><span class="line">fs.writeFileSync('service.ts', serviceTep); // service</span><br><span class="line">fs.writeFileSync('model.ts', modelTep); // model</span><br><span class="line">fs.writeFileSync(`$&#123;dirName&#125;.interface.ts`, interfaceTep); <span class="comment">// interface</span></span><br><span class="line">process.<span class="built_in">exit</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><blockquote><p>最后</p></blockquote><p>在根目录的<code>package.json</code>的scripts里加上对应的命令</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">"tep"</span>: <span class="string">"node scripts/template"</span>,</span><br><span class="line">  <span class="string">"com"</span>: <span class="string">"node scripts/component"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、自动生成脚本文件夹"><a href="#2、自动生成脚本文件夹" class="headerlink" title="2、自动生成脚本文件夹"></a>2、自动生成脚本文件夹</h3><p><code>cnpm run tep index</code></p><p>page文件夹下生成了一个index的文件夹，里面包含</p><ul><li>config.ts</li><li>index.interface.ts</li><li>index.scss</li><li>index.tsx</li><li>model.ts</li><li>service.ts</li></ul><h2 id="配置业务代码"><a href="#配置业务代码" class="headerlink" title="配置业务代码"></a>配置业务代码</h2><h3 id="1、先在src目录下创建models文件夹，集合项目里的model关系。"><a href="#1、先在src目录下创建models文件夹，集合项目里的model关系。" class="headerlink" title="1、先在src目录下创建models文件夹，集合项目里的model关系。"></a>1、先在<code>src</code>目录下创建<code>models</code>文件夹，集合项目里的<code>model</code>关系。</h3><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import index from '../pages/index/model';</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>[</span><br><span class="line">    index</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>项目目前只有<code>index</code>页面，<code>export default</code>这里的数组就只有<code>index</code>，需要注意这里是<code>[]</code>数组。</p><h3 id="2、修改非常主要的文件app-tsx"><a href="#2、修改非常主要的文件app-tsx" class="headerlink" title="2、修改非常主要的文件app.tsx"></a>2、修改非常主要的文件<code>app.tsx</code></h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import Taro, &#123; Component, Config &#125; from '@tarojs/taro'</span><br><span class="line"><span class="keyword">import</span> <span class="string">"@tarojs/async-await"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; from <span class="string">"@tarojs/redux"</span>;</span><br><span class="line">import dva from './utils/dva';</span><br><span class="line">import './utils/request';</span><br><span class="line">import &#123; globalData &#125; from './utils/common';</span><br><span class="line"></span><br><span class="line">import models from './models'</span><br><span class="line">import Index from './pages/index'</span><br><span class="line">import './app.scss'</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果需要在 h5 环境中开启 React Devtools</span></span><br><span class="line"><span class="comment">// 取消以下注释：</span></span><br><span class="line"><span class="comment">// if (process.env.NODE_ENV !== 'production' &amp;&amp; process.env.TARO_ENV === 'h5')  &#123;</span></span><br><span class="line"><span class="comment">//   require('nerv-devtools')</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dvaApp = dva.createApp(&#123;</span><br><span class="line">  initialState:&#123;&#125;,</span><br><span class="line">  models:  models,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = dvaApp.getStore();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="title">extends</span> <span class="title">Component</span> &#123;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 指定config的类型声明为: Taro.Config</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * 由于 typescript 对于 object 类型推导只能推出 Key 的基本类型</span></span><br><span class="line"><span class="comment">   * 对于像 navigationBarTextStyle: 'black' 这样的推导出的类型是 string</span></span><br><span class="line"><span class="comment">   * 提示和声明 navigationBarTextStyle: 'black' | 'white' 类型冲突, 需要显示声明类型</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  config: Config = &#123;</span><br><span class="line">    pages: [</span><br><span class="line">      'pages/index/index'</span><br><span class="line">    ],</span><br><span class="line">    window: &#123;</span><br><span class="line">      backgroundTextStyle: 'light',</span><br><span class="line">      navigationBarBackgroundColor: '#fff',</span><br><span class="line">      navigationBarTitleText: 'WeChat',</span><br><span class="line">      navigationBarTextStyle: 'black'</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   *  1.小程序打开的参数 globalData.extraData.xx</span></span><br><span class="line"><span class="comment">   *  2.从二维码进入的参数 globalData.extraData.xx</span></span><br><span class="line"><span class="comment">   *  3.获取小程序的设备信息 globalData.systemInfo</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function">async <span class="title">componentDidMount</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取参数</span></span><br><span class="line">    <span class="keyword">const</span> referrerInfo = <span class="keyword">this</span>.$router.params.referrerInfo</span><br><span class="line">    <span class="keyword">const</span> query = <span class="keyword">this</span>.$router.params.query</span><br><span class="line">    !globalData.extraData &amp;&amp; (globalData.extraData = &#123;&#125;)</span><br><span class="line">    <span class="keyword">if</span> (referrerInfo &amp;&amp; referrerInfo.extraData) &#123;</span><br><span class="line">      globalData.extraData = referrerInfo.extraData</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (query) &#123;</span><br><span class="line">      globalData.extraData = &#123;</span><br><span class="line">        ...globalData.extraData,</span><br><span class="line">        ...query</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取设备信息</span></span><br><span class="line">    <span class="keyword">const</span> sys = await Taro.getSystemInfo()</span><br><span class="line">    sys &amp;&amp; (globalData.systemInfo = sys)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidShow () &#123;&#125;</span><br><span class="line"></span><br><span class="line">  componentDidHide () &#123;&#125;</span><br><span class="line"></span><br><span class="line">  componentDidCatchError () &#123;&#125;</span><br><span class="line"></span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">        &lt;Index /&gt;</span><br><span class="line">      &lt;/Provider&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Taro.render(&lt;App /&gt;, document.getElementById('app'))</span><br></pre></td></tr></table></figure><h3 id="3、修改接口请求-src-pages-index-config-ts文件"><a href="#3、修改接口请求-src-pages-index-config-ts文件" class="headerlink" title="3、修改接口请求./src/pages/index/config.ts文件"></a>3、修改接口请求<code>./src/pages/index/config.ts</code>文件</h3><p>一个获取列表数据接口</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  getList: '/getlist', //getlist接口</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、修改-src-config-requestConfig-ts文件的映射关系"><a href="#4、修改-src-config-requestConfig-ts文件的映射关系" class="headerlink" title="4、修改./src/config/requestConfig.ts文件的映射关系"></a>4、修改<code>./src/config/requestConfig.ts</code>文件的映射关系</h3><p>引入<code>index</code>页面的刚刚创建的<code>config</code>文件</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> index from <span class="string">"../pages/index/config"</span>; <span class="comment">// index的接口</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 请求公共参数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> commonParame = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 请求的映射文件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> requestConfig = &#123;</span><br><span class="line">    loginUrl:'/api/user/wechat-auth', // 微信的登陆接口</span><br><span class="line">    ...index</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、修改-src-pages-index-service-ts里的接口请求"><a href="#5、修改-src-pages-index-service-ts里的接口请求" class="headerlink" title="5、修改./src/pages/index/service.ts里的接口请求"></a>5、修改<code>./src/pages/index/service.ts</code>里的接口请求</h3><p>还是依据之前的<code>getlist</code>接口</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import Api from '../../utils/request'</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getList = (data) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> Api.getList(data)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、修改-src-pages-index-index-interface-ts里的参数类型"><a href="#6、修改-src-pages-index-index-interface-ts里的参数类型" class="headerlink" title="6、修改./src/pages/index/index.interface.ts里的参数类型"></a>6、修改<code>./src/pages/index/index.interface.ts</code>里的参数类型</h3><p>根据项目具体的参数，自行进行配置</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * index.state 参数类型</span></span><br><span class="line"><span class="comment"> * @interface IndexState</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> interface IndexState &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * index.props 参数类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @export</span></span><br><span class="line"><span class="comment"> * @interface IndexProps</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> interface IndexProps &#123;</span><br><span class="line">    dispatch?: any,</span><br><span class="line">    data?: Array&lt;DataInterface&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> interface DataInterface &#123;</span><br><span class="line">    des:<span class="built_in">string</span>,</span><br><span class="line">    lunar:<span class="built_in">string</span>,</span><br><span class="line">    thumbnail_pic_s:<span class="built_in">string</span>,</span><br><span class="line">    title:<span class="built_in">string</span>,</span><br><span class="line">    _id:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7、修改-src-pages-index-model-ts里effects函数"><a href="#7、修改-src-pages-index-model-ts里effects函数" class="headerlink" title="7、修改./src/pages/index/model.ts里effects函数"></a>7、修改<code>./src/pages/index/model.ts</code>里<code>effects</code>函数</h3><p>在这里创建页面需要请求的接口，链接<code>service</code>里的接口发起数据请求,这里以<code>getList</code>为例。</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// import Taro from '@tarojs/taro';</span></span><br><span class="line">import * as indexApi from './service';</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  namespace: 'index',</span><br><span class="line">  state: &#123;</span><br><span class="line">    data:[],</span><br><span class="line">    v:'1.0',</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  effects: &#123;</span><br><span class="line">    *getList(&#123; payload &#125;,&#123;select, call, put&#125;)&#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; error, result&#125; = yield call(indexApi.getList,&#123;</span><br><span class="line">        ...payload</span><br><span class="line">      &#125;)</span><br><span class="line">      console.log('数据接口返回',result);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (!error) &#123;</span><br><span class="line">        <span class="function">yield <span class="title">put</span><span class="params">(&#123;</span></span></span><br><span class="line">          type: 'save',</span><br><span class="line">          payload: &#123;</span><br><span class="line">            data:result.data</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  reducers: &#123;</span><br><span class="line">    save(state, &#123; payload &#125;) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, ...payload &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8、修改-src-pages-index-index-tsx里页面结构"><a href="#8、修改-src-pages-index-index-tsx里页面结构" class="headerlink" title="8、修改./src/pages/index/index.tsx里页面结构"></a>8、修改<code>./src/pages/index/index.tsx</code>里页面结构</h3><p>这里简单的实现列表新闻页面。</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import Taro, &#123; Component, Config &#125; from '@tarojs/taro'</span><br><span class="line">import &#123; View, Text&#125; from '@tarojs/components'</span><br><span class="line">import &#123; connect &#125; from '@tarojs/redux'</span><br><span class="line"><span class="comment">// import Api from '../../utils/request'</span></span><br><span class="line"><span class="comment">// import Tips from '../../utils/tips'</span></span><br><span class="line">import &#123; IndexProps, IndexState &#125; from './index.interface'</span><br><span class="line">import './index.scss'</span><br><span class="line"><span class="comment">// import &#123;  &#125; from '../../components'</span></span><br><span class="line"></span><br><span class="line">@connect((&#123; index &#125;) =&gt; (&#123;</span><br><span class="line">    ...index,</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="title">extends</span> <span class="title">Component</span>&lt;IndexProps,IndexState &gt; &#123;</span></span><br><span class="line">  config:Config = &#123;</span><br><span class="line">    navigationBarTitleText: 'taro_dva_typescript'</span><br><span class="line">  &#125;</span><br><span class="line">  constructor(props: IndexProps) &#123;</span><br><span class="line">    super(props)</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  async getList() &#123;</span><br><span class="line">    await <span class="keyword">this</span>.props.dispatch(&#123;</span><br><span class="line">      type: 'index/getList',</span><br><span class="line">      payload: &#123;&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">this</span>.getList()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; data &#125; = <span class="keyword">this</span>.props</span><br><span class="line">    console.log('this.props===&gt;&gt;',data);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View className='fx-index-wrap'&gt;</span><br><span class="line">          &lt;View className='index-topbar'&gt;New资讯&lt;/View&gt;</span><br><span class="line">          &lt;View className='index-data'&gt;</span><br><span class="line">            &#123;</span><br><span class="line">              data &amp;&amp; data.<span class="built_in">map</span>((item,index) =&gt; &#123;</span><br><span class="line">                <span class="keyword">return</span> (</span><br><span class="line">                  &lt;View className='index-list' key=&#123;index&#125;&gt;</span><br><span class="line">                    &lt;View className='index-title'&gt;&#123;item.title&#125;&lt;/View&gt;</span><br><span class="line">                    &lt;View className='index-img' style=&#123;`background-image: url($&#123;item.thumbnail_pic_s&#125;)`&#125;&gt;&lt;/View&gt;</span><br><span class="line">                  &lt;/View&gt;</span><br><span class="line">                )</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">          &lt;/View&gt;</span><br><span class="line">      &lt;/View&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Index</span><br></pre></td></tr></table></figure><h3 id="9、修改-src-pages-index-index-scss首页的样式"><a href="#9、修改-src-pages-index-index-scss首页的样式" class="headerlink" title="9、修改./src/pages/index/index.scss首页的样式"></a>9、修改<code>./src/pages/index/index.scss</code>首页的样式</h3><p>这里的写法是<code>sass</code>的语法糖</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@<span class="keyword">import</span> <span class="string">"../../assets/scss/variables"</span>;</span><br><span class="line"></span><br><span class="line">.#&#123;$prefix&#125; &#123;</span><br><span class="line"></span><br><span class="line">  &amp;-index-wrap &#123;</span><br><span class="line">    width: <span class="number">100</span>%;</span><br><span class="line">    min-height: <span class="number">100</span>vh;</span><br><span class="line">    .index &#123;</span><br><span class="line">      &amp;-topbar &#123;</span><br><span class="line">        padding: <span class="number">10</span>rpx <span class="number">50</span>rpx;</span><br><span class="line">        text-align: center;</span><br><span class="line">        font-weight: bold;</span><br><span class="line">        color: #<span class="number">333</span>;</span><br><span class="line">        font-size: <span class="number">30</span>rpx;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">// &amp;-data &#123;</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">       </span><br><span class="line">      &amp;-title &#123;</span><br><span class="line">        font-size: <span class="number">28</span>rpx;</span><br><span class="line">        color: #<span class="number">666</span>;</span><br><span class="line">        width: <span class="number">100</span>%;</span><br><span class="line">        font-weight: bold;</span><br><span class="line">      &#125;</span><br><span class="line">      &amp;-<span class="built_in">list</span>&#123;</span><br><span class="line">        border-bottom: <span class="number">1</span>rpx solid <span class="meta">#eee;</span></span><br><span class="line">        padding-bottom: <span class="number">20</span>rpx;</span><br><span class="line">        margin: <span class="number">20</span>rpx <span class="number">24</span>rpx;</span><br><span class="line">        display: flex;</span><br><span class="line">        flex-direction: row;</span><br><span class="line">        justify-content: space-between;</span><br><span class="line">        align-items: center</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      &amp;-img &#123;</span><br><span class="line">        width: <span class="number">70</span>%;</span><br><span class="line">        height: <span class="number">200</span>rpx;</span><br><span class="line">        background-repeat: no-repeat;</span><br><span class="line">        background-size: contain;</span><br><span class="line">        background-position: right center;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="项目启动"><a href="#项目启动" class="headerlink" title="项目启动"></a>项目启动</h1><p>运行小程序编译命令</p><p><code>cnpm run dev:weapp</code></p><p>等待项目编译完成，会在项目根目录下生成一个<code>dist</code>,打开微信小程序开发者根据，导入本地刚刚生成的<code>dist</code>文件，就成功启动了项目。</p><p>效果预览图：</p><p><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/taro/tdt2.jpg" alt="Taro"></p><hr><p>如有啥问题欢迎讨论，共同学习。</p><p>项目示例Github地址：<a href="https://github.com/Duanruilong/taro_dva_typescript" target="_blank" rel="noopener">https://github.com/Duanruilong/taro_dva_typescript</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;微信小程序的开发目前是很热的一个领域，有很多的开发模式，找到一种属于自己的方法才会使得开发顺心顺利。&lt;/p&gt;
&lt;p&gt;此架构是使用 Taro + dva + typescript 构建前端开发&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;京东凹凸实验室的React框架Taro很成熟，又是大厂在维护更新迭代，不用担心没人维护的问题，他有自己的UI还有物料社区，比起原生小程序方便很多，支持多端，一处代码，多处运行，微信小程序、H5、百度小程序、支付宝小程序、字节跳动小程序、QQ轻应用、快应用、ReactNative；&lt;/li&gt;
&lt;li&gt;数据管理是Redux集成的dva框架，是一个基于 redux 和 redux-saga 的数据流方案，然后为了简化开发体验，dva 还额外内置了 react-router 和 fetch，所以也可以理解为一个轻量级的应用框架；&lt;/li&gt;
&lt;li&gt;TypeScript就是所谓的JavaScript超集。它不是JavaScript的替代品，也不会为JavaScript代码添加任何新功能。相反，TypeScript允许程序员在其代码中使用面向对象的构造，然后将其转换为JavaScript。它还包括类型安全和编译时类型检查等便利功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/taro.jpg&quot; alt=&quot;Taro&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="https://duanruilong.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Javascript" scheme="https://duanruilong.github.io/tags/Javascript/"/>
    
      <category term="编程" scheme="https://duanruilong.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="dva" scheme="https://duanruilong.github.io/tags/dva/"/>
    
      <category term="Typescript" scheme="https://duanruilong.github.io/tags/Typescript/"/>
    
  </entry>
  
  <entry>
    <title>AQL 基本语法&amp;用法</title>
    <link href="https://duanruilong.github.io/2019/07/01/AQL-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95-%E7%94%A8%E6%B3%95/"/>
    <id>https://duanruilong.github.io/2019/07/01/AQL-基本语法-用法/</id>
    <published>2019-07-01T08:22:09.000Z</published>
    <updated>2019-07-01T08:50:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>ArangoDB查询语言（AQL）类似于结构化查询语言（SQL）  在它的目的。两者都支持读取和修改集合数据，但AQL不支持数据定义操作，例如创建和删除数据库，集合和索引。</p><p>虽然有些关键字重叠，但AQL语法与SQL不同。例如，SQL WHERE和AQL FILTER子句是等效的，因为它们都定义了返回结果的条件。但是，SQL使用预定义的序列来确定WHERE语句必须在哪里出现。在AQL中，子句从左到右执行，因此FILTER查询中子句的位置决定了它的优先级。</p><p>尽管有这些差异，任何具有SQL背景的人都应该没有学习AQL的困难。</p><p><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/arangdb.png" alt="ArangoDB"></p><a id="more"></a><h1 id="一、数据预览"><a href="#一、数据预览" class="headerlink" title="一、数据预览"></a>一、数据预览</h1><p>本次使用的数据共有43条，每条数据包含姓氏、年龄、活动状态和特征等六个字段<br><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/arangdb/n1.png" alt="ArangoDB"></p><p>其中每个特征都有一个随机字母作为文档密钥。特质标签有英文和德文。<br><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/arangdb/n2_1.png" alt="ArangoDB"></p><p>地点由地名和经纬度组成：<br><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/arangdb/n2.png" alt="ArangoDB"></p><h1 id="二、基本的CRUD"><a href="#二、基本的CRUD" class="headerlink" title="二、基本的CRUD"></a>二、基本的CRUD</h1><h2 id="创建集合："><a href="#创建集合：" class="headerlink" title="创建集合："></a>创建集合：</h2><p>在创建文档之前，需要创造一个放置它的集合，集合可以通过Web界面，arangosh或驱动程序来创建。AQL无法创建集合。</p><p><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/arangdb/n3.png" alt="ArangoDB"></p><p>单击Web界面中的COLLECTIONS，然后单击Add Collection并键入 Charactersname。使用保存确认。新集合就出现在了列表中。</p><h2 id="插入单个对象："><a href="#插入单个对象：" class="headerlink" title="插入单个对象："></a>插入单个对象：</h2><p>使用AQL插入文档<br><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/arangdb/n4.png" alt="ArangoDB"></p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">INSERT &#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"Ned"</span>,</span><br><span class="line">    <span class="string">"surname"</span>: <span class="string">"Stark"</span>,</span><br><span class="line">    <span class="string">"alive"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"age"</span>: <span class="number">41</span>,</span><br><span class="line">    <span class="string">"traits"</span>: [<span class="string">"A"</span>,<span class="string">"H"</span>,<span class="string">"C"</span>,<span class="string">"N"</span>,<span class="string">"P"</span>]</span><br><span class="line">&#125; INTO Characters</span><br></pre></td></tr></table></figure><p>语法：</p><p><code>INSERT document INTO collectionName</code></p><p>该文档是一个对象，由属性键和值对组成。属性键的引号在AQL中是可选的。键总是字符串，而属性值可以有不同的类型：</p><ul><li>null</li><li>boolean (true, false)</li><li>number (integer and floating point)</li><li>string</li><li>array</li><li>object </li></ul><h2 id="批量插入对象："><a href="#批量插入对象：" class="headerlink" title="批量插入对象："></a>批量插入对象：</h2><p>AQL不允许INSERT在单个查询中针对同一集合的多个操作。但是可以使用FOR循环体，插入多个文档。</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">LET data = [</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"Robert"</span>, <span class="string">"surname"</span>: <span class="string">"Baratheon"</span>, <span class="string">"alive"</span>: <span class="literal">false</span>, <span class="string">"traits"</span>: [<span class="string">"A"</span>,<span class="string">"H"</span>,<span class="string">"C"</span>] &#125;,</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"Jaime"</span>, <span class="string">"surname"</span>: <span class="string">"Lannister"</span>, <span class="string">"alive"</span>: <span class="literal">true</span>, <span class="string">"age"</span>: <span class="number">36</span>, <span class="string">"traits"</span>: [<span class="string">"A"</span>,<span class="string">"F"</span>,<span class="string">"B"</span>] &#125;,</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"Catelyn"</span>, <span class="string">"surname"</span>: <span class="string">"Stark"</span>, <span class="string">"alive"</span>: <span class="literal">false</span>, <span class="string">"age"</span>: <span class="number">40</span>, <span class="string">"traits"</span>: [<span class="string">"D"</span>,<span class="string">"H"</span>,<span class="string">"C"</span>] &#125;,</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"Cersei"</span>, <span class="string">"surname"</span>: <span class="string">"Lannister"</span>, <span class="string">"alive"</span>: <span class="literal">true</span>, <span class="string">"age"</span>: <span class="number">36</span>, <span class="string">"traits"</span>: [<span class="string">"H"</span>,<span class="string">"E"</span>,<span class="string">"F"</span>] &#125;,</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"Daenerys"</span>, <span class="string">"surname"</span>: <span class="string">"Targaryen"</span>, <span class="string">"alive"</span>: <span class="literal">true</span>, <span class="string">"age"</span>: <span class="number">16</span>, <span class="string">"traits"</span>: [<span class="string">"D"</span>,<span class="string">"H"</span>,<span class="string">"C"</span>] &#125;,</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"Jorah"</span>, <span class="string">"surname"</span>: <span class="string">"Mormont"</span>, <span class="string">"alive"</span>: <span class="literal">false</span>, <span class="string">"traits"</span>: [<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>,<span class="string">"F"</span>] &#125;,</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"Petyr"</span>, <span class="string">"surname"</span>: <span class="string">"Baelish"</span>, <span class="string">"alive"</span>: <span class="literal">false</span>, <span class="string">"traits"</span>: [<span class="string">"E"</span>,<span class="string">"G"</span>,<span class="string">"F"</span>] &#125;,</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"Viserys"</span>, <span class="string">"surname"</span>: <span class="string">"Targaryen"</span>, <span class="string">"alive"</span>: <span class="literal">false</span>, <span class="string">"traits"</span>: [<span class="string">"O"</span>,<span class="string">"L"</span>,<span class="string">"N"</span>] &#125;,</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"Jon"</span>, <span class="string">"surname"</span>: <span class="string">"Snow"</span>, <span class="string">"alive"</span>: <span class="literal">true</span>, <span class="string">"age"</span>: <span class="number">16</span>, <span class="string">"traits"</span>: [<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>,<span class="string">"F"</span>] &#125;,</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"Sansa"</span>, <span class="string">"surname"</span>: <span class="string">"Stark"</span>, <span class="string">"alive"</span>: <span class="literal">true</span>, <span class="string">"age"</span>: <span class="number">13</span>, <span class="string">"traits"</span>: [<span class="string">"D"</span>,<span class="string">"I"</span>,<span class="string">"J"</span>] &#125;,</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"Arya"</span>, <span class="string">"surname"</span>: <span class="string">"Stark"</span>, <span class="string">"alive"</span>: <span class="literal">true</span>, <span class="string">"age"</span>: <span class="number">11</span>, <span class="string">"traits"</span>: [<span class="string">"C"</span>,<span class="string">"K"</span>,<span class="string">"L"</span>] &#125;,</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"Robb"</span>, <span class="string">"surname"</span>: <span class="string">"Stark"</span>, <span class="string">"alive"</span>: <span class="literal">false</span>, <span class="string">"traits"</span>: [<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>,<span class="string">"K"</span>] &#125;,</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"Theon"</span>, <span class="string">"surname"</span>: <span class="string">"Greyjoy"</span>, <span class="string">"alive"</span>: <span class="literal">true</span>, <span class="string">"age"</span>: <span class="number">16</span>, <span class="string">"traits"</span>: [<span class="string">"E"</span>,<span class="string">"R"</span>,<span class="string">"K"</span>] &#125;,</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"Bran"</span>, <span class="string">"surname"</span>: <span class="string">"Stark"</span>, <span class="string">"alive"</span>: <span class="literal">true</span>, <span class="string">"age"</span>: <span class="number">10</span>, <span class="string">"traits"</span>: [<span class="string">"L"</span>,<span class="string">"J"</span>] &#125;,</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"Joffrey"</span>, <span class="string">"surname"</span>: <span class="string">"Baratheon"</span>, <span class="string">"alive"</span>: <span class="literal">false</span>, <span class="string">"age"</span>: <span class="number">19</span>, <span class="string">"traits"</span>: [<span class="string">"I"</span>,<span class="string">"L"</span>,<span class="string">"O"</span>] &#125;,</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"Sandor"</span>, <span class="string">"surname"</span>: <span class="string">"Clegane"</span>, <span class="string">"alive"</span>: <span class="literal">true</span>, <span class="string">"traits"</span>: [<span class="string">"A"</span>,<span class="string">"P"</span>,<span class="string">"K"</span>,<span class="string">"F"</span>] &#125;,</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"Tyrion"</span>, <span class="string">"surname"</span>: <span class="string">"Lannister"</span>, <span class="string">"alive"</span>: <span class="literal">true</span>, <span class="string">"age"</span>: <span class="number">32</span>, <span class="string">"traits"</span>: [<span class="string">"F"</span>,<span class="string">"K"</span>,<span class="string">"M"</span>,<span class="string">"N"</span>] &#125;,</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"Khal"</span>, <span class="string">"surname"</span>: <span class="string">"Drogo"</span>, <span class="string">"alive"</span>: <span class="literal">false</span>, <span class="string">"traits"</span>: [<span class="string">"A"</span>,<span class="string">"C"</span>,<span class="string">"O"</span>,<span class="string">"P"</span>] &#125;,</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"Tywin"</span>, <span class="string">"surname"</span>: <span class="string">"Lannister"</span>, <span class="string">"alive"</span>: <span class="literal">false</span>, <span class="string">"traits"</span>: [<span class="string">"O"</span>,<span class="string">"M"</span>,<span class="string">"H"</span>,<span class="string">"F"</span>] &#125;,</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"Davos"</span>, <span class="string">"surname"</span>: <span class="string">"Seaworth"</span>, <span class="string">"alive"</span>: <span class="literal">true</span>, <span class="string">"age"</span>: <span class="number">49</span>, <span class="string">"traits"</span>: [<span class="string">"C"</span>,<span class="string">"K"</span>,<span class="string">"P"</span>,<span class="string">"F"</span>] &#125;,</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"Samwell"</span>, <span class="string">"surname"</span>: <span class="string">"Tarly"</span>, <span class="string">"alive"</span>: <span class="literal">true</span>, <span class="string">"age"</span>: <span class="number">17</span>, <span class="string">"traits"</span>: [<span class="string">"C"</span>,<span class="string">"L"</span>,<span class="string">"I"</span>] &#125;,</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"Stannis"</span>, <span class="string">"surname"</span>: <span class="string">"Baratheon"</span>, <span class="string">"alive"</span>: <span class="literal">false</span>, <span class="string">"traits"</span>: [<span class="string">"H"</span>,<span class="string">"O"</span>,<span class="string">"P"</span>,<span class="string">"M"</span>] &#125;,</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"Melisandre"</span>, <span class="string">"alive"</span>: <span class="literal">true</span>, <span class="string">"traits"</span>: [<span class="string">"G"</span>,<span class="string">"E"</span>,<span class="string">"H"</span>] &#125;,</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"Margaery"</span>, <span class="string">"surname"</span>: <span class="string">"Tyrell"</span>, <span class="string">"alive"</span>: <span class="literal">false</span>, <span class="string">"traits"</span>: [<span class="string">"M"</span>,<span class="string">"D"</span>,<span class="string">"B"</span>] &#125;,</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"Jeor"</span>, <span class="string">"surname"</span>: <span class="string">"Mormont"</span>, <span class="string">"alive"</span>: <span class="literal">false</span>, <span class="string">"traits"</span>: [<span class="string">"C"</span>,<span class="string">"H"</span>,<span class="string">"M"</span>,<span class="string">"P"</span>] &#125;,</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"Bronn"</span>, <span class="string">"alive"</span>: <span class="literal">true</span>, <span class="string">"traits"</span>: [<span class="string">"K"</span>,<span class="string">"E"</span>,<span class="string">"C"</span>] &#125;,</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"Varys"</span>, <span class="string">"alive"</span>: <span class="literal">true</span>, <span class="string">"traits"</span>: [<span class="string">"M"</span>,<span class="string">"F"</span>,<span class="string">"N"</span>,<span class="string">"E"</span>] &#125;,</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"Shae"</span>, <span class="string">"alive"</span>: <span class="literal">false</span>, <span class="string">"traits"</span>: [<span class="string">"M"</span>,<span class="string">"D"</span>,<span class="string">"G"</span>] &#125;,</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"Talisa"</span>, <span class="string">"surname"</span>: <span class="string">"Maegyr"</span>, <span class="string">"alive"</span>: <span class="literal">false</span>, <span class="string">"traits"</span>: [<span class="string">"D"</span>,<span class="string">"C"</span>,<span class="string">"B"</span>] &#125;,</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"Gendry"</span>, <span class="string">"alive"</span>: <span class="literal">false</span>, <span class="string">"traits"</span>: [<span class="string">"K"</span>,<span class="string">"C"</span>,<span class="string">"A"</span>] &#125;,</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"Ygritte"</span>, <span class="string">"alive"</span>: <span class="literal">false</span>, <span class="string">"traits"</span>: [<span class="string">"A"</span>,<span class="string">"P"</span>,<span class="string">"K"</span>] &#125;,</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"Tormund"</span>, <span class="string">"surname"</span>: <span class="string">"Giantsbane"</span>, <span class="string">"alive"</span>: <span class="literal">true</span>, <span class="string">"traits"</span>: [<span class="string">"C"</span>,<span class="string">"P"</span>,<span class="string">"A"</span>,<span class="string">"I"</span>] &#125;,</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"Gilly"</span>, <span class="string">"alive"</span>: <span class="literal">true</span>, <span class="string">"traits"</span>: [<span class="string">"L"</span>,<span class="string">"J"</span>] &#125;,</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"Brienne"</span>, <span class="string">"surname"</span>: <span class="string">"Tarth"</span>, <span class="string">"alive"</span>: <span class="literal">true</span>, <span class="string">"age"</span>: <span class="number">32</span>, <span class="string">"traits"</span>: [<span class="string">"P"</span>,<span class="string">"C"</span>,<span class="string">"A"</span>,<span class="string">"K"</span>] &#125;,</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"Ramsay"</span>, <span class="string">"surname"</span>: <span class="string">"Bolton"</span>, <span class="string">"alive"</span>: <span class="literal">true</span>, <span class="string">"traits"</span>: [<span class="string">"E"</span>,<span class="string">"O"</span>,<span class="string">"G"</span>,<span class="string">"A"</span>] &#125;,</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"Ellaria"</span>, <span class="string">"surname"</span>: <span class="string">"Sand"</span>, <span class="string">"alive"</span>: <span class="literal">true</span>, <span class="string">"traits"</span>: [<span class="string">"P"</span>,<span class="string">"O"</span>,<span class="string">"A"</span>,<span class="string">"E"</span>] &#125;,</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"Daario"</span>, <span class="string">"surname"</span>: <span class="string">"Naharis"</span>, <span class="string">"alive"</span>: <span class="literal">true</span>, <span class="string">"traits"</span>: [<span class="string">"K"</span>,<span class="string">"P"</span>,<span class="string">"A"</span>] &#125;,</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"Missandei"</span>, <span class="string">"alive"</span>: <span class="literal">true</span>, <span class="string">"traits"</span>: [<span class="string">"D"</span>,<span class="string">"L"</span>,<span class="string">"C"</span>,<span class="string">"M"</span>] &#125;,</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"Tommen"</span>, <span class="string">"surname"</span>: <span class="string">"Baratheon"</span>, <span class="string">"alive"</span>: <span class="literal">true</span>, <span class="string">"traits"</span>: [<span class="string">"I"</span>,<span class="string">"L"</span>,<span class="string">"B"</span>] &#125;,</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"Jaqen"</span>, <span class="string">"surname"</span>: <span class="string">"H'ghar"</span>, <span class="string">"alive"</span>: <span class="literal">true</span>, <span class="string">"traits"</span>: [<span class="string">"H"</span>,<span class="string">"F"</span>,<span class="string">"K"</span>] &#125;,</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"Roose"</span>, <span class="string">"surname"</span>: <span class="string">"Bolton"</span>, <span class="string">"alive"</span>: <span class="literal">true</span>, <span class="string">"traits"</span>: [<span class="string">"H"</span>,<span class="string">"E"</span>,<span class="string">"F"</span>,<span class="string">"A"</span>] &#125;,</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"The High Sparrow"</span>, <span class="string">"alive"</span>: <span class="literal">true</span>, <span class="string">"traits"</span>: [<span class="string">"H"</span>,<span class="string">"M"</span>,<span class="string">"F"</span>,<span class="string">"O"</span>] &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">FOR d IN data</span><br><span class="line">    INSERT d INTO Characters</span><br></pre></td></tr></table></figure><p>语法：</p><p><code>LET variableName = valueExpression</code></p><p>LET关键字定义了同名称的变量数据和对象值的数列，格式为<code>[ {...}, {...}, ... ]</code></p><p><code>FOR variableName IN expression</code></p><p>用于迭代数据数组的每个元素 。在每个循环中，将一个元素分配给变量d。然后在INSERT语句中使用此变量。相当于下面的格式：</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">INSERT &#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"Robert"</span>,</span><br><span class="line">    <span class="string">"surname"</span>: <span class="string">"Baratheon"</span>,</span><br><span class="line">    <span class="string">"alive"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"traits"</span>: [<span class="string">"A"</span>,<span class="string">"H"</span>,<span class="string">"C"</span>]</span><br><span class="line">&#125; INTO Characters</span><br><span class="line"></span><br><span class="line">INSERT &#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"Jaime"</span>,</span><br><span class="line">    <span class="string">"surname"</span>: <span class="string">"Lannister"</span>,</span><br><span class="line">    <span class="string">"alive"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"age"</span>: <span class="number">36</span>,</span><br><span class="line">    <span class="string">"traits"</span>: [<span class="string">"A"</span>,<span class="string">"F"</span>,<span class="string">"B"</span>]</span><br><span class="line">&#125; INTO Characters</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="检索"><a href="#检索" class="headerlink" title="检索"></a>检索</h2><p>检索集合中的所有文档：</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FOR c IN Characters</span><br><span class="line">    RETURN c</span><br></pre></td></tr></table></figure><p>语法：</p><p><code>FOR variableName IN collectionName</code></p><p>对于集合中的每个文档，依次分配给变量c，然后根据循环体返回该文档。</p><p>选取其中一个文档如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   &quot;_key&quot;: &quot;2861650&quot;,</span><br><span class="line">   &quot;_id&quot;: &quot;Characters/2861650&quot;,</span><br><span class="line">   &quot;_rev&quot;: &quot;_V1bzsXa---&quot;,</span><br><span class="line">   &quot;name&quot;: &quot;Ned&quot;,</span><br><span class="line">   &quot;surname&quot;: &quot;Stark&quot;,</span><br><span class="line">   &quot;alive&quot;: true,</span><br><span class="line">   &quot;age&quot;: 41,</span><br><span class="line">   &quot;traits&quot;: [&quot;A&quot;,&quot;H&quot;,&quot;C&quot;,&quot;N&quot;,&quot;P&quot;]</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><p>该文档包含我们存储的四个属性，以及数据库系统添加的另外三个属性：</p><ul><li><p>_key：文档键，用户可以在创建文档时提供文档键，也可以自动分配唯一值，不能改变，只读</p></li><li><p>_id：集合名/文档键，只读</p></li><li><p>_rev：系统管理的修订版ID，只读</p></li></ul><h2 id="检索特定文档："><a href="#检索特定文档：" class="headerlink" title="检索特定文档："></a>检索特定文档：</h2><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">RETURN <span class="title">DOCUMENT</span><span class="params">(<span class="string">"Characters"</span>, <span class="string">"2861650"</span>)</span></span></span><br><span class="line"><span class="function"><span class="comment">// --- or ---</span></span></span><br><span class="line"><span class="function">RETURN <span class="title">DOCUMENT</span><span class="params">(<span class="string">"Characters/2861650"</span>)</span></span></span><br></pre></td></tr></table></figure><p>返回：</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"_key"</span>: <span class="string">"2861650"</span>,</span><br><span class="line">    <span class="string">"_id"</span>: <span class="string">"Characters/2861650"</span>,</span><br><span class="line">    <span class="string">"_rev"</span>: <span class="string">"_V1bzsXa---"</span>,</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"Ned"</span>,</span><br><span class="line">    <span class="string">"surname"</span>: <span class="string">"Stark"</span>,</span><br><span class="line">    <span class="string">"alive"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"age"</span>: <span class="number">41</span>,</span><br><span class="line">    <span class="string">"traits"</span>: [<span class="string">"A"</span>,<span class="string">"H"</span>,<span class="string">"C"</span>,<span class="string">"N"</span>,<span class="string">"P"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>语法：</p><p><code>DOCUMENT()</code></p><p>使用_key或_id检索特定文档，该函数还允许一次获取多个文档</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">RETURN <span class="title">DOCUMENT</span><span class="params">(<span class="string">"Characters"</span>, [<span class="string">"2861650"</span>, <span class="string">"2861653"</span>])</span></span></span><br><span class="line"><span class="function"><span class="comment">// --- or ---</span></span></span><br><span class="line"><span class="function">RETURN <span class="title">DOCUMENT</span><span class="params">([<span class="string">"Characters/2861650"</span>, <span class="string">"Characters/2861653"</span>])</span></span></span><br></pre></td></tr></table></figure><h2 id="更新文档："><a href="#更新文档：" class="headerlink" title="更新文档："></a>更新文档：</h2><p>修改现有文件：</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE <span class="string">"2861650"</span> WITH &#123; alive: <span class="literal">false</span> &#125; IN Characters</span><br><span class="line">语法：</span><br><span class="line">UPDATE documentKey WITH object IN collectionName</span><br></pre></td></tr></table></figure><p>用列出的属性更新指定的文档（如果它们不存在则添加它们），但保持其余不变。要替换整个文档内容，则要使用REPLACE函数：</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">REPLACE <span class="string">"2861650"</span> WITH &#123;</span><br><span class="line">    name: <span class="string">"Ned"</span>,</span><br><span class="line">    surname: <span class="string">"Stark"</span>,</span><br><span class="line">    alive: <span class="literal">false</span>,</span><br><span class="line">    age: <span class="number">41</span>,</span><br><span class="line">    traits: [<span class="string">"A"</span>,<span class="string">"H"</span>,<span class="string">"C"</span>,<span class="string">"N"</span>,<span class="string">"P"</span>]</span><br><span class="line">&#125; IN Characters</span><br></pre></td></tr></table></figure><p>该函数也适用于循环，例如为所有文档添加新属性：</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FOR c IN Characters</span><br><span class="line">    UPDATE c WITH &#123; season: <span class="number">1</span> &#125; IN Characters</span><br></pre></td></tr></table></figure><h2 id="删除文件："><a href="#删除文件：" class="headerlink" title="删除文件："></a>删除文件：</h2><p>语法：</p><p><code>REMOVE _key IN Collectiosname</code></p><p>要从集合中完全删除文档，需要执行REMOVE操作。它的工作方式与其他修改操作类似，但没有WITH子句：</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REMOVE <span class="string">"2861650"</span> IN Characters</span><br></pre></td></tr></table></figure><h1 id="三、匹配文件"><a href="#三、匹配文件" class="headerlink" title="三、匹配文件"></a>三、匹配文件</h1><p>语法：</p><p><code>FILTER</code></p><p>查找满足比_key相等更复杂的条件的文档，能够为要匹配的文档制定任意条件。</p><p>等于条件：</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FOR c IN Characters</span><br><span class="line">    FILTER c.name == <span class="string">"Ned"</span></span><br><span class="line">    RETURN c</span><br></pre></td></tr></table></figure><p>过滤条件如下：“ 字符文档的属性name必须等于字符串Ned ”。如果条件适用，则返回字符文档。</p><p>范围条件：<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FOR c IN Characters</span><br><span class="line">    FILTER c.age &gt;= <span class="number">13</span></span><br><span class="line">    RETURN c.name</span><br></pre></td></tr></table></figure></p><p>多种条件：</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">FOR c IN Characters</span><br><span class="line">    FILTER c.age &lt; <span class="number">13</span></span><br><span class="line">    FILTER c.age != null</span><br><span class="line">    RETURN &#123; name: c.name, age: c.age &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//or</span></span><br><span class="line"></span><br><span class="line">FOR c IN Characters</span><br><span class="line">    FILTER c.age &lt; <span class="number">13</span> AND c.age != null</span><br><span class="line">    RETURN &#123; name: c.name, age: c.age &#125;</span><br></pre></td></tr></table></figure><p>替代条件：</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FOR c IN Characters</span><br><span class="line">    FILTER c.name == <span class="string">"Jon"</span> OR c.name == <span class="string">"Joffrey"</span></span><br><span class="line">    RETURN &#123; name: c.name, surname: c.surname &#125;</span><br></pre></td></tr></table></figure><h1 id="四、排序和限制"><a href="#四、排序和限制" class="headerlink" title="四、排序和限制"></a>四、排序和限制</h1><h2 id="限制语法："><a href="#限制语法：" class="headerlink" title="限制语法："></a>限制语法：</h2><p><code>LIMIT()</code></p><p>LIMIT后面跟着一个最大显示数的数字,限制结果显示行数。</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FOR c IN Characters</span><br><span class="line">    LIMIT <span class="number">5</span></span><br><span class="line">    RETURN c.name</span><br></pre></td></tr></table></figure><p>还可以使用LIMIT来跳过一定数量的记录返回下一个n个文档：</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FOR c IN Characters</span><br><span class="line">    LIMIT <span class="number">2</span>, <span class="number">5</span></span><br><span class="line">    RETURN c.name</span><br></pre></td></tr></table></figure><h2 id="排序语法："><a href="#排序语法：" class="headerlink" title="排序语法："></a>排序语法：</h2><p><code>SORT()</code>    </p><p>DESC降序来反转排序顺序 </p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FOR c IN Characters</span><br><span class="line">    SORT c.name DESC</span><br><span class="line">    LIMIT <span class="number">10</span></span><br><span class="line">    RETURN c.name</span><br></pre></td></tr></table></figure><h2 id="多个字段排序"><a href="#多个字段排序" class="headerlink" title="多个字段排序"></a>多个字段排序</h2><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">FOR c IN Characters</span><br><span class="line">    FILTER c.surname</span><br><span class="line">    SORT c.surname, c.name</span><br><span class="line">    LIMIT <span class="number">10</span></span><br><span class="line">    RETURN &#123;</span><br><span class="line">        surname: c.surname,</span><br><span class="line">        name: c.name</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>此处FILTER的作用是仅保留surname为非空记录</p><h1 id="五、组合"><a href="#五、组合" class="headerlink" title="五、组合"></a>五、组合</h1><p>语法：<br><code>MERGE()</code></p><p>MERGE()的功能是将对象组合在一起。因为使用了原始字符属性{ traits: … }，所以后者被合并覆盖。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FOR c IN Characters</span><br><span class="line">    RETURN MERGE(c, &#123; traits: DOCUMENT("Traits", c.traits)[*].en &#125; )</span><br></pre></td></tr></table></figure><h1 id="六、图操作"><a href="#六、图操作" class="headerlink" title="六、图操作"></a>六、图操作</h1><p>创建图：</p><p>语法：</p><p><code>INSERT { _from: _id(A), _to: _id(B) } INTO ChildOf</code></p><p>实例：<br>首先，创建一个新的集合，并确保将集合类型更改为Edge。</p><p><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/arangdb/n5.png" alt="ArangoDB"></p><p>然后，通过查询多个集合的数据，将结果存入边集合中</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">LET data = [                                                        <span class="comment">//关系数据</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"parent"</span>: &#123; <span class="string">"name"</span>: <span class="string">"Ned"</span>, <span class="string">"surname"</span>: <span class="string">"Stark"</span> &#125;,</span><br><span class="line">        <span class="string">"child"</span>: &#123; <span class="string">"name"</span>: <span class="string">"Robb"</span>, <span class="string">"surname"</span>: <span class="string">"Stark"</span> &#125;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="string">"parent"</span>: &#123; <span class="string">"name"</span>: <span class="string">"Ned"</span>, <span class="string">"surname"</span>: <span class="string">"Stark"</span> &#125;,</span><br><span class="line">        <span class="string">"child"</span>: &#123; <span class="string">"name"</span>: <span class="string">"Sansa"</span>, <span class="string">"surname"</span>: <span class="string">"Stark"</span> &#125;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="string">"parent"</span>: &#123; <span class="string">"name"</span>: <span class="string">"Ned"</span>, <span class="string">"surname"</span>: <span class="string">"Stark"</span> &#125;,</span><br><span class="line">        <span class="string">"child"</span>: &#123; <span class="string">"name"</span>: <span class="string">"Arya"</span>, <span class="string">"surname"</span>: <span class="string">"Stark"</span> &#125;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="string">"parent"</span>: &#123; <span class="string">"name"</span>: <span class="string">"Ned"</span>, <span class="string">"surname"</span>: <span class="string">"Stark"</span> &#125;,</span><br><span class="line">        <span class="string">"child"</span>: &#123; <span class="string">"name"</span>: <span class="string">"Bran"</span>, <span class="string">"surname"</span>: <span class="string">"Stark"</span> &#125;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="string">"parent"</span>: &#123; <span class="string">"name"</span>: <span class="string">"Catelyn"</span>, <span class="string">"surname"</span>: <span class="string">"Stark"</span> &#125;,</span><br><span class="line">        <span class="string">"child"</span>: &#123; <span class="string">"name"</span>: <span class="string">"Robb"</span>, <span class="string">"surname"</span>: <span class="string">"Stark"</span> &#125;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="string">"parent"</span>: &#123; <span class="string">"name"</span>: <span class="string">"Catelyn"</span>, <span class="string">"surname"</span>: <span class="string">"Stark"</span> &#125;,</span><br><span class="line">        <span class="string">"child"</span>: &#123; <span class="string">"name"</span>: <span class="string">"Sansa"</span>, <span class="string">"surname"</span>: <span class="string">"Stark"</span> &#125;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="string">"parent"</span>: &#123; <span class="string">"name"</span>: <span class="string">"Catelyn"</span>, <span class="string">"surname"</span>: <span class="string">"Stark"</span> &#125;,</span><br><span class="line">        <span class="string">"child"</span>: &#123; <span class="string">"name"</span>: <span class="string">"Arya"</span>, <span class="string">"surname"</span>: <span class="string">"Stark"</span> &#125;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="string">"parent"</span>: &#123; <span class="string">"name"</span>: <span class="string">"Catelyn"</span>, <span class="string">"surname"</span>: <span class="string">"Stark"</span> &#125;,</span><br><span class="line">        <span class="string">"child"</span>: &#123; <span class="string">"name"</span>: <span class="string">"Bran"</span>, <span class="string">"surname"</span>: <span class="string">"Stark"</span> &#125;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="string">"parent"</span>: &#123; <span class="string">"name"</span>: <span class="string">"Ned"</span>, <span class="string">"surname"</span>: <span class="string">"Stark"</span> &#125;,</span><br><span class="line">        <span class="string">"child"</span>: &#123; <span class="string">"name"</span>: <span class="string">"Jon"</span>, <span class="string">"surname"</span>: <span class="string">"Snow"</span> &#125;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="string">"parent"</span>: &#123; <span class="string">"name"</span>: <span class="string">"Tywin"</span>, <span class="string">"surname"</span>: <span class="string">"Lannister"</span> &#125;,</span><br><span class="line">        <span class="string">"child"</span>: &#123; <span class="string">"name"</span>: <span class="string">"Jaime"</span>, <span class="string">"surname"</span>: <span class="string">"Lannister"</span> &#125;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="string">"parent"</span>: &#123; <span class="string">"name"</span>: <span class="string">"Tywin"</span>, <span class="string">"surname"</span>: <span class="string">"Lannister"</span> &#125;,</span><br><span class="line">        <span class="string">"child"</span>: &#123; <span class="string">"name"</span>: <span class="string">"Cersei"</span>, <span class="string">"surname"</span>: <span class="string">"Lannister"</span> &#125;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="string">"parent"</span>: &#123; <span class="string">"name"</span>: <span class="string">"Tywin"</span>, <span class="string">"surname"</span>: <span class="string">"Lannister"</span> &#125;,</span><br><span class="line">        <span class="string">"child"</span>: &#123; <span class="string">"name"</span>: <span class="string">"Tyrion"</span>, <span class="string">"surname"</span>: <span class="string">"Lannister"</span> &#125;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="string">"parent"</span>: &#123; <span class="string">"name"</span>: <span class="string">"Cersei"</span>, <span class="string">"surname"</span>: <span class="string">"Lannister"</span> &#125;,</span><br><span class="line">        <span class="string">"child"</span>: &#123; <span class="string">"name"</span>: <span class="string">"Joffrey"</span>, <span class="string">"surname"</span>: <span class="string">"Baratheon"</span> &#125;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="string">"parent"</span>: &#123; <span class="string">"name"</span>: <span class="string">"Jaime"</span>, <span class="string">"surname"</span>: <span class="string">"Lannister"</span> &#125;,</span><br><span class="line">        <span class="string">"child"</span>: &#123; <span class="string">"name"</span>: <span class="string">"Joffrey"</span>, <span class="string">"surname"</span>: <span class="string">"Baratheon"</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">FOR rel in data</span><br><span class="line">    LET parentId = FIRST(                                    <span class="comment">//FIRST()提取第一个元素</span></span><br><span class="line">        FOR c IN Characters</span><br><span class="line">            FILTER c.name == rel.parent.name                    <span class="comment">//筛选条件</span></span><br><span class="line">            FILTER c.surname == rel.parent.surname</span><br><span class="line">            LIMIT <span class="number">1</span></span><br><span class="line">            RETURN c._id                                                 <span class="comment">//返回_id</span></span><br><span class="line">    )</span><br><span class="line">    LET childId = FIRST(</span><br><span class="line">        FOR c IN Characters</span><br><span class="line">            FILTER c.name == rel.child.name</span><br><span class="line">            FILTER c.surname == rel.child.surname</span><br><span class="line">            LIMIT <span class="number">1</span></span><br><span class="line">            RETURN c._id</span><br><span class="line">    )</span><br><span class="line">    FILTER parentId != null AND childId != null                        <span class="comment">//剔除_id都为空的记录</span></span><br><span class="line">    INSERT &#123; _from: childId, _to: parentId &#125; INTO ChildOf       <span class="comment">//将数据插入边集合</span></span><br><span class="line">    RETURN NEW                                                                   <span class="comment">//返回数据</span></span><br></pre></td></tr></table></figure><p>也可以直接创建边数据：</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT &#123; _from: <span class="string">"Characters/robb"</span>, _to: <span class="string">"Characters/ned"</span> &#125; INTO ChildOf</span><br></pre></td></tr></table></figure><h2 id="遍历图："><a href="#遍历图：" class="headerlink" title="遍历图："></a>遍历图：</h2><p> 语法：</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FOR v IN <span class="number">1.</span><span class="number">.1</span> OUTBOUND _id ChildOf</span><br><span class="line"></span><br><span class="line">    RETURN v.name</span><br><span class="line"></span><br><span class="line">其中<span class="number">1.</span><span class="number">.1</span>为遍历深度</span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FOR c IN Characters</span><br><span class="line">    FILTER c.name == <span class="string">"Bran"</span></span><br><span class="line">    FOR v IN <span class="number">1.</span><span class="number">.1</span> OUTBOUND c ChildOf</span><br><span class="line">        RETURN v.name</span><br></pre></td></tr></table></figure><p>返回</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  <span class="string">"Ned"</span>,</span><br><span class="line">  <span class="string">"Catelyn"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>遍历的情况如下图：</p><p><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/arangdb/n6.png" alt="ArangoDB"></p><p>若是反向遍历，则需要使用到INBOUND关键字：</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FOR c IN Characters</span><br><span class="line">    FILTER c.name == <span class="string">"Tywin"</span></span><br><span class="line">    FOR v IN <span class="number">2.</span><span class="number">.2</span> INBOUND c ChildOf</span><br><span class="line">        RETURN DISTINCT v.name</span><br><span class="line">输出：</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">  <span class="string">"Joffrey"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>遍历情况如下：</p><p><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/arangdb/n8.png" alt="ArangoDB"></p><p>需要注意的是，“1..1”限制了遍历深度为1，“2..2”限制了遍历深度为2，而”1..2”限制遍历深度既可以为1也可以为2。</p><h1 id="七、地理空间查询"><a href="#七、地理空间查询" class="headerlink" title="七、地理空间查询"></a>七、地理空间查询</h1><h2 id="地点数据"><a href="#地点数据" class="headerlink" title="地点数据"></a>地点数据</h2><p>创建地点集合：</p><p><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/arangdb/n8.png" alt="ArangoDB"></p><p>录入地点数据：</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">LET places = [</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"Dragonstone"</span>, <span class="string">"coordinate"</span>: [ <span class="number">55.167801</span>, <span class="number">-6.815096</span> ] &#125;,</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"King's Landing"</span>, <span class="string">"coordinate"</span>: [ <span class="number">42.639752</span>, <span class="number">18.110189</span> ] &#125;,</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"The Red Keep"</span>, <span class="string">"coordinate"</span>: [ <span class="number">35.896447</span>, <span class="number">14.446442</span> ] &#125;,</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"Yunkai"</span>, <span class="string">"coordinate"</span>: [ <span class="number">31.046642</span>, <span class="number">-7.129532</span> ] &#125;,</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"Astapor"</span>, <span class="string">"coordinate"</span>: [ <span class="number">31.50974</span>, <span class="number">-9.774249</span> ] &#125;,</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"Winterfell"</span>, <span class="string">"coordinate"</span>: [ <span class="number">54.368321</span>, <span class="number">-5.581312</span> ] &#125;,</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"Vaes Dothrak"</span>, <span class="string">"coordinate"</span>: [ <span class="number">54.16776</span>, <span class="number">-6.096125</span> ] &#125;,</span><br><span class="line">    &#123; <span class="string">"name"</span>: <span class="string">"Beyond the wall"</span>, <span class="string">"coordinate"</span>: [ <span class="number">64.265473</span>, <span class="number">-21.094093</span> ] &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">FOR place IN places</span><br><span class="line">    INSERT place INTO Locations</span><br></pre></td></tr></table></figure><p>设置地理空间索引：</p><p>在COLLECTIONS界面，添加新的Indexes，设置为coordinate字段：</p><p><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/arangdb/n9.png" alt="ArangoDB"></p><p><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/arangdb/n10.png" alt="ArangoDB"></p><h2 id="查找附近的位置"><a href="#查找附近的位置" class="headerlink" title="查找附近的位置"></a>查找附近的位置</h2><p>语法：</p><p><code>NEAR()</code></p><p>找到最接近的坐标参考点</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">FOR loc IN <span class="title">NEAR</span><span class="params">(Locations, <span class="number">53.35</span>, <span class="number">-6.26</span>, <span class="number">3</span>)</span></span></span><br><span class="line"><span class="function">    RETURN </span>&#123;</span><br><span class="line">        name: loc.name,</span><br><span class="line">        latitude: loc.coordinate[<span class="number">0</span>],</span><br><span class="line">        longitude: loc.coordinate[<span class="number">1</span>]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"Vaes Dothrak"</span>,</span><br><span class="line">    <span class="string">"latitude"</span>: <span class="number">54.16776</span>,</span><br><span class="line">    <span class="string">"longitude"</span>: <span class="number">-6.096125</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"Winterfell"</span>,</span><br><span class="line">    <span class="string">"latitude"</span>: <span class="number">54.368321</span>,</span><br><span class="line">    <span class="string">"longitude"</span>: <span class="number">-5.581312</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"Dragonstone"</span>,</span><br><span class="line">    <span class="string">"latitude"</span>: <span class="number">55.167801</span>,</span><br><span class="line">    <span class="string">"longitude"</span>: <span class="number">-6.815096</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="查找半径内的位置"><a href="#查找半径内的位置" class="headerlink" title="查找半径内的位置"></a>查找半径内的位置</h2><p>语法：</p><p><code>WITHIN()</code></p><p>从参考点搜索给定半径内的位置</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">FOR loc IN <span class="title">WITHIN</span><span class="params">(Locations, <span class="number">53.35</span>, <span class="number">-6.26</span>, <span class="number">200</span> * <span class="number">1000</span>)</span></span></span><br><span class="line"><span class="function">    RETURN </span>&#123;</span><br><span class="line">        name: loc.name,</span><br><span class="line">        latitude: loc.coordinate[<span class="number">0</span>],</span><br><span class="line">        longitude: loc.coordinate[<span class="number">1</span>]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"Vaes Dothrak"</span>,</span><br><span class="line">    <span class="string">"latitude"</span>: <span class="number">54.16776</span>,</span><br><span class="line">    <span class="string">"longitude"</span>: <span class="number">-6.096125</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"Winterfell"</span>,</span><br><span class="line">    <span class="string">"latitude"</span>: <span class="number">54.368321</span>,</span><br><span class="line">    <span class="string">"longitude"</span>: <span class="number">-5.581312</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="按距离查找位置："><a href="#按距离查找位置：" class="headerlink" title="按距离查找位置："></a>按距离查找位置：</h2><p>语法：</p><p><code>NEAR()或WITHIN()</code></p><p>通过添加一个可选的第五个参数返回到参考点的距离。必须是一个字符串：</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">FOR loc IN <span class="title">NEAR</span><span class="params">(Locations, <span class="number">53.35</span>, <span class="number">-6.26</span>, <span class="number">3</span>, <span class="string">"distance"</span>)</span></span></span><br><span class="line"><span class="function">    RETURN </span>&#123;</span><br><span class="line">        name: loc.name,</span><br><span class="line">        latitude: loc.coordinate[<span class="number">0</span>],</span><br><span class="line">        longitude: loc.coordinate[<span class="number">1</span>],</span><br><span class="line">        distance: loc.distance / <span class="number">1000</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"Vaes Dothrak"</span>,</span><br><span class="line">    <span class="string">"latitude"</span>: <span class="number">54.16776</span>,</span><br><span class="line">    <span class="string">"longitude"</span>: <span class="number">-6.096125</span>,</span><br><span class="line">    <span class="string">"distance"</span>: <span class="number">91.56658640314431</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"Winterfell"</span>,</span><br><span class="line">    <span class="string">"latitude"</span>: <span class="number">54.368321</span>,</span><br><span class="line">    <span class="string">"longitude"</span>: <span class="number">-5.581312</span>,</span><br><span class="line">    <span class="string">"distance"</span>: <span class="number">121.66399816395028</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"Dragonstone"</span>,</span><br><span class="line">    <span class="string">"latitude"</span>: <span class="number">55.167801</span>,</span><br><span class="line">    <span class="string">"longitude"</span>: <span class="number">-6.815096</span>,</span><br><span class="line">    <span class="string">"distance"</span>: <span class="number">205.31879386198324</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="使用AQL遇到的问题："><a href="#使用AQL遇到的问题：" class="headerlink" title="使用AQL遇到的问题："></a>使用AQL遇到的问题：</h1><blockquote><p>问题1：如何对查询结果进行计数并返回？</p></blockquote><ul><li>解决方法：</li></ul><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">RETURN <span class="title">COUNT</span><span class="params">(FOR v IN visitors FILTER v.ip == <span class="string">"127.0.0.1"</span> RETURN <span class="number">1</span>)</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ArangoDB查询语言（AQL）类似于结构化查询语言（SQL）  在它的目的。两者都支持读取和修改集合数据，但AQL不支持数据定义操作，例如创建和删除数据库，集合和索引。&lt;/p&gt;
&lt;p&gt;虽然有些关键字重叠，但AQL语法与SQL不同。例如，SQL WHERE和AQL FILTER子句是等效的，因为它们都定义了返回结果的条件。但是，SQL使用预定义的序列来确定WHERE语句必须在哪里出现。在AQL中，子句从左到右执行，因此FILTER查询中子句的位置决定了它的优先级。&lt;/p&gt;
&lt;p&gt;尽管有这些差异，任何具有SQL背景的人都应该没有学习AQL的困难。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/arangdb.png&quot; alt=&quot;ArangoDB&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="https://duanruilong.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="编程" scheme="https://duanruilong.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="工具" scheme="https://duanruilong.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="后端" scheme="https://duanruilong.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>React利用react-to-print实现打印功能</title>
    <link href="https://duanruilong.github.io/2019/06/28/React%E5%88%A9%E7%94%A8react-to-print%E5%AE%9E%E7%8E%B0%E6%89%93%E5%8D%B0%E5%8A%9F%E8%83%BD/"/>
    <id>https://duanruilong.github.io/2019/06/28/React利用react-to-print实现打印功能/</id>
    <published>2019-06-28T09:28:42.000Z</published>
    <updated>2019-06-28T09:44:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近需要在react项目中实现打印功能，刚开始想到的都是基于window.print(),但是window.print()如果直接在钉钉应用内部打印的话，直接报错，用户交互很不好。</p><p>于是就找到了<code>react-to-print</code> 下面分享下。</p><p><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/react_d.png" alt="React"></p><a id="more"></a><h1 id="react-to-print"><a href="#react-to-print" class="headerlink" title="react-to-print"></a>react-to-print</h1><p><a href="https://github.com/gregnb/react-to-print" target="_blank" rel="noopener">react-to-print的github地址</a></p><h1 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h1><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>在项目中安装依赖：</p><p><code>npm install react-to-print --save-dev</code></p><p>在项目中引入依赖：</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> ReactToPrint from <span class="string">"react-to-print"</span>;</span><br></pre></td></tr></table></figure><p>在项目中使用：</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div ref=&#123;el =&gt; (<span class="keyword">this</span>.componentRef = el)&#125;&gt;</span><br><span class="line">    &lt;div style=&#123;&#123;textAlign: 'center',color: 'red',fontSize: '40px',marginBottom: '10px',marginTop: '40px'&#125;&#125;&gt;活动二维码&lt;/div&gt;</span><br><span class="line">    &lt;div style=&#123;&#123;fontSize: '26px',textAlign: 'center'&#125;&#125;&gt;活动标题&lt;/div&gt;</span><br><span class="line">    &lt;img id='imgCode' style=&#123;&#123;width: '100%'&#125;&#125; src=&#123;this.state.qrcodeImg&#125;  alt="二维码" &gt;&lt;/img&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;Button style=&#123;&#123; marginRight: <span class="number">16</span>,marginLeft: <span class="number">30</span> &#125;&#125;  onClick=&#123;() =&gt; <span class="keyword">this</span>.handleCancel()&#125;&gt;取消&lt;/Button&gt;</span><br><span class="line"></span><br><span class="line">&lt;ReactToPrint</span><br><span class="line">    trigger=&#123;() =&gt; &lt;a &gt;&lt;Button type=<span class="string">"primary"</span>&gt;打印二维码&lt;/Button&gt;&lt;/a&gt;&#125;</span><br><span class="line">    content=&#123;() =&gt; <span class="keyword">this</span>.componentRef&#125;</span><br><span class="line">    onAfterPrint=&#123;()=&gt;&#123;</span><br><span class="line">    message.success('打印成功！');</span><br><span class="line">    &#125;&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><blockquote><p>实例完整代码</p></blockquote><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> React from <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> ReactToPrint from <span class="string">"react-to-print"</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes from <span class="string">"prop-types"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ComponentToPrint</span> <span class="title">extends</span> <span class="title">React</span>.<span class="title">Component</span> &#123;</span></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;table&gt;</span><br><span class="line">        &lt;thead&gt;</span><br><span class="line">          &lt;th&gt;column <span class="number">1</span>&lt;/th&gt;</span><br><span class="line">          &lt;th&gt;column <span class="number">2</span>&lt;/th&gt;</span><br><span class="line">          &lt;th&gt;column <span class="number">3</span>&lt;/th&gt;</span><br><span class="line">        &lt;/thead&gt;</span><br><span class="line">        &lt;tbody&gt;</span><br><span class="line">          &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;data <span class="number">1</span>&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;data <span class="number">2</span>&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;data <span class="number">3</span>&lt;/td&gt;</span><br><span class="line">          &lt;/tr&gt;</span><br><span class="line">          &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;data <span class="number">1</span>&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;data <span class="number">2</span>&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;data <span class="number">3</span>&lt;/td&gt;</span><br><span class="line">          &lt;/tr&gt;</span><br><span class="line">          &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;data <span class="number">1</span>&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;data <span class="number">2</span>&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;data <span class="number">3</span>&lt;/td&gt;</span><br><span class="line">          &lt;/tr&gt;</span><br><span class="line">        &lt;/tbody&gt;</span><br><span class="line">      &lt;/table&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> <span class="title">extends</span> <span class="title">React</span>.<span class="title">Component</span> &#123;</span></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;ReactToPrint</span><br><span class="line">          trigger=&#123;() =&gt; &lt;a href=<span class="string">"#"</span>&gt;Print <span class="keyword">this</span> out!&lt;/a&gt;&#125;</span><br><span class="line">          content=&#123;() =&gt; <span class="keyword">this</span>.componentRef&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;ComponentToPrint ref=&#123;el =&gt; (<span class="keyword">this</span>.componentRef = el)&#125; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Example;</span><br></pre></td></tr></table></figure><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>T该组件接受以下API:</p><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:left">类型</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center"><strong><code>trigger</code></strong></td><td style="text-align:left">function</td><td style="text-align:left">一个返回React Component或HTML元素的函数</td></tr><tr><td style="text-align:center"><strong><code>content</code></strong></td><td style="text-align:left">function</td><td style="text-align:left">返回组件引用值的函数。然后将该参考值的内容用于打印</td></tr><tr><td style="text-align:center"><strong><code>copyStyles</code></strong></td><td style="text-align:left">boolean</td><td style="text-align:left">将所有<style>和<link type =“stylesheet”/>从父窗口中复制到打印窗口中。（默认值：true）</td></tr><tr><td style="text-align:center"><strong><code>onBeforePrint</code></strong></td><td style="text-align:left">function</td><td style="text-align:left">在打印之前触发的回调函数</td></tr><tr><td style="text-align:center"><strong><code>onAfterPrint</code></strong></td><td style="text-align:left">function</td><td style="text-align:left">打印后触发的回调函数</td></tr><tr><td style="text-align:center"><strong><code>closeAfterPrint</code></strong></td><td style="text-align:left">boolean</td><td style="text-align:left">操作后关闭打印窗口</td></tr><tr><td style="text-align:center"><strong><code>pageStyle</code></strong></td><td style="text-align:left">string</td><td style="text-align:left">覆盖默认打印窗口样式</td></tr><tr><td style="text-align:center"><strong><code>bodyClass</code></strong></td><td style="text-align:left">string</td><td style="text-align:left">传递给打印窗体的可选类 </td></tr></tbody></table><h2 id="常问问题"><a href="#常问问题" class="headerlink" title="常问问题"></a>常问问题</h2><p>为什么<code>react-to-print</code>跳过<code>&lt;link rel=&quot;stylesheet&quot; href=&quot;&quot;&gt;</code>标签？ <code>&lt;link&gt;</code>带有空href属性的s 是<a href="https://www.w3.org/TR/html50/document-metadata.html#attr-link-href">INVALID HTML</a>。此外，它们可能导致各种<a href="https://gtmetrix.com/avoid-empty-src-or-href.html">不良行为</a>。例如，许多浏览器（包括现代浏览器）在显示时<link href="">将尝试加载当前页面。有些人甚至尝试加载当前页面的父目录。</p></style></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近需要在react项目中实现打印功能，刚开始想到的都是基于window.print(),但是window.print()如果直接在钉钉应用内部打印的话，直接报错，用户交互很不好。&lt;/p&gt;
&lt;p&gt;于是就找到了&lt;code&gt;react-to-print&lt;/code&gt; 下面分享下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/react_d.png&quot; alt=&quot;React&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="React" scheme="https://duanruilong.github.io/categories/React/"/>
    
    
      <category term="React" scheme="https://duanruilong.github.io/tags/React/"/>
    
      <category term="Ant Design" scheme="https://duanruilong.github.io/tags/Ant-Design/"/>
    
      <category term="dva" scheme="https://duanruilong.github.io/tags/dva/"/>
    
  </entry>
  
  <entry>
    <title>Ant Design + qrcode实现打印功能</title>
    <link href="https://duanruilong.github.io/2019/06/13/Ant-Design-qrcode%E5%AE%9E%E7%8E%B0%E6%89%93%E5%8D%B0%E5%8A%9F%E8%83%BD/"/>
    <id>https://duanruilong.github.io/2019/06/13/Ant-Design-qrcode实现打印功能/</id>
    <published>2019-06-13T10:19:17.000Z</published>
    <updated>2019-06-13T10:31:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>react本身有一些打印的组件，但都不好用，都是基于<code>window.print()</code>，<code>window.print()</code>直接打印的话，处理直接当前网页的body设置为你要打印的区域，但是当你取消打印的时候你会发现整个网页都被你要打印的区域占满了，你还得用window.reload()重新加载一下页面，用户交互很不好，建议不要采用这种方式。</p><p><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/react_d.png" alt="React"></p><a id="more"></a><h1 id="QRCode-js-生成二维码"><a href="#QRCode-js-生成二维码" class="headerlink" title="QRCode.js 生成二维码"></a>QRCode.js 生成二维码</h1><p>QRCode.js 是一个用于生成二维码图片的插件。</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="载入-JavaScript-文件"><a href="#载入-JavaScript-文件" class="headerlink" title="载入 JavaScript 文件"></a>载入 JavaScript 文件</h3><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"qrcode.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="DOM-结构"><a href="#DOM-结构" class="headerlink" title="DOM 结构"></a>DOM 结构</h3><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"qrcode"</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单方式</span></span><br><span class="line">new QRCode(document.getElementById('qrcode'), 'your content');</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置参数方式</span></span><br><span class="line">var qrcode = new QRCode('qrcode', &#123;</span><br><span class="line">  text: 'your content',</span><br><span class="line">  width: <span class="number">256</span>,</span><br><span class="line">  height: <span class="number">256</span>,</span><br><span class="line">  colorDark : '#000000',</span><br><span class="line">  colorLight : '#ffffff',</span><br><span class="line">  correctLevel : QRCode.CorrectLevel.H</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 API</span></span><br><span class="line">qrcode.clear();</span><br><span class="line">qrcode.makeCode('new content');</span><br></pre></td></tr></table></figure><h1 id="Ant-Design里使用"><a href="#Ant-Design里使用" class="headerlink" title="Ant Design里使用"></a>Ant Design里使用</h1><p>react中一般生成二维码都是用react.qrcode，但是发现这玩意生成的是canvas，不是图片，打印的时候预览不出来。所以我想进一切办法去把canvas转成图片，无奈拿不到这个canvas标签。最后还是用js的qrcode来生成二维码，这样生成的默认是base64位的图片，打印正常。代码如下：</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>cnpm install qrcode --save</code></p><h2 id="在页面上引入"><a href="#在页面上引入" class="headerlink" title="在页面上引入"></a>在页面上引入</h2><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import React, &#123; Component&#125; from 'react';</span><br><span class="line">import styles from './ActivityDetail.less';</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  Button,</span><br><span class="line">  message</span><br><span class="line">&#125; from 'antd';</span><br><span class="line">import * as QrCodeEs from 'qrcode';</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ActivityDetail</span> <span class="title">extends</span> <span class="title">Component</span> &#123;</span></span><br><span class="line">state = &#123;</span><br><span class="line">qrcodeImg:'', // 二维码图片地址</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成二维码点击</span></span><br><span class="line">  pathQRCodeClick(item) &#123;</span><br><span class="line">    QrCodeEs.toDataURL(item._id)</span><br><span class="line">    .then(url =&gt; &#123;</span><br><span class="line">      console.log('url=====&lt;&lt;&lt;&lt;',url)</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            qrcodeImg:url</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="keyword">catch</span>(err =&gt; &#123;</span><br><span class="line">        console.error(err)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 确定-打印二维码</span></span><br><span class="line">  handleOk = e =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; item &#125; = <span class="keyword">this</span>.props.location;</span><br><span class="line">    const win = window.open('','printwindow');</span><br><span class="line">    let codeHtml =  '&lt;div style="text-align: center;color: red;font-size: 40px;margin-bottom: 10px;margin-top: 40px"&gt;活动二维码&lt;/div&gt;&lt;br/&gt;\n' +</span><br><span class="line">                    '&lt;div style="font-size: 26px;text-align: center;"&gt;'+ item.name +'&lt;/div&gt;&lt;br/&gt;\n' +</span><br><span class="line">                    '&lt;img style="font-size: 26px;width: 340px;position: absolute;left: 50%;margin-left: -170px;" src='+ this.state.qrcodeImg +' alt="教科所" /&gt;\n'</span><br><span class="line">    win.document.write(codeHtml);</span><br><span class="line">    win.print();</span><br><span class="line">    win.close()</span><br><span class="line">    message.success('打印成功！');</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      visible: <span class="literal">false</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">render()&#123;</span><br><span class="line"><span class="keyword">return</span>(</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;Button onClick=&#123;()=&gt;&#123;this.pathQRCodeClick(item)&#125;&#125; style=&#123;&#123;marginLeft:'24px'&#125;&#125; type="primary"&gt;生成二维码&lt;/Button&gt;</span><br><span class="line">&lt;div style=&#123;&#123;width:'50%',margin:'auto'&#125;&#125;&gt;</span><br><span class="line">&lt;img id='imgCode' style=&#123;&#123;width: '100%'&#125;&#125; src=&#123;this.state.qrcodeImg&#125;  alt="二维码" &gt;&lt;/img&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ActivityDetail;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;react本身有一些打印的组件，但都不好用，都是基于&lt;code&gt;window.print()&lt;/code&gt;，&lt;code&gt;window.print()&lt;/code&gt;直接打印的话，处理直接当前网页的body设置为你要打印的区域，但是当你取消打印的时候你会发现整个网页都被你要打印的区域占满了，你还得用window.reload()重新加载一下页面，用户交互很不好，建议不要采用这种方式。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/react_d.png&quot; alt=&quot;React&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Ant Design" scheme="https://duanruilong.github.io/categories/Ant-Design/"/>
    
    
      <category term="React" scheme="https://duanruilong.github.io/tags/React/"/>
    
      <category term="Javascript" scheme="https://duanruilong.github.io/tags/Javascript/"/>
    
      <category term="Ant Design" scheme="https://duanruilong.github.io/tags/Ant-Design/"/>
    
  </entry>
  
  <entry>
    <title>dva.js学习梳理集</title>
    <link href="https://duanruilong.github.io/2019/05/22/dva-js%E5%AD%A6%E4%B9%A0%E6%A2%B3%E7%90%86%E9%9B%86/"/>
    <id>https://duanruilong.github.io/2019/05/22/dva-js学习梳理集/</id>
    <published>2019-05-21T17:01:15.000Z</published>
    <updated>2019-05-22T16:25:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>dva 首先是一个基于 redux 和 redux-saga 的数据流方案，然后为了简化开发体验，dva 还额外内置了 react-router 和 fetch，所以也可以理解为一个轻量级的应用框架</p><p><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/dva.jpg" alt="dva"></p><a id="more"></a><h1 id="疑惑"><a href="#疑惑" class="headerlink" title="疑惑"></a>疑惑</h1><ul><li>es6 特性那么多，我需要全部学会吗?</li><li>react component 有 3 种写法，我需要全部学会吗?</li><li>reducer 的增删改应该怎么写?</li><li>怎么做全局/局部的错误处理?</li><li>怎么发异步请求?</li><li>怎么处理复杂的异步业务逻辑?</li><li>怎么配置路由?</li><li>…</li></ul><p>这篇文档梳理了基于 <a href="https://github.com/dvajs/dva-cli" target="_blank" rel="noopener">dva-cli</a> 使用 <a href="https://github.com/dvajs/dva" target="_blank" rel="noopener">dva</a> 的最小知识集，让你可以用最少的时间掌握创建类似 <a href="https://github.com/dvajs/dva-hackernews" target="_blank" rel="noopener">dva-hackernews</a> 的全部知识，并且不需要掌握额外的冗余知识。</p><h2 id="JavaScript-语言"><a href="#JavaScript-语言" class="headerlink" title="JavaScript 语言"></a>JavaScript 语言</h2><h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><h4 id="const-和-let"><a href="#const-和-let" class="headerlink" title="const 和 let"></a>const 和 let</h4><p>不要用 <code>var</code>，而是用 <code>const</code> 和 <code>let</code>，分别表示常量和变量。不同于 <code>var</code> 的函数作用域，<code>const</code> 和 <code>let</code> 都是块级作用域。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> DELAY = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">count = count + <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h4 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h4><p>模板字符串提供了另一种做字符串组合的方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = <span class="string">'world'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`hello <span class="subst">$&#123;user&#125;</span>`</span>);  <span class="comment">// hello world</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 多行</span></span><br><span class="line"><span class="keyword">const</span> content = <span class="string">`</span></span><br><span class="line"><span class="string">  Hello <span class="subst">$&#123;firstName&#125;</span>,</span></span><br><span class="line"><span class="string">  Thanks for ordering <span class="subst">$&#123;qty&#125;</span> tickets to <span class="subst">$&#123;event&#125;</span>.</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure><h4 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logActivity</span>(<span class="params">activity = <span class="string">'skiing'</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(activity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logActivity();  <span class="comment">// skiing</span></span><br></pre></td></tr></table></figure><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>函数的快捷写法，不需要通过 <code>function</code> 关键字创建函数，并且还可以省略 <code>return</code> 关键字。</p><p>同时，箭头函数还会继承当前上下文的 <code>this</code> 关键字。</p><p>比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">1</span>);  <span class="comment">// [2, 3, 4]</span></span><br></pre></td></tr></table></figure><p>等同于：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map((<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + <span class="number">1</span>;</span><br><span class="line">&#125;).bind(<span class="keyword">this</span>));</span><br></pre></td></tr></table></figure><h3 id="模块的-Import-和-Export"><a href="#模块的-Import-和-Export" class="headerlink" title="模块的 Import 和 Export"></a>模块的 Import 和 Export</h3><p><code>import</code> 用于引入模块，<code>export</code> 用于导出模块。</p><p>比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入全部</span></span><br><span class="line"><span class="keyword">import</span> dva <span class="keyword">from</span> <span class="string">'dva'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入部分</span></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'dva'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Link, Route &#125; <span class="keyword">from</span> <span class="string">'dva/router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入全部并作为 github 对象</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> github <span class="keyword">from</span> <span class="string">'./services/github'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出默认</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br><span class="line"><span class="comment">// 部分导出，需 import &#123; App &#125; from './file'; 引入</span></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="title">extend</span> <span class="title">Component</span> </span>&#123;&#125;;</span><br></pre></td></tr></table></figure><h3 id="ES6-对象和数组"><a href="#ES6-对象和数组" class="headerlink" title="ES6 对象和数组"></a>ES6 对象和数组</h3><h4 id="析构赋值"><a href="#析构赋值" class="headerlink" title="析构赋值"></a>析构赋值</h4><p>析构赋值让我们从 Object 或 Array 里取部分数据存为变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象</span></span><br><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">name</span>: <span class="string">'guanguan'</span>, <span class="attr">age</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> &#123; name, age &#125; = user;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;name&#125;</span> : <span class="subst">$&#123;age&#125;</span>`</span>);  <span class="comment">// guanguan : 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">const</span> [foo, bar] = arr;</span><br><span class="line"><span class="built_in">console</span>.log(foo);  <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>我们也可以析构传入的函数参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">state, &#123; payload &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> state.concat(payload);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>析构时还可以配 alias，让代码更具有语义。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">state, &#123; payload: todo &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> state.concat(todo);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="对象字面量改进"><a href="#对象字面量改进" class="headerlink" title="对象字面量改进"></a>对象字面量改进</h4><p>这是析构的反向操作，用于重新组织一个 Object 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">'duoduo'</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = &#123; name, age &#125;;  <span class="comment">// &#123; name: 'duoduo', age: 8 &#125;</span></span><br></pre></td></tr></table></figure><p>定义对象方法时，还可以省去 <code>function</code> 关键字。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app.model(&#123;</span><br><span class="line">  reducers: &#123;</span><br><span class="line">    add() &#123;&#125;  <span class="comment">// 等同于 add: function() &#123;&#125;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  effects: &#123;</span><br><span class="line">    *addRemote() &#123;&#125;  <span class="comment">// 等同于 addRemote: function*() &#123;&#125;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="Spread-Operator"><a href="#Spread-Operator" class="headerlink" title="Spread Operator"></a>Spread Operator</h4><p>Spread Operator 即 3 个点 <code>...</code>，有几种不同的使用方法。</p><p>可用于组装数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> todos = [<span class="string">'Learn dva'</span>];</span><br><span class="line">[...todos, <span class="string">'Learn antd'</span>];  <span class="comment">// ['Learn dva', 'Learn antd']</span></span><br></pre></td></tr></table></figure><p>也可用于获取数组的部分项。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">const</span> [first, ...rest] = arr;</span><br><span class="line">rest;  <span class="comment">// ['b', 'c']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// With ignore</span></span><br><span class="line"><span class="keyword">const</span> [first, , ...rest] = arr;</span><br><span class="line">rest;  <span class="comment">// ['c']</span></span><br></pre></td></tr></table></figure><p>还可收集函数参数为数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">directions</span>(<span class="params">first, ...rest</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(rest);</span><br><span class="line">&#125;</span><br><span class="line">directions(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>);  <span class="comment">// ['b', 'c'];</span></span><br></pre></td></tr></table></figure><p>代替 apply。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x, y, z</span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">const</span> args = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面两句效果相同</span></span><br><span class="line">foo.apply(<span class="literal">null</span>, args);</span><br><span class="line">foo(...args);</span><br></pre></td></tr></table></figure><p>对于 Object 而言，用于组合成新的 Object 。(ES2017 stage-2 proposal)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: <span class="number">2</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> bar = &#123;</span><br><span class="line">  b: <span class="number">3</span>,</span><br><span class="line">  c: <span class="number">2</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> d = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ret = &#123; ...foo, ...bar, d &#125;;  <span class="comment">// &#123; a:1, b:3, c:2, d:4 &#125;</span></span><br></pre></td></tr></table></figure><p>此外，在 JSX 中 Spread Operator 还可用于扩展 props，详见 <a href="#spread-attributes">Spread Attributes</a>。</p><h3 id="Promises"><a href="#Promises" class="headerlink" title="Promises"></a>Promises</h3><p>Promise 用于更优雅地处理异步请求。比如发起异步请求：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'/api/todos'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())</span><br><span class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> (&#123; data &#125;))</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> (&#123; err &#125;));</span><br></pre></td></tr></table></figure><p>定义 Promise 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> delay = <span class="function">(<span class="params">timeout</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    setTimeout(resolve, timeout);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">delay(<span class="number">1000</span>).then(<span class="function"><span class="params">_</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'executed'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Generators"><a href="#Generators" class="headerlink" title="Generators"></a>Generators</h3><p>dva 的 effects 是通过 generator 组织的。Generator 返回的是迭代器，通过 <code>yield</code> 关键字实现暂停功能。</p><p>这是一个典型的 dva effect，通过 <code>yield</code> 把异步逻辑通过同步的方式组织起来。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">app.model(&#123;</span><br><span class="line">  namespace: <span class="string">'todos'</span>,</span><br><span class="line">  effects: &#123;</span><br><span class="line">    *addRemote(&#123; <span class="attr">payload</span>: todo &#125;, &#123; put, call &#125;) &#123;</span><br><span class="line">      <span class="keyword">yield</span> call(addTodo, todo);</span><br><span class="line">      <span class="keyword">yield</span> put(&#123; <span class="attr">type</span>: <span class="string">'add'</span>, <span class="attr">payload</span>: todo &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="React-Component"><a href="#React-Component" class="headerlink" title="React Component"></a>React Component</h2><h3 id="Stateless-Functional-Components"><a href="#Stateless-Functional-Components" class="headerlink" title="Stateless Functional Components"></a>Stateless Functional Components</h3><p>React Component 有 3 种定义方式，分别是 <code>React.createClass</code>, <code>class</code> 和 <code>Stateless Functional Component</code>。推荐尽量使用最后一种，保持简洁和无状态。这是函数，不是 Object，没有 <code>this</code> 作用域，是 pure function。</p><p>比如定义 App Component 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    props.dispatch(&#123; <span class="attr">type</span>: <span class="string">'app/create'</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &lt;div onClick=&#123;handleClick&#125;&gt;$&#123;props.name&#125;&lt;/div&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等同于：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  handleClick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.props.dispatch(&#123; <span class="attr">type</span>: <span class="string">'app/create'</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;div onClick=&#123;this.handleClick.bind(this)&#125;&gt;$&#123;this.props.name&#125;&lt;/div&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h3><h4 id="Component-嵌套"><a href="#Component-嵌套" class="headerlink" title="Component 嵌套"></a>Component 嵌套</h4><p>类似 HTML，JSX 里可以给组件添加子组件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">App</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Header</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MainContent</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Footer</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">App</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="className"><a href="#className" class="headerlink" title="className"></a>className</h4><p><code>class</code> 是保留词，所以添加样式时，需用 <code>className</code> 代替 <code>class</code> 。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">"fancy"</span>&gt;</span>Hello dva<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="JavaScript-表达式"><a href="#JavaScript-表达式" class="headerlink" title="JavaScript 表达式"></a>JavaScript 表达式</h4><p>JavaScript 表达式需要用 <code>{}</code> 括起来，会执行并返回结果。</p><p>比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;&#123; <span class="keyword">this</span>.props.title &#125;&lt;<span class="regexp">/h1&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Mapping-Arrays-to-JSX"><a href="#Mapping-Arrays-to-JSX" class="headerlink" title="Mapping Arrays to JSX"></a>Mapping Arrays to JSX</h4><p>可以把数组映射为 JSX 元素列表。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  &#123; <span class="keyword">this</span>.props.todos.map(<span class="function">(<span class="params">todo, i</span>) =&gt;</span> &lt;li key=&#123;i&#125;&gt;&#123;todo&#125;&lt;<span class="regexp">/li&gt;) &#125;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br></pre></td></tr></table></figure><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>尽量别用 <code>//</code> 做单行注释。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;</span><br><span class="line">  &#123;<span class="comment">/* multiline comment */</span>&#125;</span><br><span class="line">  &#123;<span class="comment">/*</span></span><br><span class="line"><span class="comment">    multi</span></span><br><span class="line"><span class="comment">    line</span></span><br><span class="line"><span class="comment">    comment</span></span><br><span class="line"><span class="comment">    */</span>&#125;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// single line</span></span><br><span class="line">  &#125;</span><br><span class="line">  Hello</span><br><span class="line">&lt;<span class="regexp">/h1&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Spread-Attributes"><a href="#Spread-Attributes" class="headerlink" title="Spread Attributes"></a>Spread Attributes</h4><p>这是 JSX 从 ECMAScript6 借鉴过来的很有用的特性，用于扩充组件 props 。</p><p>比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> attrs = &#123;</span><br><span class="line">  href: <span class="string">'http://example.org'</span>,</span><br><span class="line">  target: <span class="string">'_blank'</span>,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;a &#123;...attrs&#125;&gt;Hello&lt;<span class="regexp">/a&gt;</span></span><br></pre></td></tr></table></figure><p>等同于</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> attrs = &#123;</span><br><span class="line">  href: <span class="string">'http://example.org'</span>,</span><br><span class="line">  target: <span class="string">'_blank'</span>,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;a href=&#123;attrs.href&#125; target=&#123;attrs.target&#125;&gt;Hello&lt;<span class="regexp">/a&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h3><p>数据处理在 React 中是非常重要的概念之一，分别可以通过 props, state 和 context 来处理数据。而在 dva 应用里，你只需关心 props 。</p><h4 id="propTypes"><a href="#propTypes" class="headerlink" title="propTypes"></a>propTypes</h4><p>JavaScript 是弱类型语言，所以请尽量声明 propTypes 对 props 进行校验，以减少不必要的问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;props.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">App.propTypes = &#123;</span><br><span class="line">  name: React.PropTypes.string.isRequired,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>内置的 prop type 有：</p><ul><li>PropTypes.array</li><li>PropTypes.bool</li><li>PropTypes.func</li><li>PropTypes.number</li><li>PropTypes.object</li><li>PropTypes.string</li></ul><h4 id="往下传数据"><a href="#往下传数据" class="headerlink" title="往下传数据"></a>往下传数据</h4><p><img src="https://zos.alipayobjects.com/rmsportal/NAzeMyUoPMqxfRv.png" alt=""></p><h4 id="往上传数据"><a href="#往上传数据" class="headerlink" title="往上传数据"></a>往上传数据</h4><p><img src="https://zos.alipayobjects.com/rmsportal/fiKKgDGuEJfSvxv.png" alt=""></p><h3 id="CSS-Modules"><a href="#CSS-Modules" class="headerlink" title="CSS Modules"></a>CSS Modules</h3><p><img src="https://zos.alipayobjects.com/rmsportal/mHVRpjNYhVuFdsS.png" width="150" style="background:#fff;"></p><h4 id="理解-CSS-Modules"><a href="#理解-CSS-Modules" class="headerlink" title="理解 CSS Modules"></a>理解 CSS Modules</h4><p>一张图理解 CSS Modules 的工作原理：</p><p><img src="https://zos.alipayobjects.com/rmsportal/SWBwWTbZKqxwEPq.png" alt=""></p><p><code>button</code> class 在构建之后会被重命名为 <code>ProductList_button_1FU0u</code> 。<code>button</code> 是 local name，而 <code>ProductList_button_1FU0u</code> 是 global name 。<strong>你可以用简短的描述性名字，而不需要关心命名冲突问题。</strong></p><p>然后你要做的全部事情就是在 css/less 文件里写 <code>.button {...}</code>，并在组件里通过 <code>styles.button</code> 来引用他。</p><h4 id="定义全局-CSS"><a href="#定义全局-CSS" class="headerlink" title="定义全局 CSS"></a>定义全局 CSS</h4><p>CSS Modules 默认是局部作用域的，想要声明一个全局规则，可用 <code>:global</code> 语法。</p><p>比如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-pseudo">:global(.title)</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在引用的时候：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;App className=&#123;styles.title&#125; /&gt; <span class="comment">// red</span></span><br><span class="line">&lt;App className=<span class="string">"title"</span> /&gt;        <span class="comment">// green</span></span><br></pre></td></tr></table></figure><h4 id="classnames-Package"><a href="#classnames-Package" class="headerlink" title="classnames Package"></a><code>classnames</code> Package</h4><p>在一些复杂的场景中，一个元素可能对应多个 className，而每个 className 又基于一些条件来决定是否出现。这时，<a href="https://github.com/JedWatson/classnames" target="_blank" rel="noopener">classnames</a> 这个库就非常有用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> classnames <span class="keyword">from</span> <span class="string">'classnames'</span>;</span><br><span class="line"><span class="keyword">const</span> App = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> cls = classnames(&#123;</span><br><span class="line">    btn: <span class="literal">true</span>,</span><br><span class="line">    btnLarge: props.type === <span class="string">'submit'</span>,</span><br><span class="line">    btnSmall: props.type === <span class="string">'edit'</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;</span> <span class="attr">cls</span> &#125; /&gt;</span>;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><p>这样，传入不同的 type 给 App 组件，就会返回不同的 className 组合：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;App type=<span class="string">"submit"</span> /&gt; <span class="comment">// btn btnLarge</span></span><br><span class="line">&lt;App type=<span class="string">"edit"</span> /&gt;   <span class="comment">// btn btnSmall</span></span><br></pre></td></tr></table></figure><h2 id="Reducer"><a href="#Reducer" class="headerlink" title="Reducer"></a>Reducer</h2><p>reducer 是一个函数，接受 state 和 action，返回老的或新的 state 。即：<code>(state, action) =&gt; state</code></p><h3 id="增删改"><a href="#增删改" class="headerlink" title="增删改"></a>增删改</h3><p>以 todos 为例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">app.model(&#123;</span><br><span class="line">  namespace: <span class="string">'todos'</span>,</span><br><span class="line">  state: [],</span><br><span class="line">  reducers: &#123;</span><br><span class="line">    add(state, &#123; <span class="attr">payload</span>: todo &#125;) &#123;</span><br><span class="line">      <span class="keyword">return</span> state.concat(todo);</span><br><span class="line">    &#125;,</span><br><span class="line">    remove(state, &#123; <span class="attr">payload</span>: id &#125;) &#123;</span><br><span class="line">      <span class="keyword">return</span> state.filter(<span class="function"><span class="params">todo</span> =&gt;</span> todo.id !== id);</span><br><span class="line">    &#125;,</span><br><span class="line">    update(state, &#123; <span class="attr">payload</span>: updatedTodo &#125;) &#123;</span><br><span class="line">      <span class="keyword">return</span> state.map(<span class="function"><span class="params">todo</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (todo.id === updatedTodo.id) &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123; ...todo, ...updatedTodo &#125;;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> todo;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="嵌套数据的增删改"><a href="#嵌套数据的增删改" class="headerlink" title="嵌套数据的增删改"></a>嵌套数据的增删改</h3><p>建议最多一层嵌套，以保持 state 的扁平化，深层嵌套会让 reducer 很难写和难以维护。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">app.model(&#123;</span><br><span class="line">  namespace: <span class="string">'app'</span>,</span><br><span class="line">  state: &#123;</span><br><span class="line">    todos: [],</span><br><span class="line">    loading: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  reducers: &#123;</span><br><span class="line">    add(state, &#123; <span class="attr">payload</span>: todo &#125;) &#123;</span><br><span class="line">      <span class="keyword">const</span> todos = state.todos.concat(todo);</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, todos &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>下面是深层嵌套的例子，应尽量避免。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">app.model(&#123;</span><br><span class="line">  namespace: <span class="string">'app'</span>,</span><br><span class="line">  state: &#123;</span><br><span class="line">    a: &#123;</span><br><span class="line">      b: &#123;</span><br><span class="line">        todos: [],</span><br><span class="line">        loading: <span class="literal">false</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  reducers: &#123;</span><br><span class="line">    add(state, &#123; <span class="attr">payload</span>: todo &#125;) &#123;</span><br><span class="line">      <span class="keyword">const</span> todos = state.a.b.todos.concat(todo);</span><br><span class="line">      <span class="keyword">const</span> b = &#123; ...state.a.b, todos &#125;;</span><br><span class="line">      <span class="keyword">const</span> a = &#123; ...state.a, b &#125;;</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, a &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Effect"><a href="#Effect" class="headerlink" title="Effect"></a>Effect</h2><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">app.model(&#123;</span><br><span class="line">  namespace: <span class="string">'todos'</span>,</span><br><span class="line">  effects: &#123;</span><br><span class="line">    *addRemote(&#123; <span class="attr">payload</span>: todo &#125;, &#123; put, call &#125;) &#123;</span><br><span class="line">      <span class="keyword">yield</span> call(addTodo, todo);</span><br><span class="line">      <span class="keyword">yield</span> put(&#123; <span class="attr">type</span>: <span class="string">'add'</span>, <span class="attr">payload</span>: todo &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Effects"><a href="#Effects" class="headerlink" title="Effects"></a>Effects</h3><h4 id="put"><a href="#put" class="headerlink" title="put"></a>put</h4><p>用于触发 action 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">yield</span> put(&#123; <span class="attr">type</span>: <span class="string">'todos/add'</span>, <span class="attr">payload</span>: <span class="string">'Learn Dva'</span> &#125;);</span><br></pre></td></tr></table></figure><h4 id="call"><a href="#call" class="headerlink" title="call"></a>call</h4><p>用于调用异步逻辑，支持 promise 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="keyword">yield</span> call(fetch, <span class="string">'/todos'</span>);</span><br></pre></td></tr></table></figure><h4 id="select"><a href="#select" class="headerlink" title="select"></a>select</h4><p>用于从 state 里获取数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> todos = <span class="keyword">yield</span> select(<span class="function"><span class="params">state</span> =&gt;</span> state.todos);</span><br></pre></td></tr></table></figure><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><h4 id="全局错误处理"><a href="#全局错误处理" class="headerlink" title="全局错误处理"></a>全局错误处理</h4><p>dva 里，effects 和 subscriptions 的抛错全部会走 <code>onError</code> hook，所以可以在 <code>onError</code> 里统一处理错误。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = dva(&#123;</span><br><span class="line">  onError(e, dispatch) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.message);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然后 effects 里的抛错和 reject 的 promise 就都会被捕获到了。</p><h4 id="本地错误处理"><a href="#本地错误处理" class="headerlink" title="本地错误处理"></a>本地错误处理</h4><p>如果需要对某些 effects 的错误进行特殊处理，需要在 effect 内部加 <code>try catch</code> 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">app.model(&#123;</span><br><span class="line">  effects: &#123;</span><br><span class="line">    *addRemote() &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// Your Code Here</span></span><br><span class="line">      &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e.message);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="异步请求"><a href="#异步请求" class="headerlink" title="异步请求"></a>异步请求</h3><p>异步请求基于 whatwg-fetch，API 详见：<a href="https://github.com/github/fetch" target="_blank" rel="noopener">https://github.com/github/fetch</a></p><h4 id="GET-和-POST"><a href="#GET-和-POST" class="headerlink" title="GET 和 POST"></a>GET 和 POST</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">'../util/request'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GET</span></span><br><span class="line">request(<span class="string">'/api/todos'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// POST</span></span><br><span class="line">request(<span class="string">'/api/todos'</span>, &#123;</span><br><span class="line">  method: <span class="string">'POST'</span>,</span><br><span class="line">  body: <span class="built_in">JSON</span>.stringify(&#123; <span class="attr">a</span>: <span class="number">1</span> &#125;),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="统一错误处理"><a href="#统一错误处理" class="headerlink" title="统一错误处理"></a>统一错误处理</h4><p>假如约定后台返回以下格式时，做统一的错误处理。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  status: <span class="string">'error'</span>,</span><br><span class="line">  message: <span class="string">''</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编辑 <code>utils/request.js</code>，加入以下中间件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseErrorMessage</span>(<span class="params">&#123; data &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; status, message &#125; = data;</span><br><span class="line">  <span class="keyword">if</span> (status === <span class="string">'error'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(message);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123; data &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，这类错误就会走到 <code>onError</code> hook 里。</p><h2 id="Subscription"><a href="#Subscription" class="headerlink" title="Subscription"></a>Subscription</h2><p><code>subscriptions</code> 是订阅，用于订阅一个数据源，然后根据需要 dispatch 相应的 action。数据源可以是当前的时间、服务器的 websocket 连接、keyboard 输入、geolocation 变化、history 路由变化等等。格式为 <code>({ dispatch, history }) =&gt; unsubscribe</code> 。</p><h3 id="异步数据初始化"><a href="#异步数据初始化" class="headerlink" title="异步数据初始化"></a>异步数据初始化</h3><p>比如：当用户进入 <code>/users</code> 页面时，触发 action <code>users/fetch</code> 加载用户数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">app.model(&#123;</span><br><span class="line">  subscriptions: &#123;</span><br><span class="line">    setup(&#123; dispatch, history &#125;) &#123;</span><br><span class="line">      history.listen(<span class="function">(<span class="params">&#123; pathname &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (pathname === <span class="string">'/users'</span>) &#123;</span><br><span class="line">          dispatch(&#123;</span><br><span class="line">            type: <span class="string">'users/fetch'</span>,</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="path-to-regexp-Package"><a href="#path-to-regexp-Package" class="headerlink" title="path-to-regexp Package"></a><code>path-to-regexp</code> Package</h4><p>如果 url 规则比较复杂，比如 <code>/users/:userId/search</code>，那么匹配和 userId 的获取都会比较麻烦。这是推荐用 <a href="https://github.com/pillarjs/path-to-regexp" target="_blank" rel="noopener">path-to-regexp</a> 简化这部分逻辑。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pathToRegexp <span class="keyword">from</span> <span class="string">'path-to-regexp'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// in subscription</span></span><br><span class="line"><span class="keyword">const</span> match = pathToRegexp(<span class="string">'/users/:userId/search'</span>).exec(pathname);</span><br><span class="line"><span class="keyword">if</span> (match) &#123;</span><br><span class="line">  <span class="keyword">const</span> userId = match[<span class="number">1</span>];</span><br><span class="line">  <span class="comment">// dispatch action with userId</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Router"><a href="#Router" class="headerlink" title="Router"></a>Router</h2><h3 id="Config-with-JSX-Element-router-js"><a href="#Config-with-JSX-Element-router-js" class="headerlink" title="Config with JSX Element (router.js)"></a>Config with JSX Element (router.js)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=<span class="string">"/"</span> component=&#123;App&#125;&gt;</span><br><span class="line">  &lt;Route path=<span class="string">"accounts"</span> component=&#123;Accounts&#125;/&gt;</span><br><span class="line">  &lt;Route path=<span class="string">"statements"</span> component=&#123;Statements&#125;/&gt;</span><br><span class="line">&lt;<span class="regexp">/Route&gt;</span></span><br></pre></td></tr></table></figure><p>详见：<a href="https://github.com/reactjs/react-router/blob/master/docs/guides/RouteConfiguration.md" target="_blank" rel="noopener">react-router</a></p><h3 id="Route-Components"><a href="#Route-Components" class="headerlink" title="Route Components"></a>Route Components</h3><p>Route Components 是指 <code>./src/routes/</code> 目录下的文件，他们是 <code>./src/router.js</code> 里匹配的 Component。</p><h4 id="通过-connect-绑定数据"><a href="#通过-connect-绑定数据" class="headerlink" title="通过 connect 绑定数据"></a>通过 connect 绑定数据</h4><p>比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'dva'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapStateToProps</span>(<span class="params">state, ownProps</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    users: state.users,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps)(App);</span><br></pre></td></tr></table></figure><p>然后在 App 里就有了 <code>dispatch</code> 和 <code>users</code> 两个属性。</p><h4 id="Injected-Props-e-g-location"><a href="#Injected-Props-e-g-location" class="headerlink" title="Injected Props (e.g. location)"></a>Injected Props (e.g. location)</h4><p>Route Component 会有额外的 props 用以获取路由信息。</p><ul><li>location</li><li>params</li><li>children</li></ul><p>更多详见：<a href="https://github.com/reactjs/react-router/blob/master/docs/API.md#injected-props" target="_blank" rel="noopener">react-router</a></p><h3 id="基于-action-进行页面跳转"><a href="#基于-action-进行页面跳转" class="headerlink" title="基于 action 进行页面跳转"></a>基于 action 进行页面跳转</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; routerRedux &#125; <span class="keyword">from</span> <span class="string">'dva/router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Inside Effects</span></span><br><span class="line"><span class="keyword">yield</span> put(routerRedux.push(<span class="string">'/logout'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Outside Effects</span></span><br><span class="line">dispatch(routerRedux.push(<span class="string">'/logout'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// With query</span></span><br><span class="line">routerRedux.push(&#123;</span><br><span class="line">  pathname: <span class="string">'/logout'</span>,</span><br><span class="line">  query: &#123;</span><br><span class="line">    page: <span class="number">2</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>除 <code>push(location)</code> 外还有更多方法，详见 <a href="https://github.com/reactjs/react-router-redux#pushlocation-replacelocation-gonumber-goback-goforward" target="_blank" rel="noopener">react-router-redux</a></p><h2 id="dva-配置"><a href="#dva-配置" class="headerlink" title="dva 配置"></a>dva 配置</h2><h3 id="Redux-Middleware"><a href="#Redux-Middleware" class="headerlink" title="Redux Middleware"></a>Redux Middleware</h3><p>比如要添加 redux-logger 中间件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> createLogger <span class="keyword">from</span> <span class="string">'redux-logger'</span>;</span><br><span class="line"><span class="keyword">const</span> app = dva(&#123;</span><br><span class="line">  onAction: createLogger(),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>注：onAction 支持数组，可同时传入多个中间件。</p><h3 id="history"><a href="#history" class="headerlink" title="history"></a>history</h3><h4 id="切换-history-为-browserHistory"><a href="#切换-history-为-browserHistory" class="headerlink" title="切换 history 为 browserHistory"></a>切换 history 为 browserHistory</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; browserHistory &#125; <span class="keyword">from</span> <span class="string">'dva/router'</span>;</span><br><span class="line"><span class="keyword">const</span> app = dva(&#123;</span><br><span class="line">  history: browserHistory,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="去除-hashHistory-下的-k-查询参数"><a href="#去除-hashHistory-下的-k-查询参数" class="headerlink" title="去除 hashHistory 下的 _k 查询参数"></a>去除 hashHistory 下的 _k 查询参数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useRouterHistory &#125; <span class="keyword">from</span> <span class="string">'dva/router'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createHashHistory &#125; <span class="keyword">from</span> <span class="string">'history'</span>;</span><br><span class="line"><span class="keyword">const</span> app = dva(&#123;</span><br><span class="line">  history: useRouterHistory(createHashHistory)(&#123; <span class="attr">queryKey</span>: <span class="literal">false</span> &#125;),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="通过-dva-cli-创建项目"><a href="#通过-dva-cli-创建项目" class="headerlink" title="通过 dva-cli 创建项目"></a>通过 dva-cli 创建项目</h3><p>先安装 dva-cli 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install dva-cli -g</span><br></pre></td></tr></table></figure><p>然后创建项目。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dva new myapp</span><br></pre></td></tr></table></figure><p>最后，进入目录并启动。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> myapp</span><br><span class="line">$ npm start</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;dva 首先是一个基于 redux 和 redux-saga 的数据流方案，然后为了简化开发体验，dva 还额外内置了 react-router 和 fetch，所以也可以理解为一个轻量级的应用框架&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/dva.jpg&quot; alt=&quot;dva&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="dva" scheme="https://duanruilong.github.io/categories/dva/"/>
    
    
      <category term="React" scheme="https://duanruilong.github.io/tags/React/"/>
    
      <category term="Javascript" scheme="https://duanruilong.github.io/tags/Javascript/"/>
    
      <category term="编程" scheme="https://duanruilong.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="ES6" scheme="https://duanruilong.github.io/tags/ES6/"/>
    
      <category term="dva" scheme="https://duanruilong.github.io/tags/dva/"/>
    
  </entry>
  
  <entry>
    <title>使用prop-types进行属性确认</title>
    <link href="https://duanruilong.github.io/2019/03/29/%E4%BD%BF%E7%94%A8prop-types%E8%BF%9B%E8%A1%8C%E5%B1%9E%E6%80%A7%E7%A1%AE%E8%AE%A4/"/>
    <id>https://duanruilong.github.io/2019/03/29/使用prop-types进行属性确认/</id>
    <published>2019-03-29T07:48:41.000Z</published>
    <updated>2019-04-15T16:58:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>在开发 React Native 自定义组件时，可以通过属性确认来声明这个组件需要哪些属性。这样，如果在调用这个自定义组件时没有提供相应的属性，则会在手机与调试工具中弹出警告信息，告知开发者该组件需要哪些属性。</p><blockquote><p>为了保证 React Native 代码高效运行，属性确认仅在开发环境中有效。</p></blockquote><p><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/prop_types.jpg" alt="prop-types"></p><a id="more"></a><h1 id="prop-types-库的安装和配置"><a href="#prop-types-库的安装和配置" class="headerlink" title="prop-types 库的安装和配置"></a>prop-types 库的安装和配置</h1><ul><li>进入项目根目录，执行如下代码安装 prop-types 库：</li></ul><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save prop-types</span><br></pre></td></tr></table></figure><ul><li>在需要使用的 js 文件中使用如下代码引入：</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import PropTypes from 'prop-types';</span><br></pre></td></tr></table></figure><h1 id="使用prop-types"><a href="#使用prop-types" class="headerlink" title="使用prop-types"></a>使用prop-types</h1><p>下面对 list.js 代码做个修改，增加属性确认代码</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import React, &#123; Component &#125; from 'react';</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">   Text,</span><br><span class="line">   View,</span><br><span class="line"> &#125; from 'react-native';</span><br><span class="line"> </span><br><span class="line"> import PropTypes from 'prop-types';</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">List</span> <span class="title">extends</span> <span class="title">Component</span> &#123;</span></span><br><span class="line">   <span class="comment">//........</span></span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//添加属性确认</span></span><br><span class="line"> List.propTypes = &#123;</span><br><span class="line">   news: PropTypes.<span class="built_in">array</span>,</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">const</span> styles = StyleSheet.create(&#123;</span><br><span class="line">   <span class="comment">//........</span></span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><h1 id="属性确认的语法"><a href="#属性确认的语法" class="headerlink" title="属性确认的语法"></a>属性确认的语法</h1><p>1、要求属性是指定的 JavaScript 基本类型</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">属性: PropTypes.<span class="built_in">array</span>,</span><br><span class="line">属性: PropTypes.<span class="keyword">bool</span>,</span><br><span class="line">属性: PropTypes.func,</span><br><span class="line">属性: PropTypes.number,</span><br><span class="line">属性: PropTypes.object,</span><br><span class="line">属性: PropTypes.<span class="built_in">string</span>,</span><br></pre></td></tr></table></figure><p>2、要求属性是可渲染节点</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">属性: PropTypes.node,</span><br></pre></td></tr></table></figure><p>3、要求属性是某个 React 元素</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">属性: PropTypes.element,</span><br></pre></td></tr></table></figure><p>4、要求属性是某个指定类的实例</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">属性: PropTypes.instanceOf(NameOfAClass),</span><br></pre></td></tr></table></figure><p>5、要求属性取值为特定的几个值</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">属性: PropTypes.oneOf(['value1', 'value2']),</span><br></pre></td></tr></table></figure><p>6、要求属性可以为指定类型中的任意一个</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">属性: PropTypes.oneOfType([</span><br><span class="line">  PropTypes.<span class="keyword">bool</span>,</span><br><span class="line">  PropTypes.number,</span><br><span class="line">  PropTypes.instanceOf(NameOfAClass),</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>7、要求属性为指定类型的数组</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">属性: PropTypes.arrayOf(PropTypes.number),</span><br></pre></td></tr></table></figure><p>8、要求属性是一个有特定成员变量的对象</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">属性: PropTypes.objectOf(PropTypes.number),</span><br></pre></td></tr></table></figure><p>9、要求属性是一个指定构成方式的对象</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">属性: PropTypes.shape(&#123;</span><br><span class="line">  color: PropTypes.<span class="built_in">string</span>,</span><br><span class="line">  fontSize: PropTypes.number,</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><p>10、属性可以是任意类型</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">属性: PropTypes.any</span><br></pre></td></tr></table></figure><h1 id="属性声明为必需的"><a href="#属性声明为必需的" class="headerlink" title="属性声明为必需的"></a>属性声明为必需的</h1><p>上述的 10 种语法，都可以通过在后面加上 isRequired 声明它是必需的。</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">属性: PropTypes.<span class="built_in">array</span>.isRequired,</span><br><span class="line">属性: PropTypes.any.isRequired,</span><br><span class="line">属性: PropTypes.instanceOf(NameOfAClass).isRequired,</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在开发 React Native 自定义组件时，可以通过属性确认来声明这个组件需要哪些属性。这样，如果在调用这个自定义组件时没有提供相应的属性，则会在手机与调试工具中弹出警告信息，告知开发者该组件需要哪些属性。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为了保证 React Native 代码高效运行，属性确认仅在开发环境中有效。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/prop_types.jpg&quot; alt=&quot;prop-types&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程,Javascript" scheme="https://duanruilong.github.io/categories/%E7%BC%96%E7%A8%8B-Javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>docsify神奇的文档网站生成工具</title>
    <link href="https://duanruilong.github.io/2019/03/14/docsify%E7%A5%9E%E5%A5%87%E7%9A%84%E6%96%87%E6%A1%A3%E7%BD%91%E7%AB%99%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/"/>
    <id>https://duanruilong.github.io/2019/03/14/docsify神奇的文档网站生成工具/</id>
    <published>2019-03-14T06:50:13.000Z</published>
    <updated>2019-03-18T15:54:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>docsify 是一个动态生成文档网站的工具。不同于 GitBook、Hexo 的地方是它不会生成将 .md 转成 .html 文件，所有转换工作都是在运行时进行。</p><p>这将非常实用，如果只是需要快速的搭建一个小型的文档网站，或者不想因为生成的一堆 .html 文件“污染” commit 记录，只需要创建一个 index.html 就可以开始写文档而且直接部署在 GitHub Pages。</p><p><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/docsify.jpg" alt="docsify"></p><a id="more"></a><h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><ul><li>无需构建，写完文档直接发布</li><li>容易使用并且轻量 (~19kB gzipped)</li><li>智能的全文搜索</li><li>提供多套主题</li><li>丰富的 API</li><li>支持 Emoji</li><li>兼容 IE10+</li><li>支持 SSR (example)</li></ul><h1 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h1><p>推荐安装 docsify-cli 工具，可以方便创建及本地预览文档网站。</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i docsify-cli -g</span><br></pre></td></tr></table></figure><h1 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h1><p>如果想在项目的 ./docs 目录里写文档，直接通过 init 初始化项目。</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docsify init ./docs</span><br></pre></td></tr></table></figure><h1 id="开始写文档"><a href="#开始写文档" class="headerlink" title="开始写文档"></a>开始写文档</h1><p>初始化成功后，可以看到 ./docs 目录下创建的几个文件</p><ul><li>index.html 入口文件</li><li>README.md 会做为主页内容渲染</li><li>.nojekyll 用于阻止 GitHub Pages 会忽略掉下划线开头的文件<br>直接编辑 <code>docs/README.md</code> 就能更新网站内容，当然也可以写多个页面。</li></ul><h1 id="本地预览网站"><a href="#本地预览网站" class="headerlink" title="本地预览网站"></a>本地预览网站</h1><p>运行一个本地服务器通过 <code>docsify serve</code> 可以方便的预览效果，而且提供 LiveReload 功能，可以让实时的预览。默认访问 <a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a> 。</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docsify serve docs</span><br></pre></td></tr></table></figure><p>更多命令行工具用法，参考 <a href="https://github.com/docsifyjs/docsify-cli" target="_blank" rel="noopener">docsify-cli 文档</a>。</p><h1 id="手动初始化"><a href="#手动初始化" class="headerlink" title="手动初始化"></a>手动初始化</h1><p>如果不喜欢 npm 或者觉得安装工具太麻烦，我们其实只需要直接创建一个 index.html 文件。</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.html</span></span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"IE=edge,chrome=1"</span>&gt;</span><br><span class="line">  &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1"</span>&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"//unpkg.com/docsify/themes/vue.css"</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;&lt;/div&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    window.$docsify = &#123;</span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">  &lt;script src=<span class="string">"//unpkg.com/docsify/lib/docsify.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>如果系统里安装 Python 的话，也可以很轻易的启动一个静态服务器。</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd docs &amp;&amp; python -m SimpleHTTPServer <span class="number">3000</span></span><br></pre></td></tr></table></figure><h1 id="Loading-提示"><a href="#Loading-提示" class="headerlink" title="Loading 提示"></a>Loading 提示</h1><p>初始化时会显示 Loading… 内容，你可以自定义提示信息。</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.html</span></span><br><span class="line"></span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;加载中&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>如果更改了 el 的配置，需要将该元素加上 data-app 属性。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.html</span></span><br><span class="line"></span><br><span class="line">  &lt;div data-app id=<span class="string">"main"</span>&gt;加载中&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    window.$docsify = &#123;</span><br><span class="line">      el: '#main'</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>这是一份docsify开发的文档欢迎点击查看</p><ul><li><a href="https://github.com/Duanruilong/doctry" target="_blank" rel="noopener">git地址</a></li><li><a href="https://duanruilong.github.io/doctry">线上预览</a></li></ul><blockquote><p> 更加详细的设置配置参考<a href="https://docsify.js.org/#/zh-cn/" target="_blank" rel="noopener">官方文档</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;docsify 是一个动态生成文档网站的工具。不同于 GitBook、Hexo 的地方是它不会生成将 .md 转成 .html 文件，所有转换工作都是在运行时进行。&lt;/p&gt;
&lt;p&gt;这将非常实用，如果只是需要快速的搭建一个小型的文档网站，或者不想因为生成的一堆 .html 文件“污染” commit 记录，只需要创建一个 index.html 就可以开始写文档而且直接部署在 GitHub Pages。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/docsify.jpg&quot; alt=&quot;docsify&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="https://duanruilong.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>ES6--Set和Map数据结构</title>
    <link href="https://duanruilong.github.io/2019/01/29/ES6-Set%E5%92%8CMap%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>https://duanruilong.github.io/2019/01/29/ES6-Set和Map数据结构/</id>
    <published>2019-01-29T08:57:32.000Z</published>
    <updated>2019-01-29T12:14:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>ES6提供了新的数据结构Set, 它类似数组，但是成员的值都是唯一的，没有重复的值，Set本身是一个构造函数，用来生成Set数据结构。</p><p><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/es6_d.png" alt="ES6攻略"></p><a id="more"></a><h1 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h1><p>Set构造函数可以结构一个数据作为参数，用来初始化</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let s = <span class="keyword">new</span> Set();</span><br><span class="line">let  s = <span class="keyword">new</span> Set( [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>] );</span><br><span class="line">s</span><br><span class="line"><span class="comment">//Set&#123;1,2,3,4&#125;</span></span><br><span class="line">s.size</span><br><span class="line"><span class="comment">//4</span></span><br><span class="line">[...<span class="built_in">set</span>]</span><br><span class="line"><span class="comment">//[1,2,3,4]</span></span><br></pre></td></tr></table></figure><p>因此也出现了l两种数组去重的方法</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[...<span class="keyword">new</span> Set( [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>] ) ]</span><br><span class="line"><span class="comment">//[1,2,3,4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line">Array.from( <span class="keyword">new</span> Set( [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>] )  )</span><br><span class="line"><span class="comment">//[1,2,3,4,5]</span></span><br></pre></td></tr></table></figure><p>Set实例的属性和方法<br>Set结构的实例有属性:<br>Set.prototype.constructor：构造函数，默认就是Set函数；<br>Set.prototype.size：返回Set实例的成员总数；<br>Set实例的方法分为两类：操作方法和遍历方法；<br>add(value)：添加某个值，返回Set结构本身<br>delete(value)：删除某个值，返回一个布尔值，表示删除是否成功；<br>has(value)：返回一个布尔值，表示该值是否为Set的成员；<br>clear() ：清除所有成员，没有返回值；</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let s = <span class="keyword">new</span> Set( [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>] );</span><br><span class="line">s.add(<span class="number">4</span>);</span><br><span class="line">s.size</span><br><span class="line"><span class="comment">//5</span></span><br><span class="line">s.has(<span class="number">2</span>)</span><br><span class="line"><span class="comment">//true</span></span><br><span class="line">s.<span class="keyword">delete</span>(<span class="number">2</span>)</span><br><span class="line">s.has(<span class="number">2</span>)</span><br><span class="line"><span class="comment">//fasle</span></span><br><span class="line">s.clear()</span><br></pre></td></tr></table></figure><h2 id="遍历操作"><a href="#遍历操作" class="headerlink" title="遍历操作"></a>遍历操作</h2><p>Set结构的实例有四个遍历方法，可以用于遍历成员<br>keys()：返回键名的遍历器<br>values()：返回键值的遍历器<br>entries()：返回键值对的遍历器<br>forEach() :使用回调函数遍历每个成员</p><p>###（1）keys()，values()，entries()</p><p>keys方法、values方法、entries方法返回的都是遍历器对象（详见《Iterator 对象》一章）。由于 Set 结构没有键名，只有键值（或者说键名和键值是同一个值），所以keys方法和values方法的行为完全一致。</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">let set = new Set(['red', 'green', 'blue']);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (let item of <span class="built_in">set</span>.keys()) &#123;</span><br><span class="line">  console.<span class="built_in">log</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// red</span></span><br><span class="line"><span class="comment">// green</span></span><br><span class="line"><span class="comment">// blue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (let item of <span class="built_in">set</span>.values()) &#123;</span><br><span class="line">  console.<span class="built_in">log</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// red</span></span><br><span class="line"><span class="comment">// green</span></span><br><span class="line"><span class="comment">// blue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (let item of <span class="built_in">set</span>.entries()) &#123;</span><br><span class="line">  console.<span class="built_in">log</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ["red", "red"]</span></span><br><span class="line"><span class="comment">// ["green", "green"]</span></span><br><span class="line"><span class="comment">// ["blue", "blue"]</span></span><br></pre></td></tr></table></figure><h3 id="（2）forEach"><a href="#（2）forEach" class="headerlink" title="（2）forEach()"></a>（2）forEach()</h3><p>Set结构的实例的forEach方法，用于对每个成员执行某种操作，没有返回值。</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">let <span class="built_in">set</span> = <span class="keyword">new</span> Set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="built_in">set</span>.forEach((value, key) =&gt; console.<span class="built_in">log</span>(value * <span class="number">2</span>) )</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 6</span></span><br></pre></td></tr></table></figure><h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><p>JavaScript 的对象（Object），本质上是键值对的集合（Hash 结构），但是传统上只能用字符串当作键。这给它的使用带来了很大的限制。</p><p>ES6 提供了 Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。也就是说，Object 结构提供了“字符串—值”的对应，Map结构提供了“值—值”的对应，是一种更完善的 Hash 结构实现。如果你需要“键值对”的数据结构，Map 比 Object 更合适。</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">map</span> = <span class="keyword">new</span> Map([</span><br><span class="line">[<span class="string">"name"</span>,<span class="string">"张三"</span>] , [<span class="string">"title"</span>,<span class="string">"Author"</span>] </span><br><span class="line">]);</span><br><span class="line"><span class="built_in">map</span>.size</span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="built_in">map</span>.has(<span class="string">"name"</span>)<span class="comment">//true</span></span><br><span class="line"><span class="built_in">map</span>.get(<span class="string">"name"</span>)<span class="comment">//"张三"</span></span><br></pre></td></tr></table></figure><h2 id="实例的属性好操作方法"><a href="#实例的属性好操作方法" class="headerlink" title="实例的属性好操作方法"></a>实例的属性好操作方法</h2><p>（1）size属性：返回 Map 结构的成员总数。</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">map</span> = <span class="keyword">new</span> Map();</span><br><span class="line">map.set('foo', true);</span><br><span class="line">map.set('bar', false);</span><br><span class="line"><span class="built_in">map</span></span><br><span class="line"><span class="comment">//Map &#123;"foo" =&gt; true, "bar" =&gt; false&#125;</span></span><br><span class="line"><span class="built_in">map</span>.size <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>（2）set(key, value)<br>set方法设置键名key对应的键值为value，然后返回整个 Map 结构。如果key已经有值，则键值会被更新，否则就新生成该键。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> Map();</span><br><span class="line"></span><br><span class="line">m.set('edition', 6)        // 键是字符串</span><br><span class="line">m.set(262, 'standard')     // 键是数值</span><br><span class="line">m.set(undefined, 'nah')    // 键是 undefined</span><br></pre></td></tr></table></figure><p>（3）get(key)<br>get方法读取key对应的键值，如果找不到key，返回undefined。</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> Map([</span><br><span class="line">[<span class="string">"name"</span>,<span class="string">"MGT360124"</span>],[<span class="string">"age"</span>,<span class="number">18</span>]</span><br><span class="line">])</span><br><span class="line">m.get('name')</span><br><span class="line"><span class="comment">//"MGT360124"</span></span><br></pre></td></tr></table></figure><p>（4）has(key),delete(key),clear()<br>has方法返回一个布尔值，表示某个键是否在当前 Map 对象之中。</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> Map();</span><br><span class="line"></span><br><span class="line">m.set('edition', 6);</span><br><span class="line">m.set(262, 'standard');</span><br><span class="line">m.set(undefined, 'nah');</span><br><span class="line"></span><br><span class="line">m.has('edition')     // true</span><br><span class="line">m.has('years')       // false</span><br><span class="line">m.has(<span class="number">262</span>)           <span class="comment">// true</span></span><br><span class="line">m.has(undefined)     <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">m.<span class="keyword">delete</span>(undefined)</span><br><span class="line">m.has(undefined)       <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="Map遍历方法"><a href="#Map遍历方法" class="headerlink" title="Map遍历方法"></a>Map遍历方法</h2><p>Map结构原生提供三个遍历器生成函数和一个遍历方法;<br>keys()：返回键名的遍历器<br>values()：返回键值的遍历器<br>entries()：返回所有成员的遍历器<br>forEach()：遍历Map的所有成员<br>Map遍历的顺序就是插入的顺序</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">map</span> = <span class="keyword">new</span> Map([</span><br><span class="line">  ['F', 'no'],</span><br><span class="line">  ['T',  'yes'],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (let key of <span class="built_in">map</span>.keys()) &#123;</span><br><span class="line">  console.<span class="built_in">log</span>(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// "F"</span></span><br><span class="line"><span class="comment">// "T"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (let value of <span class="built_in">map</span>.values()) &#123;</span><br><span class="line">  console.<span class="built_in">log</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// "no"</span></span><br><span class="line"><span class="comment">// "yes"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (let item of <span class="built_in">map</span>.entries()) &#123;</span><br><span class="line">  console.<span class="built_in">log</span>(item[<span class="number">0</span>], item[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// "F" "no"</span></span><br><span class="line"><span class="comment">// "T" "yes"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">for</span> (let [key, value] of <span class="built_in">map</span>.entries()) &#123;</span><br><span class="line">  console.<span class="built_in">log</span>(key, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// "F" "no"</span></span><br><span class="line"><span class="comment">// "T" "yes"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于使用map.entries()</span></span><br><span class="line"><span class="keyword">for</span> (let [key, value] of <span class="built_in">map</span>) &#123;</span><br><span class="line">  console.<span class="built_in">log</span>(key, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// "F" "no"</span></span><br><span class="line"><span class="comment">// "T" "yes"</span></span><br></pre></td></tr></table></figure><p>Map结构转为数组结构</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">map</span> = <span class="keyword">new</span> Map([</span><br><span class="line">  [1, 'one'],</span><br><span class="line">  [2, 'two'],</span><br><span class="line">  [3, 'three'],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">[...<span class="built_in">map</span>.keys()]</span><br><span class="line"><span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line">[...<span class="built_in">map</span>.values()]</span><br><span class="line"><span class="comment">// ['one', 'two', 'three']</span></span><br><span class="line"></span><br><span class="line">[...<span class="built_in">map</span>.entries()]</span><br><span class="line"><span class="comment">// [[1,'one'], [2, 'two'], [3, 'three']]</span></span><br><span class="line"></span><br><span class="line">[...<span class="built_in">map</span>]</span><br><span class="line"><span class="comment">// [[1,'one'], [2, 'two'], [3, 'three']]</span></span><br></pre></td></tr></table></figure><p>Map 还有一个forEach方法，与数组的forEach方法类似，也可以实现遍历。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ES6提供了新的数据结构Set, 它类似数组，但是成员的值都是唯一的，没有重复的值，Set本身是一个构造函数，用来生成Set数据结构。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/es6_d.png&quot; alt=&quot;ES6攻略&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ES6" scheme="https://duanruilong.github.io/categories/ES6/"/>
    
    
      <category term="Javascript" scheme="https://duanruilong.github.io/tags/Javascript/"/>
    
      <category term="编程" scheme="https://duanruilong.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="ES6" scheme="https://duanruilong.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>Eslint 规则</title>
    <link href="https://duanruilong.github.io/2019/01/14/Eslint-%E8%A7%84%E5%88%99/"/>
    <id>https://duanruilong.github.io/2019/01/14/Eslint-规则/</id>
    <published>2019-01-14T02:56:19.000Z</published>
    <updated>2019-01-29T12:14:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>ESLint 由 JavaScript 红宝书 作者 Nicholas C. Zakas 编写， 2013 年发布第一个版本。 NCZ 的初衷不是重复造一个轮子，而是在实际需求得不到 JSHint 团队响应 的情况下做出的选择：以可扩展、每条规则独立、不内置编码风格为理念编写一个 lint 工具。</p><p><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/eslint.png" alt="js"></p><a id="more"></a><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><code>npm install -g eslint</code></p><h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><p>项目还没有配置文件（.eslintrc）的话，可以通过指定–init参数来生成一个新的配置文件：</p><p><code>eslint --init</code></p><p>运行eslint –init后，会在当前目录下生成一个.eslintrc文件，你可以在这个文件中配置一些规则。</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>ESLint被设计为完全可配置的，主要有两种方式来配置ESLint：</p><ul><li>内嵌配置：将配置信息以注释的形式写在要检验的文件内</li><li>文件配置：利用javascript、json、yml语言的语法，生成名为.eslintrc.*的配置文件，将配置信息写到文件内</li></ul><h2 id="文件配置方式"><a href="#文件配置方式" class="headerlink" title="文件配置方式"></a>文件配置方式</h2><h3 id="env：你的脚本将要运行在什么环境中"><a href="#env：你的脚本将要运行在什么环境中" class="headerlink" title="env：你的脚本将要运行在什么环境中"></a>env：你的脚本将要运行在什么环境中</h3><h3 id="Environment可以预设好的其他环境的全局变量，如brower、node环境变量、es6环境变量、mocha环境变量等"><a href="#Environment可以预设好的其他环境的全局变量，如brower、node环境变量、es6环境变量、mocha环境变量等" class="headerlink" title="Environment可以预设好的其他环境的全局变量，如brower、node环境变量、es6环境变量、mocha环境变量等"></a>Environment可以预设好的其他环境的全局变量，如brower、node环境变量、es6环境变量、mocha环境变量等</h3><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">'env': &#123;</span><br><span class="line">    'browser': true,</span><br><span class="line">    'commonjs': true,</span><br><span class="line">    'es6': true</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>globals：额外的全局变量</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">示例：</span><br><span class="line">globals: &#123;</span><br><span class="line">    vue: <span class="literal">true</span>,</span><br><span class="line">    wx: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>parserOptions: ** JavaScript 语言选项</code></p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"parserOptions"</span>: &#123;</span><br><span class="line">   <span class="comment">// ECMAScript 版本</span></span><br><span class="line">  <span class="string">"ecmaVersion"</span>:<span class="number">6</span>,</span><br><span class="line">  <span class="string">"sourceType"</span>:<span class="string">"script"</span>,<span class="comment">//module</span></span><br><span class="line">  <span class="comment">// 想使用的额外的语言特性:</span></span><br><span class="line">  <span class="string">"ecmaFeatures"</span>:  &#123;</span><br><span class="line">  <span class="comment">// 允许在全局作用域下使用 return 语句</span></span><br><span class="line">  <span class="string">"globalReturn"</span>:<span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// impliedStric</span></span><br><span class="line">  <span class="string">"impliedStrict"</span>:<span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 启用 JSX</span></span><br><span class="line">  <span class="string">"jsx"</span>:<span class="literal">true</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><h2 id="rules：开启规则和发生错误时报告的等级"><a href="#rules：开启规则和发生错误时报告的等级" class="headerlink" title="rules：开启规则和发生错误时报告的等级"></a>rules：开启规则和发生错误时报告的等级</h2><p>规则的错误等级有三种：</p><ul><li>0或’off’：关闭规则。</li><li>1或’warn’：打开规则，并且作为一个警告（并不会导致检查不通过）。</li><li>2或’error’：打开规则，并且作为一个错误 (退出码为1，检查不通过)。</li></ul><h1 id="eslint-规则"><a href="#eslint-规则" class="headerlink" title="eslint 规则"></a>eslint 规则</h1><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 0-不验证；1-警告；2-错误</span></span><br><span class="line"></span><br><span class="line"><span class="string">"no-alert"</span>: <span class="number">0</span>,<span class="comment">//禁止使用alert confirm prompt</span></span><br><span class="line"> <span class="string">"no-array-constructor"</span>: <span class="number">2</span>,<span class="comment">//禁止使用数组构造器</span></span><br><span class="line"> <span class="string">"no-bitwise"</span>: <span class="number">0</span>,<span class="comment">//禁止使用按位运算符</span></span><br><span class="line"> <span class="string">"no-caller"</span>: <span class="number">1</span>,<span class="comment">//禁止使用arguments.caller或arguments.callee</span></span><br><span class="line"> <span class="string">"no-catch-shadow"</span>: <span class="number">2</span>,<span class="comment">//禁止catch子句参数与外部作用域变量同名</span></span><br><span class="line"> <span class="string">"no-class-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止给类赋值</span></span><br><span class="line"> <span class="string">"no-cond-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止在条件表达式中使用赋值语句</span></span><br><span class="line"> <span class="string">"no-console"</span>: <span class="number">2</span>,<span class="comment">//禁止使用console</span></span><br><span class="line"> <span class="string">"no-const-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止修改const声明的变量</span></span><br><span class="line"> <span class="string">"no-constant-condition"</span>: <span class="number">2</span>,<span class="comment">//禁止在条件中使用常量表达式 if(true) if(1)</span></span><br><span class="line"> <span class="string">"no-continue"</span>: <span class="number">0</span>,<span class="comment">//禁止使用continue</span></span><br><span class="line"> <span class="string">"no-control-regex"</span>: <span class="number">2</span>,<span class="comment">//禁止在正则表达式中使用控制字符</span></span><br><span class="line"> <span class="string">"no-debugger"</span>: <span class="number">2</span>,<span class="comment">//禁止使用debugger</span></span><br><span class="line"> <span class="string">"no-delete-var"</span>: <span class="number">2</span>,<span class="comment">//不能对var声明的变量使用delete操作符</span></span><br><span class="line"> <span class="string">"no-div-regex"</span>: <span class="number">1</span>,<span class="comment">//不能使用看起来像除法的正则表达式/=foo/</span></span><br><span class="line"> <span class="string">"no-dupe-keys"</span>: <span class="number">2</span>,<span class="comment">//在创建对象字面量时不允许键重复 &#123;a:1,a:1&#125;</span></span><br><span class="line"> <span class="string">"no-dupe-args"</span>: <span class="number">2</span>,<span class="comment">//函数参数不能重复</span></span><br><span class="line"> <span class="string">"no-duplicate-case"</span>: <span class="number">2</span>,<span class="comment">//switch中的case标签不能重复</span></span><br><span class="line"> <span class="string">"no-else-return"</span>: <span class="number">2</span>,<span class="comment">//如果if语句里面有return,后面不能跟else语句</span></span><br><span class="line"> <span class="string">"no-empty"</span>: <span class="number">2</span>,<span class="comment">//块语句中的内容不能为空</span></span><br><span class="line"> <span class="string">"no-empty-character-class"</span>: <span class="number">2</span>,<span class="comment">//正则表达式中的[]内容不能为空</span></span><br><span class="line"> <span class="string">"no-empty-label"</span>: <span class="number">2</span>,<span class="comment">//禁止使用空label</span></span><br><span class="line"> <span class="string">"no-eq-null"</span>: <span class="number">2</span>,<span class="comment">//禁止对null使用==或!=运算符</span></span><br><span class="line"> <span class="string">"no-eval"</span>: <span class="number">1</span>,<span class="comment">//禁止使用eval</span></span><br><span class="line"> <span class="string">"no-ex-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止给catch语句中的异常参数赋值</span></span><br><span class="line"> <span class="string">"no-extend-native"</span>: <span class="number">2</span>,<span class="comment">//禁止扩展native对象</span></span><br><span class="line"> <span class="string">"no-extra-bind"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的函数绑定</span></span><br><span class="line"> <span class="string">"no-extra-boolean-cast"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的bool转换</span></span><br><span class="line"> <span class="string">"no-extra-parens"</span>: <span class="number">2</span>,<span class="comment">//禁止非必要的括号</span></span><br><span class="line"> <span class="string">"no-extra-semi"</span>: <span class="number">2</span>,<span class="comment">//禁止多余的冒号</span></span><br><span class="line"> <span class="string">"no-fallthrough"</span>: <span class="number">1</span>,<span class="comment">//禁止switch穿透</span></span><br><span class="line"> <span class="string">"no-floating-decimal"</span>: <span class="number">2</span>,<span class="comment">//禁止省略浮点数中的0 .5 3.</span></span><br><span class="line"> <span class="string">"no-func-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止重复的函数声明</span></span><br><span class="line"> <span class="string">"no-implicit-coercion"</span>: <span class="number">1</span>,<span class="comment">//禁止隐式转换</span></span><br><span class="line"> <span class="string">"no-implied-eval"</span>: <span class="number">2</span>,<span class="comment">//禁止使用隐式eval</span></span><br><span class="line"> <span class="string">"no-inline-comments"</span>: <span class="number">0</span>,<span class="comment">//禁止行内备注</span></span><br><span class="line"> <span class="string">"no-inner-declarations"</span>: [<span class="number">2</span>, <span class="string">"functions"</span>],<span class="comment">//禁止在块语句中使用声明（变量或函数）</span></span><br><span class="line"> <span class="string">"no-invalid-regexp"</span>: <span class="number">2</span>,<span class="comment">//禁止无效的正则表达式</span></span><br><span class="line"> <span class="string">"no-invalid-this"</span>: <span class="number">2</span>,<span class="comment">//禁止无效的this，只能用在构造器，类，对象字面量</span></span><br><span class="line"> <span class="string">"no-irregular-whitespace"</span>: <span class="number">2</span>,<span class="comment">//不能有不规则的空格</span></span><br><span class="line"> <span class="string">"no-iterator"</span>: <span class="number">2</span>,<span class="comment">//禁止使用__iterator__ 属性</span></span><br><span class="line"> <span class="string">"no-label-var"</span>: <span class="number">2</span>,<span class="comment">//label名不能与var声明的变量名相同</span></span><br><span class="line"> <span class="string">"no-labels"</span>: <span class="number">2</span>,<span class="comment">//禁止标签声明</span></span><br><span class="line"> <span class="string">"no-lone-blocks"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的嵌套块</span></span><br><span class="line"> <span class="string">"no-lonely-if"</span>: <span class="number">2</span>,<span class="comment">//禁止else语句内只有if语句</span></span><br><span class="line"> <span class="string">"no-loop-func"</span>: <span class="number">1</span>,<span class="comment">//禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以）</span></span><br><span class="line"> <span class="string">"no-mixed-requires"</span>: [<span class="number">0</span>, <span class="literal">false</span>],<span class="comment">//声明时不能混用声明类型</span></span><br><span class="line"> <span class="string">"no-mixed-spaces-and-tabs"</span>: [<span class="number">2</span>, <span class="literal">false</span>],<span class="comment">//禁止混用tab和空格</span></span><br><span class="line"> <span class="string">"linebreak-style"</span>: [<span class="number">0</span>, <span class="string">"windows"</span>],<span class="comment">//换行风格</span></span><br><span class="line"> <span class="string">"no-multi-spaces"</span>: <span class="number">1</span>,<span class="comment">//不能用多余的空格</span></span><br><span class="line"> <span class="string">"no-multi-str"</span>: <span class="number">2</span>,<span class="comment">//字符串不能用\换行</span></span><br><span class="line"> <span class="string">"no-multiple-empty-lines"</span>: [<span class="number">1</span>, &#123;<span class="string">"max"</span>: <span class="number">2</span>&#125;],<span class="comment">//空行最多不能超过2行</span></span><br><span class="line"> <span class="string">"no-native-reassign"</span>: <span class="number">2</span>,<span class="comment">//不能重写native对象</span></span><br><span class="line"> <span class="string">"no-negated-in-lhs"</span>: <span class="number">2</span>,<span class="comment">//in 操作符的左边不能有!</span></span><br><span class="line"> <span class="string">"no-nested-ternary"</span>: <span class="number">0</span>,<span class="comment">//禁止使用嵌套的三目运算</span></span><br><span class="line"> <span class="string">"no-new"</span>: <span class="number">1</span>,<span class="comment">//禁止在使用new构造一个实例后不赋值</span></span><br><span class="line"> <span class="string">"no-new-func"</span>: <span class="number">1</span>,<span class="comment">//禁止使用new Function</span></span><br><span class="line"> <span class="string">"no-new-object"</span>: <span class="number">2</span>,<span class="comment">//禁止使用new Object()</span></span><br><span class="line"> <span class="string">"no-new-require"</span>: <span class="number">2</span>,<span class="comment">//禁止使用new require</span></span><br><span class="line"> <span class="string">"no-new-wrappers"</span>: <span class="number">2</span>,<span class="comment">//禁止使用new创建包装实例，new String new Boolean new Number</span></span><br><span class="line"> <span class="string">"no-obj-calls"</span>: <span class="number">2</span>,<span class="comment">//不能调用内置的全局对象，比如Math() JSON()</span></span><br><span class="line"> <span class="string">"no-octal"</span>: <span class="number">2</span>,<span class="comment">//禁止使用八进制数字</span></span><br><span class="line"> <span class="string">"no-octal-escape"</span>: <span class="number">2</span>,<span class="comment">//禁止使用八进制转义序列</span></span><br><span class="line"> <span class="string">"no-param-reassign"</span>: <span class="number">2</span>,<span class="comment">//禁止给参数重新赋值</span></span><br><span class="line"> <span class="string">"no-path-concat"</span>: <span class="number">0</span>,<span class="comment">//node中不能使用__dirname或__filename做路径拼接</span></span><br><span class="line"> <span class="string">"no-plusplus"</span>: <span class="number">0</span>,<span class="comment">//禁止使用++，--</span></span><br><span class="line"> <span class="string">"no-process-env"</span>: <span class="number">0</span>,<span class="comment">//禁止使用process.env</span></span><br><span class="line"> <span class="string">"no-process-exit"</span>: <span class="number">0</span>,<span class="comment">//禁止使用process.exit()</span></span><br><span class="line"> <span class="string">"no-proto"</span>: <span class="number">2</span>,<span class="comment">//禁止使用__proto__属性</span></span><br><span class="line"> <span class="string">"no-redeclare"</span>: <span class="number">2</span>,<span class="comment">//禁止重复声明变量</span></span><br><span class="line"> <span class="string">"no-regex-spaces"</span>: <span class="number">2</span>,<span class="comment">//禁止在正则表达式字面量中使用多个空格 /foo bar/</span></span><br><span class="line"> <span class="string">"no-restricted-modules"</span>: <span class="number">0</span>,<span class="comment">//如果禁用了指定模块，使用就会报错</span></span><br><span class="line"> <span class="string">"no-return-assign"</span>: <span class="number">1</span>,<span class="comment">//return 语句中不能有赋值表达式</span></span><br><span class="line"> <span class="string">"no-script-url"</span>: <span class="number">0</span>,<span class="comment">//禁止使用javascript:void(0)</span></span><br><span class="line"> <span class="string">"no-self-compare"</span>: <span class="number">2</span>,<span class="comment">//不能比较自身</span></span><br><span class="line"> <span class="string">"no-sequences"</span>: <span class="number">0</span>,<span class="comment">//禁止使用逗号运算符</span></span><br><span class="line"> <span class="string">"no-shadow"</span>: <span class="number">2</span>,<span class="comment">//外部作用域中的变量不能与它所包含的作用域中的变量或参数同名</span></span><br><span class="line"> <span class="string">"no-shadow-restricted-names"</span>: <span class="number">2</span>,<span class="comment">//严格模式中规定的限制标识符不能作为声明时的变量名使用</span></span><br><span class="line"> <span class="string">"no-spaced-func"</span>: <span class="number">2</span>,<span class="comment">//函数调用时 函数名与()之间不能有空格</span></span><br><span class="line"> <span class="string">"no-sparse-arrays"</span>: <span class="number">2</span>,<span class="comment">//禁止稀疏数组， [1,,2]</span></span><br><span class="line"> <span class="string">"no-sync"</span>: <span class="number">0</span>,<span class="comment">//nodejs 禁止同步方法</span></span><br><span class="line"> <span class="string">"no-ternary"</span>: <span class="number">0</span>,<span class="comment">//禁止使用三目运算符</span></span><br><span class="line"> <span class="string">"no-trailing-spaces"</span>: <span class="number">1</span>,<span class="comment">//一行结束后面不要有空格</span></span><br><span class="line"> <span class="string">"no-this-before-super"</span>: <span class="number">0</span>,<span class="comment">//在调用super()之前不能使用this或super</span></span><br><span class="line"> <span class="string">"no-throw-literal"</span>: <span class="number">2</span>,<span class="comment">//禁止抛出字面量错误 throw "error";</span></span><br><span class="line"> <span class="string">"no-undef"</span>: <span class="number">1</span>,<span class="comment">//不能有未定义的变量</span></span><br><span class="line"> <span class="string">"no-undef-init"</span>: <span class="number">2</span>,<span class="comment">//变量初始化时不能直接给它赋值为undefined</span></span><br><span class="line"> <span class="string">"no-undefined"</span>: <span class="number">2</span>,<span class="comment">//不能使用undefined</span></span><br><span class="line"> <span class="string">"no-unexpected-multiline"</span>: <span class="number">2</span>,<span class="comment">//避免多行表达式</span></span><br><span class="line"> <span class="string">"no-underscore-dangle"</span>: <span class="number">1</span>,<span class="comment">//标识符不能以_开头或结尾</span></span><br><span class="line"> <span class="string">"no-unneeded-ternary"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的嵌套 var isYes = answer === 1 ? true : false;</span></span><br><span class="line"> <span class="string">"no-unreachable"</span>: <span class="number">2</span>,<span class="comment">//不能有无法执行的代码</span></span><br><span class="line"> <span class="string">"no-unused-expressions"</span>: <span class="number">2</span>,<span class="comment">//禁止无用的表达式</span></span><br><span class="line"> <span class="string">"no-unused-vars"</span>: [<span class="number">2</span>, &#123;<span class="string">"vars"</span>: <span class="string">"all"</span>, <span class="string">"args"</span>: <span class="string">"after-used"</span>&#125;],<span class="comment">//不能有声明后未被使用的变量或参数</span></span><br><span class="line"> <span class="string">"no-use-before-define"</span>: <span class="number">2</span>,<span class="comment">//未定义前不能使用</span></span><br><span class="line"> <span class="string">"no-useless-call"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的call和apply</span></span><br><span class="line"> <span class="string">"no-void"</span>: <span class="number">2</span>,<span class="comment">//禁用void操作符</span></span><br><span class="line"> <span class="string">"no-var"</span>: <span class="number">0</span>,<span class="comment">//禁用var，用let和const代替</span></span><br><span class="line"> <span class="string">"no-warning-comments"</span>: [<span class="number">1</span>, &#123; <span class="string">"terms"</span>: [<span class="string">"todo"</span>, <span class="string">"fixme"</span>, <span class="string">"xxx"</span>], <span class="string">"location"</span>: <span class="string">"start"</span> &#125;],<span class="comment">//不能有警告备注</span></span><br><span class="line"> <span class="string">"no-with"</span>: <span class="number">2</span>,<span class="comment">//禁用with</span></span><br><span class="line"></span><br><span class="line"> <span class="string">"array-bracket-spacing"</span>: [<span class="number">2</span>, <span class="string">"never"</span>],<span class="comment">//是否允许非空数组里面有多余的空格</span></span><br><span class="line"> <span class="string">"arrow-parens"</span>: <span class="number">0</span>,<span class="comment">//箭头函数用小括号括起来</span></span><br><span class="line"> <span class="string">"arrow-spacing"</span>: <span class="number">0</span>,<span class="comment">//=&gt;的前/后括号</span></span><br><span class="line"> <span class="string">"accessor-pairs"</span>: <span class="number">0</span>,<span class="comment">//在对象中使用getter/setter</span></span><br><span class="line"> <span class="string">"block-scoped-var"</span>: <span class="number">0</span>,<span class="comment">//块语句中使用var</span></span><br><span class="line"> <span class="string">"brace-style"</span>: [<span class="number">1</span>, <span class="string">"1tbs"</span>],<span class="comment">//大括号风格</span></span><br><span class="line"> <span class="string">"callback-return"</span>: <span class="number">1</span>,<span class="comment">//避免多次调用回调什么的</span></span><br><span class="line"> <span class="string">"camelcase"</span>: <span class="number">2</span>,<span class="comment">//强制驼峰法命名</span></span><br><span class="line"> <span class="string">"comma-dangle"</span>: [<span class="number">2</span>, <span class="string">"never"</span>],<span class="comment">//对象字面量项尾不能有逗号</span></span><br><span class="line"> <span class="string">"comma-spacing"</span>: <span class="number">0</span>,<span class="comment">//逗号前后的空格</span></span><br><span class="line"> <span class="string">"comma-style"</span>: [<span class="number">2</span>, <span class="string">"last"</span>],<span class="comment">//逗号风格，换行时在行首还是行尾</span></span><br><span class="line"> <span class="string">"complexity"</span>: [<span class="number">0</span>, <span class="number">11</span>],<span class="comment">//循环复杂度</span></span><br><span class="line"> <span class="string">"computed-property-spacing"</span>: [<span class="number">0</span>, <span class="string">"never"</span>],<span class="comment">//是否允许计算后的键名什么的</span></span><br><span class="line"> <span class="string">"consistent-return"</span>: <span class="number">0</span>,<span class="comment">//return 后面是否允许省略</span></span><br><span class="line"> <span class="string">"consistent-this"</span>: [<span class="number">2</span>, <span class="string">"that"</span>],<span class="comment">//this别名</span></span><br><span class="line"> <span class="string">"constructor-super"</span>: <span class="number">0</span>,<span class="comment">//非派生类不能调用super，派生类必须调用super</span></span><br><span class="line"> <span class="string">"curly"</span>: [<span class="number">2</span>, <span class="string">"all"</span>],<span class="comment">//必须使用 if()&#123;&#125; 中的&#123;&#125;</span></span><br><span class="line"> <span class="string">"default-case"</span>: <span class="number">2</span>,<span class="comment">//switch语句最后必须有default</span></span><br><span class="line"> <span class="string">"dot-location"</span>: <span class="number">0</span>,<span class="comment">//对象访问符的位置，换行的时候在行首还是行尾</span></span><br><span class="line"> <span class="string">"dot-notation"</span>: [<span class="number">0</span>, &#123; <span class="string">"allowKeywords"</span>: <span class="literal">true</span> &#125;],<span class="comment">//避免不必要的方括号</span></span><br><span class="line"> <span class="string">"eol-last"</span>: <span class="number">0</span>,<span class="comment">//文件以单一的换行符结束</span></span><br><span class="line"> <span class="string">"eqeqeq"</span>: <span class="number">2</span>,<span class="comment">//必须使用全等</span></span><br><span class="line"> <span class="string">"func-names"</span>: <span class="number">0</span>,<span class="comment">//函数表达式必须有名字</span></span><br><span class="line"> <span class="string">"func-style"</span>: [<span class="number">0</span>, <span class="string">"declaration"</span>],<span class="comment">//函数风格，规定只能使用函数声明/函数表达式</span></span><br><span class="line"> <span class="string">"generator-star-spacing"</span>: <span class="number">0</span>,<span class="comment">//生成器函数*的前后空格</span></span><br><span class="line"> <span class="string">"guard-for-in"</span>: <span class="number">0</span>,<span class="comment">//for in循环要用if语句过滤</span></span><br><span class="line"> <span class="string">"handle-callback-err"</span>: <span class="number">0</span>,<span class="comment">//nodejs 处理错误</span></span><br><span class="line"> <span class="string">"id-length"</span>: <span class="number">0</span>,<span class="comment">//变量名长度</span></span><br><span class="line"> <span class="string">"indent"</span>: [<span class="number">2</span>, <span class="number">4</span>],<span class="comment">//缩进风格</span></span><br><span class="line"> <span class="string">"init-declarations"</span>: <span class="number">0</span>,<span class="comment">//声明时必须赋初值</span></span><br><span class="line"> <span class="string">"key-spacing"</span>: [<span class="number">0</span>, &#123; <span class="string">"beforeColon"</span>: <span class="literal">false</span>, <span class="string">"afterColon"</span>: <span class="literal">true</span> &#125;],<span class="comment">//对象字面量中冒号的前后空格</span></span><br><span class="line"> <span class="string">"lines-around-comment"</span>: <span class="number">0</span>,<span class="comment">//行前/行后备注</span></span><br><span class="line"> <span class="string">"max-depth"</span>: [<span class="number">0</span>, <span class="number">4</span>],<span class="comment">//嵌套块深度</span></span><br><span class="line"> <span class="string">"max-len"</span>: [<span class="number">0</span>, <span class="number">80</span>, <span class="number">4</span>],<span class="comment">//字符串最大长度</span></span><br><span class="line"> <span class="string">"max-nested-callbacks"</span>: [<span class="number">0</span>, <span class="number">2</span>],<span class="comment">//回调嵌套深度</span></span><br><span class="line"> <span class="string">"max-params"</span>: [<span class="number">0</span>, <span class="number">3</span>],<span class="comment">//函数最多只能有3个参数</span></span><br><span class="line"> <span class="string">"max-statements"</span>: [<span class="number">0</span>, <span class="number">10</span>],<span class="comment">//函数内最多有几个声明</span></span><br><span class="line"> <span class="string">"new-cap"</span>: <span class="number">2</span>,<span class="comment">//函数名首行大写必须使用new方式调用，首行小写必须用不带new方式调用</span></span><br><span class="line"> <span class="string">"new-parens"</span>: <span class="number">2</span>,<span class="comment">//new时必须加小括号</span></span><br><span class="line"> <span class="string">"newline-after-var"</span>: <span class="number">2</span>,<span class="comment">//变量声明后是否需要空一行</span></span><br><span class="line"> <span class="string">"object-curly-spacing"</span>: [<span class="number">0</span>, <span class="string">"never"</span>],<span class="comment">//大括号内是否允许不必要的空格</span></span><br><span class="line"> <span class="string">"object-shorthand"</span>: <span class="number">0</span>,<span class="comment">//强制对象字面量缩写语法</span></span><br><span class="line"> <span class="string">"one-var"</span>: <span class="number">1</span>,<span class="comment">//连续声明</span></span><br><span class="line"> <span class="string">"operator-assignment"</span>: [<span class="number">0</span>, <span class="string">"always"</span>],<span class="comment">//赋值运算符 += -=什么的</span></span><br><span class="line"> <span class="string">"operator-linebreak"</span>: [<span class="number">2</span>, <span class="string">"after"</span>],<span class="comment">//换行时运算符在行尾还是行首</span></span><br><span class="line"> <span class="string">"padded-blocks"</span>: <span class="number">0</span>,<span class="comment">//块语句内行首行尾是否要空行</span></span><br><span class="line"> <span class="string">"prefer-const"</span>: <span class="number">0</span>,<span class="comment">//首选const</span></span><br><span class="line"> <span class="string">"prefer-spread"</span>: <span class="number">0</span>,<span class="comment">//首选展开运算</span></span><br><span class="line"> <span class="string">"prefer-reflect"</span>: <span class="number">0</span>,<span class="comment">//首选Reflect的方法</span></span><br><span class="line"> <span class="string">"quotes"</span>: [<span class="number">1</span>, <span class="string">"single"</span>],<span class="comment">//引号类型 `` "" ''</span></span><br><span class="line"> <span class="string">"quote-props"</span>:[<span class="number">2</span>, <span class="string">"always"</span>],<span class="comment">//对象字面量中的属性名是否强制双引号</span></span><br><span class="line"> <span class="string">"radix"</span>: <span class="number">2</span>,<span class="comment">//parseInt必须指定第二个参数</span></span><br><span class="line"> <span class="string">"id-match"</span>: <span class="number">0</span>,<span class="comment">//命名检测</span></span><br><span class="line"> <span class="string">"require-yield"</span>: <span class="number">0</span>,<span class="comment">//生成器函数必须有yield</span></span><br><span class="line"> <span class="string">"semi"</span>: [<span class="number">2</span>, <span class="string">"always"</span>],<span class="comment">//语句强制分号结尾</span></span><br><span class="line"> <span class="string">"semi-spacing"</span>: [<span class="number">0</span>, &#123;<span class="string">"before"</span>: <span class="literal">false</span>, <span class="string">"after"</span>: <span class="literal">true</span>&#125;],<span class="comment">//分号前后空格</span></span><br><span class="line"> <span class="string">"sort-vars"</span>: <span class="number">0</span>,<span class="comment">//变量声明时排序</span></span><br><span class="line"> <span class="string">"space-after-keywords"</span>: [<span class="number">0</span>, <span class="string">"always"</span>],<span class="comment">//关键字后面是否要空一格</span></span><br><span class="line"> <span class="string">"space-before-blocks"</span>: [<span class="number">0</span>, <span class="string">"always"</span>],<span class="comment">//不以新行开始的块&#123;前面要不要有空格</span></span><br><span class="line"> <span class="string">"space-before-function-paren"</span>: [<span class="number">0</span>, <span class="string">"always"</span>],<span class="comment">//函数定义时括号前面要不要有空格</span></span><br><span class="line"> <span class="string">"space-in-parens"</span>: [<span class="number">0</span>, <span class="string">"never"</span>],<span class="comment">//小括号里面要不要有空格</span></span><br><span class="line"> <span class="string">"space-infix-ops"</span>: <span class="number">0</span>,<span class="comment">//中缀操作符周围要不要有空格</span></span><br><span class="line"> <span class="string">"space-return-throw-case"</span>: <span class="number">2</span>,<span class="comment">//return throw case后面要不要加空格</span></span><br><span class="line"> <span class="string">"space-unary-ops"</span>: [<span class="number">0</span>, &#123; <span class="string">"words"</span>: <span class="literal">true</span>, <span class="string">"nonwords"</span>: <span class="literal">false</span> &#125;],<span class="comment">//一元运算符的前/后要不要加空格</span></span><br><span class="line"> <span class="string">"spaced-comment"</span>: <span class="number">0</span>,<span class="comment">//注释风格要不要有空格什么的</span></span><br><span class="line"> <span class="string">"strict"</span>: <span class="number">2</span>,<span class="comment">//使用严格模式</span></span><br><span class="line"> <span class="string">"use-isnan"</span>: <span class="number">2</span>,<span class="comment">//禁止比较时使用NaN，只能用isNaN()</span></span><br><span class="line"> <span class="string">"valid-jsdoc"</span>: <span class="number">0</span>,<span class="comment">//jsdoc规则</span></span><br><span class="line"> <span class="string">"valid-typeof"</span>: <span class="number">2</span>,<span class="comment">//必须使用合法的typeof的值</span></span><br><span class="line"> <span class="string">"vars-on-top"</span>: <span class="number">2</span>,<span class="comment">//var必须放在作用域顶部</span></span><br><span class="line"> <span class="string">"wrap-iife"</span>: [<span class="number">2</span>, <span class="string">"inside"</span>],<span class="comment">//立即执行函数表达式的小括号风格</span></span><br><span class="line"> <span class="string">"wrap-regex"</span>: <span class="number">0</span>,<span class="comment">//正则表达式字面量用小括号包起来</span></span><br><span class="line"> <span class="string">"yoda"</span>: [<span class="number">2</span>, <span class="string">"never"</span>]<span class="comment">//禁止尤达条件</span></span><br></pre></td></tr></table></figure><h1 id="一些错误的正确修改"><a href="#一些错误的正确修改" class="headerlink" title="一些错误的正确修改"></a>一些错误的正确修改</h1><h2 id="Prevent-definitions-of-unused-state-react-no-unused-state"><a href="#Prevent-definitions-of-unused-state-react-no-unused-state" class="headerlink" title="Prevent definitions of unused state (react/no-unused-state)"></a>Prevent definitions of unused state (react/no-unused-state)</h2><p>以下模式被认为是警告:</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="title">extends</span> <span class="title">React</span>.<span class="title">Component</span> &#123;</span></span><br><span class="line">  state = &#123; foo: <span class="number">0</span> &#125;;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;SomeComponent /&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var UnusedGetInitialStateTest = createReactClass(&#123;</span><br><span class="line">  getInitialState: function() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; foo: <span class="number">0</span> &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  render: function() &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;SomeComponent /&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>以下模式不被视为警告:</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="title">extends</span> <span class="title">React</span>.<span class="title">Component</span> &#123;</span></span><br><span class="line">  state = &#123; foo: <span class="number">0</span> &#125;;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;SomeComponent foo=&#123;<span class="keyword">this</span>.state.foo&#125; /&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var UnusedGetInitialStateTest = createReactClass(&#123;</span><br><span class="line">  getInitialState: function() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; foo: <span class="number">0</span> &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  render: function() &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;SomeComponent foo=&#123;<span class="keyword">this</span>.state.foo&#125; /&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="react-prop-types"><a href="#react-prop-types" class="headerlink" title="react prop-types"></a>react prop-types</h2><p>propTypes能用来检测全部数据类型的变量，包括基本类型的的字符串，布尔值，数字，以及引用类型的对象，数组，函数，甚至还有ES6新增的符号类型</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">Son.propTypes = &#123;</span><br><span class="line">     optionalArray: PropTypes.<span class="built_in">array</span>,<span class="comment">//检测数组类型</span></span><br><span class="line">     optionalBool: PropTypes.<span class="keyword">bool</span>,<span class="comment">//检测布尔类型</span></span><br><span class="line">     optionalFunc: PropTypes.func,<span class="comment">//检测函数（Function类型）</span></span><br><span class="line">     optionalNumber: PropTypes.number,<span class="comment">//检测数字</span></span><br><span class="line">     optionalObject: PropTypes.object,<span class="comment">//检测对象</span></span><br><span class="line">     optionalString: PropTypes.<span class="built_in">string</span>,<span class="comment">//检测字符串</span></span><br><span class="line">     optionalSymbol: PropTypes.symbol,<span class="comment">//ES6新增的symbol类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用parseInt-函数"><a href="#使用parseInt-函数" class="headerlink" title="使用parseInt()函数"></a>使用parseInt()函数</h2><p>当使用parseInt()函数时，通常省略第二个参数 radix，并让函数尝试从第一个参数确定它是什么类型的数字。默认情况下，parseInt()将自动检测十进制和十六进制（通过0x前缀）。在 ECMAScript 5之前，parseInt()还会自动检测八进制文字，这会导致问题，因为许多开发人员认为领先的文字0会被忽略。</p><p>不要这样做：</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var num = parseInt(<span class="string">"071"</span>);      <span class="comment">// 57</span></span><br></pre></td></tr></table></figure><p>做这个：</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var num = parseInt(<span class="string">"071"</span>, <span class="number">10</span>);  <span class="comment">// 71</span></span><br></pre></td></tr></table></figure><h2 id="条件逻辑里一定要加内容处理"><a href="#条件逻辑里一定要加内容处理" class="headerlink" title="条件逻辑里一定要加内容处理"></a>条件逻辑里一定要加内容处理</h2><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*eslint no-empty: "error"*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (foo) &#123;</span><br><span class="line">    <span class="comment">// empty</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (foo) &#123;</span><br><span class="line">    <span class="comment">/* empty */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    doSomething();</span><br><span class="line">&#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">    <span class="comment">// continue regardless of error</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    doSomething();</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">    <span class="comment">/* continue regardless of error */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ESLint 由 JavaScript 红宝书 作者 Nicholas C. Zakas 编写， 2013 年发布第一个版本。 NCZ 的初衷不是重复造一个轮子，而是在实际需求得不到 JSHint 团队响应 的情况下做出的选择：以可扩展、每条规则独立、不内置编码风格为理念编写一个 lint 工具。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/eslint.png&quot; alt=&quot;js&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="https://duanruilong.github.io/categories/Javascript/"/>
    
    
      <category term="Javascript" scheme="https://duanruilong.github.io/tags/Javascript/"/>
    
      <category term="编程" scheme="https://duanruilong.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>styled-components快速入门</title>
    <link href="https://duanruilong.github.io/2019/01/03/styled-components%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <id>https://duanruilong.github.io/2019/01/03/styled-components快速入门/</id>
    <published>2019-01-03T07:20:15.000Z</published>
    <updated>2019-01-29T12:14:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>styled-components利用标记的模板文字来设置组件的样式。</p><p>它删除了组件和样式之间的映射。这意味着当您定义样式时，实际上是在创建一个正常的React组件，它会将样式附加到它上面。</p><p><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/styled.png" alt="styled-components"></p><a id="more"></a><h1 id="styled-components"><a href="#styled-components" class="headerlink" title="styled-components"></a>styled-components</h1><p><code>styled-components</code> 是一个常用的<code>css in js</code> 类库。和所有同类型的类库一样，通过 js 赋能解决了原生 css 所不具备的能力，比如变量、循环、函数等。</p><h1 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h1><p>官方文档<a href="https://www.styled-components.com/" target="_blank" rel="noopener">链接</a></p><h1 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h1><p>className 的写法会让原本写css的写法十分难以接受,<code>sass</code> 、<code>less</code> 等预处理可以解决部分 <code>css</code> 的局限性，还是要学习新的语法，而且需要对其编译，如果通过导入css的方式 会导致变量泄露成为全局 需要配置webpack让其模块化,其复杂的 <code>webpack</code> 配置也总是让开发者抵触。</p><p>有过<code>sass</code> 、<code>less</code>开发经验，也能很快的切换到<code>styled-components</code>，因为大部分语法都类似，比如<code>嵌套</code>、<code>&amp;</code> 、 <code>继承</code>等， <code>styled-componens</code> 很好的解决了学习成本与开发环境问题，很适合 <code>React 技术栈</code> 、<code>React Native</code>的项目开发。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">npm install --save styled-components</span><br></pre></td></tr></table></figure><blockquote><p>webstorm需要安装 styled-component 插件 ; vscode已支持智能提示</p></blockquote><h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><h2 id="简单的组件"><a href="#简单的组件" class="headerlink" title="简单的组件"></a>简单的组件</h2><p>创建了两个简单的组件，一个包装器和一个标题，并附加了一些样式：</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import styled from 'styled-components';</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个Title组件，它将使用某些样式</span></span><br><span class="line"><span class="keyword">const</span> Title = styled.h1`</span><br><span class="line">  font-size: <span class="number">1.5</span>em;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: palevioletred;</span><br><span class="line">`;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个包装器组件，它将使用某些样式</span></span><br><span class="line"><span class="keyword">const</span> Wrapper = styled.section`</span><br><span class="line">  padding: <span class="number">4</span>em;</span><br><span class="line">  background: papayawhip;</span><br><span class="line">`;</span><br><span class="line"></span><br><span class="line"><span class="comment">//像任何其他React组件一样使用Title和Wrapper  - 除了它们的样式！</span></span><br><span class="line">render(</span><br><span class="line">  &lt;Wrapper&gt;</span><br><span class="line">    &lt;Title&gt;</span><br><span class="line">      Hello World!</span><br><span class="line">    &lt;/Title&gt;</span><br><span class="line">  &lt;/Wrapper&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>可以看到控制台中输出了一个随机的className，这是styled-components帮我们完成的. 注意: 组件名要以大些开头 不然会被解析成普通标签</p><h2 id="传递props"><a href="#传递props" class="headerlink" title="传递props"></a>传递props</h2><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Button = styled.button`</span><br><span class="line">    background: $&#123;props =&gt; props.primary ? 'palevioletred' : 'white'&#125;;</span><br><span class="line">    color: $&#123;props =&gt; props.primary ? 'white' : 'palevioletred'&#125;;</span><br><span class="line">    font-size: <span class="number">1</span>em;</span><br><span class="line">    margin: <span class="number">1</span>em;</span><br><span class="line">    padding: <span class="number">0.25</span>em <span class="number">1</span>em;</span><br><span class="line">    border: <span class="number">2</span>px solid palevioletred;</span><br><span class="line">    border-radius: <span class="number">3</span>px;</span><br><span class="line">`</span><br><span class="line">render(</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;Button&gt;Normal&lt;/Button&gt;</span><br><span class="line">        &lt;Button primary&gt;Primary&lt;/Button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>在组件传递的props都可以在定义组件时获取到，这样就很容易实现定制某些风格组件</p><h2 id="props高级用法"><a href="#props高级用法" class="headerlink" title="props高级用法"></a>props高级用法</h2><p>设置默认值，在未设定必须传值的情况下我们会给一个默认值(defaultProps)</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">ALbum</span> <span class="title">extends</span> <span class="title">React</span>.<span class="title">Component</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    constructor (props) &#123;</span><br><span class="line">        super(props)</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            <span class="comment">// 接收传递的值</span></span><br><span class="line">            imgSrc: props.imgSrc</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    render () &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;imgSrc&#125; = <span class="keyword">this</span>.state</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;Container imgSrc=&#123;imgSrc&#125;&gt;</span><br><span class="line">            &lt;/Container&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在这里是可以拿到props的 </span></span><br><span class="line"><span class="keyword">const</span> Container = styled.div`</span><br><span class="line">    background-size: cover;</span><br><span class="line">    background-image: url($&#123;props =&gt;  props.imgSrc&#125;);</span><br><span class="line">    width: <span class="number">100</span>%;    </span><br><span class="line">    height: <span class="number">300</span>px;</span><br><span class="line">`</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当然没传值也没关系  我们设置默认值</span></span><br><span class="line">Container.defaultProps = &#123;</span><br><span class="line">    imgSrc: Cover</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="塑造组件"><a href="#塑造组件" class="headerlink" title="塑造组件"></a>塑造组件</h2><p>这个非常有用 你可能会遇到一些原本就已经是组件了 但是你要为他添加一些样式，这时候该怎么办呢 ?</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传递className 在react-native 中要使用 style</span></span><br><span class="line"><span class="keyword">const</span> Link = (&#123;className , children&#125;) =&gt; (</span><br><span class="line">    &lt;a className=&#123;className&#125;&gt;</span><br><span class="line">        &#123;children&#125;</span><br><span class="line">    &lt;/a&gt;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> StyledLink = styled(Link)`</span><br><span class="line">    color: palevioletred;</span><br><span class="line">`</span><br><span class="line">render(</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;Link&gt;普通组件&lt;/Link&gt;</span><br><span class="line">        &lt;StyledLink&gt;有颜色吗？&lt;/StyledLink&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="组件样式继承"><a href="#组件样式继承" class="headerlink" title="组件样式继承"></a>组件样式继承</h2><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Button = styled.button`</span><br><span class="line">    color: palevioletred;</span><br><span class="line">    font-size: <span class="number">1</span>em;</span><br><span class="line">    margin: <span class="number">1</span>em;</span><br><span class="line">    padding: <span class="number">0.25</span>em <span class="number">1</span>em;</span><br><span class="line">    border: <span class="number">2</span>px solid palevioletred;</span><br><span class="line">    border-radius: <span class="number">3</span>px;</span><br><span class="line">`;</span><br><span class="line"><span class="keyword">const</span> TomatoButton = Button.extend`</span><br><span class="line">    color: tomato;</span><br><span class="line">    border-color: tomato;</span><br><span class="line">`;</span><br><span class="line"><span class="comment">// TomatoButton 部分样式继承自 Button 这种情况下不会生成两个class</span></span><br></pre></td></tr></table></figure><h2 id="改变组件标签"><a href="#改变组件标签" class="headerlink" title="改变组件标签"></a>改变组件标签</h2><p>在闲的蛋疼的情况下 我们想要改变组件的标签 比如把 button 变成 a 标签</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用上面定义的 Button 组件 调用 withComponent 方法</span></span><br><span class="line"><span class="keyword">const</span> Link = Button.withComponent(<span class="string">'a'</span>)</span><br></pre></td></tr></table></figure><h2 id="维护其他属性"><a href="#维护其他属性" class="headerlink" title="维护其他属性"></a>维护其他属性</h2><p>在某种情况下，我们可能需要用到第三方库样式，我们可以使用这个方法轻松达到<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Input = styled.input.attrs(&#123;</span><br><span class="line">    <span class="comment">// 定义静态 props</span></span><br><span class="line">    type: 'password',</span><br><span class="line">    <span class="comment">// 没传默认使用 1em</span></span><br><span class="line">    margin: props =&gt; props.size || '1em',</span><br><span class="line">    padding: props =&gt; props.size || '1em'</span><br><span class="line">&#125;)`</span><br><span class="line">    color: palevioletred;</span><br><span class="line">    font-size: <span class="number">1</span>em;</span><br><span class="line">    border: <span class="number">2</span>px solid palevioletred;</span><br><span class="line">    border-radius: <span class="number">3</span>px;</span><br><span class="line">    <span class="comment">// 动态计算props</span></span><br><span class="line">    margin: $&#123;props =&gt; props.margin&#125;;</span><br><span class="line">    padding: $&#123;props =&gt; props.padding&#125;</span><br><span class="line">`</span><br><span class="line">render ( &lt;Input size='1em'&gt;&lt;/Input&gt;  &lt;Input size='2em'&gt;&lt;/Input&gt; )</span><br></pre></td></tr></table></figure></p><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p>动画会生成一个随机类名 而不会污染到全局<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import &#123; keyframes &#125; from 'styled-components'</span><br><span class="line"><span class="comment">// CSS 动画</span></span><br><span class="line"><span class="keyword">const</span> rotate360 = keyframes`</span><br><span class="line">    from &#123;</span><br><span class="line">        transform: rotate(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    to &#123;</span><br><span class="line">        transform: rotate(<span class="number">360</span>deg);</span><br><span class="line">    &#125;</span><br><span class="line">`</span><br><span class="line"><span class="keyword">const</span> Rotate = Button.extend`</span><br><span class="line">    animation: $&#123;rotate360&#125; <span class="number">2</span>s linear infinite;</span><br><span class="line">`</span><br><span class="line">render ( &lt;Rotate&gt;  💅  &lt;/Rotate&gt; )</span><br></pre></td></tr></table></figure></p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>styled-components虽然解决了大部分问题，增加了可维护性，但是破坏了原生体验，时常我们需要写更多的代码来达到业务要求，希望未来有更好的方案.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;styled-components利用标记的模板文字来设置组件的样式。&lt;/p&gt;
&lt;p&gt;它删除了组件和样式之间的映射。这意味着当您定义样式时，实际上是在创建一个正常的React组件，它会将样式附加到它上面。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/styled.png&quot; alt=&quot;styled-components&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="https://duanruilong.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="React" scheme="https://duanruilong.github.io/tags/React/"/>
    
      <category term="Javascript" scheme="https://duanruilong.github.io/tags/Javascript/"/>
    
      <category term="编程" scheme="https://duanruilong.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="CSS" scheme="https://duanruilong.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>SQLite 之 INSERT OR REPLACE使用</title>
    <link href="https://duanruilong.github.io/2018/12/28/SQLite-%E4%B9%8B-INSERT-OR-REPLACE%E4%BD%BF%E7%94%A8/"/>
    <id>https://duanruilong.github.io/2018/12/28/SQLite-之-INSERT-OR-REPLACE使用/</id>
    <published>2018-12-28T10:29:31.000Z</published>
    <updated>2019-01-29T12:14:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>SQLite是一个C语言库，它实现了一个 小型， 快速， 自包含， 高可靠性， 功能齐全的 SQL数据库引擎。SQLite是世界上使用最多的数据库引擎。它内置于所有移动电话和大多数计算机中，并且捆绑在人们每天使用的无数其他应用程序中。下面是介绍如何使用<code>INSERT OR REPLACE</code>命令。</p><p><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/sqlite.png" alt="SQLite"></p><a id="more"></a><h1 id="业务需求"><a href="#业务需求" class="headerlink" title="业务需求"></a>业务需求</h1><p>具体业务中,遇到需要批量插入和修改数据库的情况。</p><ul><li>当前数据不存在，进行数据插入操作</li><li>当前数据存在，进行数据更新操作</li></ul><p>以上的业务情况，可以使用SQlite的 <code>INSERT OR REPLACE</code>命令进行操作，具体的语法：<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT OR REPLACE INTO table-name (column-name,...) VALUES (column-value,...)</span><br></pre></td></tr></table></figure></p><h1 id="UNIQUE-约束-或-PRIMARY-KEY约束"><a href="#UNIQUE-约束-或-PRIMARY-KEY约束" class="headerlink" title="UNIQUE 约束 或 PRIMARY KEY约束"></a>UNIQUE 约束 或 PRIMARY KEY约束</h1><blockquote><p>UNIQUE约束: 唯一约束,防止在一个特定的列存在两个记录具有相同的值</p></blockquote><blockquote><p>PRIMARY KEY约束: 约束唯一标识数据库表中的每条记录。</p></blockquote><h2 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h2><p>PRIMARY KEY也是UNIQUE,即不可重复</p><h2 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h2><ul><li>1.PRIMARY KEY是非空的,但是UNIQUE可以为空</li><li>2.只能有一个主键,但是唯一索引可以有多个</li><li>3.如果没有指定聚合索引,那么主键默认为聚合索引,唯一索引不具备该特性</li></ul><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT OR REPLACE INTO table-name (column-name,...) VALUES (column-value,...)</span><br></pre></td></tr></table></figure><p>在如上的<code>colunm-name</code>中,如果已插入的<code>column-value</code>均无已存在的值,则判断插入的该条数据不存在,反正存在.</p><p>创建表：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE TARD ( ID INT PRIMARY KEY, name TEXT NOT NULL UNIQUE, age INT NOT NULL , date CHAR(50),Dvalue REAL DEFAULT 300.00);</span><br></pre></td></tr></table></figure><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 在xiaoming不存在的情况下进行INSERT</span></span><br><span class="line"></span><br><span class="line">INSERT OR REPLACE INTO TARD (ID, name, age, date) VALUES (1, 'xiaoming', 18, '打电话')</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"></span><br><span class="line">IDname    age   date     Dvalue</span><br><span class="line"><span class="number">1</span>xiaoming<span class="number">18</span>   打电话 <span class="number">300</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在xiaoming已经存在的情况下进行update</span></span><br><span class="line"></span><br><span class="line">INSERT OR REPLACE INTO TARD (ID, name, age, date) VALUES (1, 'xiaoming', 118, '去打电话')</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"></span><br><span class="line">ID name    age   date       Dvalue</span><br><span class="line"><span class="number">1</span>xiaoming<span class="number">118</span>   去打电话   <span class="number">300</span></span><br></pre></td></tr></table></figure><p>创建表的时候<code>ID</code>和<code>name</code>都是<code>UNIQUE</code>的,命令只有在两个值都不存在时,才会进行插入,否则更新当前数据</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>如果<code>INSERT OR REPLACE INTO table-name (column-name,...) VALUES (column-value,...)</code>该数据已存在,在更新时,某行数据没填写,则默认为空,覆盖之前的数据.</p><p>举例:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT OR REPLACE INTO TARD (ID, name, age, date) VALUES (1, 'xiaoming', 118)</span><br></pre></td></tr></table></figure><p>xiaoming已在数据库中,会进行更新操作,没有填写<code>date</code>数值,则<code>date</code>数值不会被保留,而且替换为<code>NULL</code></p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ID name    age   date       Dvalue</span><br><span class="line"><span class="number">1</span>xiaoming<span class="number">118</span>   <span class="literal">NULL</span>   <span class="number">300</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SQLite是一个C语言库，它实现了一个 小型， 快速， 自包含， 高可靠性， 功能齐全的 SQL数据库引擎。SQLite是世界上使用最多的数据库引擎。它内置于所有移动电话和大多数计算机中，并且捆绑在人们每天使用的无数其他应用程序中。下面是介绍如何使用&lt;code&gt;INSERT OR REPLACE&lt;/code&gt;命令。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/sqlite.png&quot; alt=&quot;SQLite&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="https://duanruilong.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="编程" scheme="https://duanruilong.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据库" scheme="https://duanruilong.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>AnyProxy简介移动端抓包工具</title>
    <link href="https://duanruilong.github.io/2018/12/26/AnyProxy%E7%AE%80%E4%BB%8B%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7/"/>
    <id>https://duanruilong.github.io/2018/12/26/AnyProxy简介移动端抓包工具/</id>
    <published>2018-12-26T03:29:07.000Z</published>
    <updated>2019-01-29T12:14:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>移动端的开发，难免需要抓包查看情况，在实际工作里开发移动端业务需求，找到了AnyProxy抓包神器，它是阿里巴巴基于 Node.js 开发的一款开源代理服务器，使用场景很广，满足日常需求开发和测试。</p><p><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/AnyProxy.png" alt="AnyProxy"></p><a id="more"></a><h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h1><blockquote><p>AnyProxy 是阿里巴巴基于 Node.js 开发的一款开源代理服务器。<a href="https://github.com/alibaba/anyproxy" target="_blank" rel="noopener">AnyProxy链接</a></p></blockquote><ul><li>代理服务器站在客户端和服务端的中间，它可以收集双方通信的每个比特。一个完整的代理请求过程为：客户端首先与代理服务器创建连接，接着根据代理服务所使用的代理协议，请求对目标服务器创建连接或者获取目标服务器的指定资源。一些代理协议允许代理服务器改变客户端的原始请求、目标服务器的原始响应。</li><li>AnyProxy 是完全可以灵活配置的代理服务器。它支持 https明文代理 ，且提供了 Web 界面便于观测请求情况，同时支持二次开发，可以用 JavaScript 来控制代理的全部流程，搭建前端个性化调试环境。</li></ul><h1 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h1><h2 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h2><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~ brew update</span><br><span class="line">~ brew install node</span><br><span class="line">~ node --version</span><br></pre></td></tr></table></figure><h2 id="安装-AnyProxy（需要node8）"><a href="#安装-AnyProxy（需要node8）" class="headerlink" title="安装 AnyProxy（需要node8）"></a>安装 AnyProxy（需要node8）</h2><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">~ 安装稳定正式版</span><br><span class="line">$ npm install -g anyproxy</span><br><span class="line">~ 最新测试版，需要使用最新版本 node 进行安装</span><br><span class="line">$ npm install -g anyproxy@beta</span><br><span class="line">~ 有时需要添加 sudo</span><br></pre></td></tr></table></figure><h2 id="使用AnyProxy"><a href="#使用AnyProxy" class="headerlink" title="使用AnyProxy"></a>使用AnyProxy</h2><h3 id="1、启动-anyproxy"><a href="#1、启动-anyproxy" class="headerlink" title="1、启动 anyproxy"></a>1、启动 anyproxy</h3><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~ anyproxy</span><br></pre></td></tr></table></figure><h3 id="启动结果"><a href="#启动结果" class="headerlink" title="启动结果"></a>启动结果</h3><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> ~ anyproxy</span><br><span class="line">[AnyProxy Log][<span class="number">2018</span><span class="number">-12</span><span class="number">-26</span> <span class="number">11</span>:<span class="number">42</span>:<span class="number">19</span>]: Http proxy started on port <span class="number">8001</span></span><br><span class="line">[AnyProxy Log][<span class="number">2018</span><span class="number">-12</span><span class="number">-26</span> <span class="number">11</span>:<span class="number">42</span>:<span class="number">19</span>]: web interface started on port <span class="number">8002</span></span><br></pre></td></tr></table></figure><h3 id="2、启动浏览器"><a href="#2、启动浏览器" class="headerlink" title="2、启动浏览器"></a>2、启动浏览器</h3><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//192.168.0.195:8002/   或   http://127.0.0.1:8002/</span></span><br></pre></td></tr></table></figure><h3 id="3、客户端配置代理-ip-端口号8001"><a href="#3、客户端配置代理-ip-端口号8001" class="headerlink" title="3、客户端配置代理 ip 端口号8001"></a>3、客户端配置代理 ip 端口号8001</h3><p><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/tool/AnyProxy.png" alt="客户端配置代理"></p><p>启动anyproxy<br><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/tool/AnyProxy1.png" alt="客户端配置代理"></p><h2 id="配置-Https"><a href="#配置-Https" class="headerlink" title="配置 Https"></a>配置 Https</h2><h3 id="1、-生成-rootCA"><a href="#1、-生成-rootCA" class="headerlink" title="1、 生成 rootCA"></a>1、 生成 rootCA</h3><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  稳定版本生成方法</span></span><br><span class="line">~ sudo anyproxy --root</span><br><span class="line"><span class="comment">//  最新版本生成方法</span></span><br><span class="line">~ anyproxy-ca</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/tool/AnyProxy2.png" alt="生成rootCA"></p><h2 id="以支持-Https-方式重新启动-AnyProxy"><a href="#以支持-Https-方式重新启动-AnyProxy" class="headerlink" title="以支持 Https 方式重新启动 AnyProxy"></a>以支持 Https 方式重新启动 AnyProxy</h2><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~ anyproxy --intercept</span><br><span class="line"><span class="comment">//  简写</span></span><br><span class="line">~ anyproxy -i</span><br></pre></td></tr></table></figure><p>启动结果<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">~ anyproxy -i</span><br><span class="line"></span><br><span class="line">[AnyProxy WARN][<span class="number">2018</span><span class="number">-12</span><span class="number">-26</span> <span class="number">11</span>:<span class="number">55</span>:<span class="number">54</span>]: ROOT CA NOT INSTALLED YET</span><br><span class="line">? The rootCA is <span class="keyword">not</span> trusted yet, install it to the trust store now? Yes</span><br><span class="line">[AnyProxy Log][<span class="number">2018</span><span class="number">-12</span><span class="number">-26</span> <span class="number">11</span>:<span class="number">56</span>:<span class="number">03</span>]: About to trust the root CA, <span class="keyword">this</span> may requires your password</span><br><span class="line">Password:</span><br><span class="line">[AnyProxy Log][<span class="number">2018</span><span class="number">-12</span><span class="number">-26</span> <span class="number">11</span>:<span class="number">56</span>:<span class="number">07</span>]: Root CA install, you are ready to intercept the https now</span><br><span class="line">[AnyProxy Log][<span class="number">2018</span><span class="number">-12</span><span class="number">-26</span> <span class="number">11</span>:<span class="number">56</span>:<span class="number">07</span>]: The root CA file path is: /Users/xmaczone/.anyproxy/certificates/rootCA.crt</span><br><span class="line">[AnyProxy Log][<span class="number">2018</span><span class="number">-12</span><span class="number">-26</span> <span class="number">11</span>:<span class="number">56</span>:<span class="number">08</span>]: Http proxy started on port <span class="number">8001</span></span><br><span class="line">[AnyProxy Log][<span class="number">2018</span><span class="number">-12</span><span class="number">-26</span> <span class="number">11</span>:<span class="number">56</span>:<span class="number">08</span>]: web interface started on port <span class="number">8002</span></span><br></pre></td></tr></table></figure></p><h2 id="手机安装证书"><a href="#手机安装证书" class="headerlink" title="手机安装证书"></a>手机安装证书</h2><p><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/tool/AnyProxy3.png" alt="生成rootCA"></p><h1 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h1><p><a href="http://aiezu.com/article/windows_anyproxy_install.html" target="_blank" rel="noopener">windows下安装AnyProxy抓取移动App Http请求</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;移动端的开发，难免需要抓包查看情况，在实际工作里开发移动端业务需求，找到了AnyProxy抓包神器，它是阿里巴巴基于 Node.js 开发的一款开源代理服务器，使用场景很广，满足日常需求开发和测试。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/AnyProxy.png&quot; alt=&quot;AnyProxy&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="https://duanruilong.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Javascript" scheme="https://duanruilong.github.io/tags/Javascript/"/>
    
      <category term="编程" scheme="https://duanruilong.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="工具" scheme="https://duanruilong.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>asyncwait的使用以及注意事项</title>
    <link href="https://duanruilong.github.io/2018/12/25/async-await%E7%9A%84%E4%BD%BF%E7%94%A8%E4%BB%A5%E5%8F%8A%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <id>https://duanruilong.github.io/2018/12/25/async-await的使用以及注意事项/</id>
    <published>2018-12-25T02:13:24.000Z</published>
    <updated>2019-01-29T12:14:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>async</code> / <code>await</code>, 搭配 <code>promise</code>, 可以通过编写形似同步的代码来处理异步流程, 提高代码的简洁性和可读性. 这里介绍 <code>async</code> / <code>await</code>的基本用法和一些注意事项.</p><p><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/async_await.png" alt="Javascript"></p><a id="more"></a><h1 id="async"><a href="#async" class="headerlink" title="async"></a>async</h1><p>使用 <code>async function</code> 可以定义一个异步函数,其语法为:<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">async function <span class="title">name</span><span class="params">([param[, param[, ... param]]])</span> </span>&#123; statements &#125;</span><br></pre></td></tr></table></figure></p><p><code>async</code> 函数的返回值很特殊: 不管在函数体内 return 了什么值, async 函数的实际返回值总是一个 Promise 对象. 详细讲就是:若在 async 函数中 return 了一个值 a, 不管 a 值是什么类型, async 函数的实际返回值总是 <code>Promise.resolve(a)</code>.</p><p>那么 <code>Promise.resolve(a)</code> 最终返回一个什么样的promise呢? 看一下MDN的介绍:</p><blockquote><p>Promise.resolve(value)方法返回一个以给定值解析后的Promise对象。但如果这个值是个thenable（即带有then方法），返回的promise会“跟随”这个thenable的对象，采用它的最终状态（指resolved/rejected/pending/settled）；否则以该值为成功状态返回promise对象。</p></blockquote><p>来看一段代码有这样一个场景: 需要先通过 请求a 拿到 数据a, 然后通过通过 请求b 并携带发送 数据a 获取到 数据b, 拿到 数据b 之后再展示到页面上.</p><p>方案一:<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">async function <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 假装请求数据a</span></span><br><span class="line">    var data_a = await <span class="keyword">new</span> Promise((resolve) =&gt; &#123;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            resolve('data_a');</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 假装请求数据b且此请求依赖数据a</span></span><br><span class="line">    var data_b = await <span class="keyword">new</span> Promise((resolve) =&gt; &#123;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            resolve('data_b');</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 展示数据2</span></span><br><span class="line">    console.<span class="built_in">log</span>(data_b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getData();</span><br></pre></td></tr></table></figure></p><p>上面依次获取到 数据a 和 数据b, 然后再展示 数据b.</p><p>既然 <code>async</code>函数总是返回一个<code>promise</code>, 那么也可以在一个 async 函数返回获取 数据b 的<code>promise</code>, 调用函数后再使用 <code>then</code> 方法拿到数据, 代码如下:</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">async function <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 假装请求数据a</span></span><br><span class="line">    var data_a = await <span class="keyword">new</span> Promise((resolve) =&gt; &#123;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            resolve('data_a_value');</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 假装请求数据b且此请求依赖数据a</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Promise((resolve) =&gt; &#123;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            console.<span class="built_in">log</span>(data_a);  <span class="comment">// ===&gt;data_a_value</span></span><br><span class="line">            resolve('data_b_value'); </span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">getData().then((value) =&gt; &#123;</span><br><span class="line">      console.<span class="built_in">log</span>(value);  <span class="comment">// ===&gt;data_b_value</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果返回顺序</span></span><br><span class="line">data_a_value</span><br><span class="line">data_b_value</span><br></pre></td></tr></table></figure><h1 id="await"><a href="#await" class="headerlink" title="await"></a>await</h1><p>引用MDN的介绍:</p><blockquote><p>await 操作符用于等待一个 Promise 对象, 它只能在异步函数 async function 内部使用.</p></blockquote><p>await 的使用语法非常简单:</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[return_value] = await expression;</span><br></pre></td></tr></table></figure><p>其中 <code>expression</code> 是一个 <code>Promise</code> 对象或者任何要等待的值;</p><p>而 <code>await expression</code> 的执行结果有以下几种情况:</p><ul><li><p>若 <code>expression</code> 是一个 <code>Promise</code> 对象, 并且其以值 x 被 <code>fulfilled</code>, 则返回值为 x.</p></li><li><p>若 <code>expression</code> 是一个 <code>Promise</code> 对象, 并且其以异常 e 被 <code>rejected</code>, 则抛出异常 e.</p></li><li><p>若 <code>expression</code> 不是 <code>Promise</code> 对象, 则会将 expression 处理成一个以 expression 值被 fulfilled 的 Promise 对象, 然后返回这个 Promise 对象的最终值 (即 expression 值). 这种用法没太大意义, 因此实际使用时还是尽量在 await 后跟一个 Promise 对象.</p></li></ul><p>另外需要注意的是, <code>await</code> 在等待 <code>Promise</code> 对象时会导致 <code>async function</code> 暂停执行, 一直到 <code>Promise</code> 对象决议之后才会 <code>async function</code> 继续执行.</p><p>通过一段代码来看一下:</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">async function <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    var a = await <span class="keyword">new</span> Promise((resolve) =&gt; &#123;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            resolve(<span class="number">1</span>);</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    console.<span class="built_in">log</span>(a); <span class="comment">// 第2秒时输出: 1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        var b = await <span class="keyword">new</span> Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">            setTimeout(() =&gt; &#123;</span><br><span class="line">                reject(<span class="number">2</span>);</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        console.<span class="built_in">log</span>(e); <span class="comment">// 第3秒时输出: 2</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 函数暂停2秒后再继续执行</span></span><br><span class="line">    var sleep = await <span class="keyword">new</span> Promise((resolve) =&gt; &#123;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            console.log('sleep_value');</span><br><span class="line">            resolve('sleep');</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    var c = await <span class="number">3</span>;</span><br><span class="line">    console.<span class="built_in">log</span>(c); <span class="comment">// 第5秒时输出: 3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果返回顺序</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">sleep_value</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;async&lt;/code&gt; / &lt;code&gt;await&lt;/code&gt;, 搭配 &lt;code&gt;promise&lt;/code&gt;, 可以通过编写形似同步的代码来处理异步流程, 提高代码的简洁性和可读性. 这里介绍 &lt;code&gt;async&lt;/code&gt; / &lt;code&gt;await&lt;/code&gt;的基本用法和一些注意事项.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/async_await.png&quot; alt=&quot;Javascript&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="https://duanruilong.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Javascript" scheme="https://duanruilong.github.io/tags/Javascript/"/>
    
      <category term="编程" scheme="https://duanruilong.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="ES6" scheme="https://duanruilong.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>好的东西收藏于此</title>
    <link href="https://duanruilong.github.io/2018/12/24/%E5%A5%BD%E7%9A%84%E4%B8%9C%E8%A5%BF%E6%94%B6%E8%97%8F%E4%BA%8E%E6%AD%A4/"/>
    <id>https://duanruilong.github.io/2018/12/24/好的东西收藏于此/</id>
    <published>2018-12-24T03:51:29.000Z</published>
    <updated>2019-07-24T06:19:19.909Z</updated>
    
    <content type="html"><![CDATA[<p>这里会是一个知识的宝库，里面会有教程、文档、框架、方案、理论，大家慢慢去品味。</p><p><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/allweb.png" alt="Javascript"></p><a id="more"></a><h1 id="框架—React"><a href="#框架—React" class="headerlink" title="框架—React"></a>框架—React</h1><hr><h2 id="1、dva-首先是一个基于-redux-和-redux-saga-的数据流方案，然后为了简化开发体验，dva-还额外内置了-react-router-和-fetch，所以也可以理解为一个轻量级的应用框架。"><a href="#1、dva-首先是一个基于-redux-和-redux-saga-的数据流方案，然后为了简化开发体验，dva-还额外内置了-react-router-和-fetch，所以也可以理解为一个轻量级的应用框架。" class="headerlink" title="1、dva 首先是一个基于 redux 和 redux-saga 的数据流方案，然后为了简化开发体验，dva 还额外内置了 react-router 和 fetch，所以也可以理解为一个轻量级的应用框架。"></a>1、dva 首先是一个基于 redux 和 redux-saga 的数据流方案，然后为了简化开发体验，dva 还额外内置了 react-router 和 fetch，所以也可以理解为一个轻量级的应用框架。</h2><h3 id="About"><a href="#About" class="headerlink" title="About"></a>About</h3><ul><li>DvaJS文档   <a href="https://dvajs.com/guide/" target="_blank" rel="noopener">链接</a></li><li>dva.js 知识导图   <a href="https://github.com/dvajs/dva-knowledgemap" target="_blank" rel="noopener">链接</a></li><li>AccountSystem 一个小型库存管理系统   <a href="https://github.com/yvanwangl/AccountSystem" target="_blank" rel="noopener">链接</a></li></ul><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li>易学易用，仅有 6 个 api，对 redux 用户尤其友好，<a href="https://umijs.org/guide/with-dva.html" target="_blank" rel="noopener">配合 umi</a> 使用后更是降低为 0 API</li><li>elm 概念，通过 reducers, effects 和 subscriptions 组织 model</li><li>插件机制，比如 <a href="https://github.com/dvajs/dva/tree/master/packages/dva-loading" target="_blank" rel="noopener">dva-loading</a> 可以自动处理 loading 状态，不用一遍遍地写 showLoading 和 hideLoading</li><li>支持 HMR，基于 <a href="https://github.com/dvajs/babel-plugin-dva-hmr" target="_blank" rel="noopener">babel-plugin-dva-hmr</a> 实现 components、routes 和 models 的 HMR</li></ul><h3 id="他是怎么来的？"><a href="#他是怎么来的？" class="headerlink" title="他是怎么来的？"></a>他是怎么来的？</h3><ul><li><a href="https://github.com/dvajs/dva/issues/1" target="_blank" rel="noopener">Why dva and what’s dva</a></li><li><a href="https://www.github.com/sorrycc/blog/issues/6" target="_blank" rel="noopener">支付宝前端应用架构的发展和选择</a></li></ul><hr><h2 id="2、AntD-Admin-一套优秀的中后台前端解决方案"><a href="#2、AntD-Admin-一套优秀的中后台前端解决方案" class="headerlink" title="2、AntD Admin 一套优秀的中后台前端解决方案"></a>2、AntD Admin 一套优秀的中后台前端解决方案</h2><h3 id="About-1"><a href="#About-1" class="headerlink" title="About"></a>About</h3><ul><li>在线演示 - <a href="https://antd-admin.zuiidea.com" target="_blank" rel="noopener">链接</a></li><li>使用文档 - <a href="https://doc.antd-admin.zuiidea.com/#/zh-cn/" target="_blank" rel="noopener">链接</a></li><li>常见问题 - <a href="https://doc.antd-admin.zuiidea.com/#/zh-cn/faq" target="_blank" rel="noopener">链接</a></li><li>更新日志 - <a href="https://doc.antd-admin.zuiidea.com/#/zh-cn/change-log" target="_blank" rel="noopener">链接</a></li></ul><h3 id="特性-1"><a href="#特性-1" class="headerlink" title="特性"></a>特性</h3><ul><li>国际化，源码中抽离翻译字段，按需加载语言包</li><li>动态权限，不同权限对应不同菜单</li><li>优雅美观，Ant Design 设计体系</li><li>Mock 数据，本地数据调试</li></ul><h2 id="3、12-步-30-分钟，完成用户管理的-CURD-应用-react-dva-antd"><a href="#3、12-步-30-分钟，完成用户管理的-CURD-应用-react-dva-antd" class="headerlink" title="3、12 步 30 分钟，完成用户管理的 CURD 应用 (react+dva+antd)"></a>3、12 步 30 分钟，完成用户管理的 CURD 应用 (react+dva+antd)</h2><h3 id="About-2"><a href="#About-2" class="headerlink" title="About"></a>About</h3><ul><li><p>git链接 <a href="https://github.com/dvajs/dva/tree/master/examples/user-dashboard" target="_blank" rel="noopener">链接</a></p></li><li><p>实现日志 <a href="https://github.com/sorrycc/blog/issues/18" target="_blank" rel="noopener">链接</a></p></li><li><p>Roadhog 是一个包含 dev、build 和 test 的命令行工具，他基于 react-dev-utils，和 create-react-app 的体验保持一致。你可以想象他为可配置版的 create-react-app。<a href="https://github.com/sorrycc/roadhog/blob/master/README_zh-cn.md" target="_blank" rel="noopener">链接</a></p></li></ul><h1 id="框架—Vue"><a href="#框架—Vue" class="headerlink" title="框架—Vue"></a>框架—Vue</h1><hr><h2 id="1、Ant-Design-of-Vue"><a href="#1、Ant-Design-of-Vue" class="headerlink" title="1、Ant Design of Vue"></a>1、Ant Design of Vue</h2><h3 id="About-3"><a href="#About-3" class="headerlink" title="About"></a>About</h3><p> Ant Design 的 Vue 实现，开发和服务于企业级后台产品。<br> <a href="https://vue.ant.design/docs/vue/introduce-cn/" target="_blank" rel="noopener">链接</a></p><h3 id="特性-2"><a href="#特性-2" class="headerlink" title="特性"></a>特性</h3><ul><li>提炼自企业级中后台产品的交互语言和视觉风格。</li><li>开箱即用的高质量 Vue 组件。</li><li>共享Ant Design of React设计工具体系。</li></ul><h2 id="2、Vue-baidu-map"><a href="#2、Vue-baidu-map" class="headerlink" title="2、Vue-baidu-map"></a>2、Vue-baidu-map</h2><h3 id="About-4"><a href="#About-4" class="headerlink" title="About"></a>About</h3><p> Vue 2.x的百度地图组件\</p><h3 id="特性-3"><a href="#特性-3" class="headerlink" title="特性"></a>特性</h3><ul><li><a href="https://github.com/Dafrok/vue-baidu-map?utm_source=mybridge&amp;utm_medium=blog&amp;utm_campaign=read_more" target="_blank" rel="noopener">git链接</a></li><li><a href="https://dafrok.github.io/vue-baidu-map/#/" target="_blank" rel="noopener">文档地址</a></li></ul><h2 id="3、-Vue-element-admin"><a href="#3、-Vue-element-admin" class="headerlink" title="3、 Vue-element-admin"></a>3、 Vue-element-admin</h2><h3 id="About-5"><a href="#About-5" class="headerlink" title="About"></a>About</h3><p> 一个神奇的vue后台管理系统</p><h3 id="特性-4"><a href="#特性-4" class="headerlink" title="特性"></a>特性</h3><ul><li><a href="https://github.com/PanJiaChen/vue-element-admin?utm_source=mybridge&amp;utm_medium=blog&amp;utm_campaign=read_more" target="_blank" rel="noopener">git链接</a></li></ul><h2 id="4、-Vue-element-admin"><a href="#4、-Vue-element-admin" class="headerlink" title="4、 Vue-element-admin"></a>4、 Vue-element-admin</h2><h3 id="About-6"><a href="#About-6" class="headerlink" title="About"></a>About</h3><p> 用Vue和LESS简单、快速建立许多漂亮的简历，并创建你最好的简历</p><h3 id="特性-5"><a href="#特性-5" class="headerlink" title="特性"></a>特性</h3><ul><li><a href="https://github.com/salomonelli/best-resume-ever?utm_source=mybridge&amp;utm_medium=blog&amp;utm_campaign=read_more" target="_blank" rel="noopener">git链接</a></li></ul><h2 id="5、-Element"><a href="#5、-Element" class="headerlink" title="5、 Element"></a>5、 Element</h2><h3 id="About-7"><a href="#About-7" class="headerlink" title="About"></a>About</h3><p> 一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的桌面端组件库</p><h3 id="特性-6"><a href="#特性-6" class="headerlink" title="特性"></a>特性</h3><ul><li><a href="https://github.com/ElemeFE/element?utm_source=mybridge&amp;utm_medium=blog&amp;utm_campaign=read_more" target="_blank" rel="noopener">git链接</a></li><li><a href="http://element-cn.eleme.io/#/zh-CN" target="_blank" rel="noopener">文档地址</a></li></ul><h1 id="实战实验"><a href="#实战实验" class="headerlink" title="实战实验"></a>实战实验</h1><hr><h2 id="1、基于React-编写的基于Taro-Dva构建的适配不同端（微信-百度-支付宝小程序、H5、React-Native-等）的时装衣橱"><a href="#1、基于React-编写的基于Taro-Dva构建的适配不同端（微信-百度-支付宝小程序、H5、React-Native-等）的时装衣橱" class="headerlink" title="1、基于React 编写的基于Taro + Dva构建的适配不同端（微信/百度/支付宝小程序、H5、React-Native 等）的时装衣橱"></a>1、基于React 编写的基于Taro + Dva构建的适配不同端（微信/百度/支付宝小程序、H5、React-Native 等）的时装衣橱</h2><h3 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h3><p>React + Taro + Dva + Sass + ES6/ES7</p><h3 id="特性-7"><a href="#特性-7" class="headerlink" title="特性"></a>特性</h3><ul><li><a href="https://github.com/Duanruilong/taro-msparis" target="_blank" rel="noopener">git链接</a></li><li><a href="https://nervjs.github.io/taro/docs/README.html" target="_blank" rel="noopener">taro文档地址</a></li></ul><hr><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><hr><h2 id="1、docsify"><a href="#1、docsify" class="headerlink" title="1、docsify"></a>1、docsify</h2><h3 id="About-8"><a href="#About-8" class="headerlink" title="About"></a>About</h3><p><a href="https://docsify.js.org/#/zh-cn/" target="_blank" rel="noopener">文档地址</a><br>一个神奇的文档网站生成工具</p><p>docsify 是一个动态生成文档网站的工具。不同于 GitBook、Hexo 的地方是它不会生成将 .md 转成 .html 文件，所有转换工作都是在运行时进行。</p><h3 id="特性-8"><a href="#特性-8" class="headerlink" title="特性"></a>特性</h3><ul><li>无需构建，写完文档直接发布</li><li>容易使用并且轻量 (~19kB gzipped)</li><li>智能的全文搜索</li><li>提供多套主题</li><li>丰富的 API</li><li>支持 Emoji</li><li>兼容 IE10+</li><li>支持 SSR (example)</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里会是一个知识的宝库，里面会有教程、文档、框架、方案、理论，大家慢慢去品味。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/allweb.png&quot; alt=&quot;Javascript&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="https://duanruilong.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="React" scheme="https://duanruilong.github.io/tags/React/"/>
    
      <category term="Javascript" scheme="https://duanruilong.github.io/tags/Javascript/"/>
    
      <category term="编程" scheme="https://duanruilong.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>面向对象原则-高内聚、低耦合</title>
    <link href="https://duanruilong.github.io/2018/12/19/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%8E%9F%E5%88%99-%E9%AB%98%E5%86%85%E8%81%9A%E3%80%81%E4%BD%8E%E8%80%A6%E5%90%88/"/>
    <id>https://duanruilong.github.io/2018/12/19/面向对象原则-高内聚、低耦合/</id>
    <published>2018-12-19T03:21:27.000Z</published>
    <updated>2019-01-29T12:14:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>面向对象原则：高内聚、低耦合;多聚合、少继承；使得各个业务模块的<code>“可重用性”</code>、<code>“移植性”</code>明显提升。</p><p><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/js/mxdxyz.jpg" alt="Javascript"></p><a id="more"></a><h1 id="高内聚、低耦合"><a href="#高内聚、低耦合" class="headerlink" title="高内聚、低耦合"></a>高内聚、低耦合</h1><ul><li>内聚：就是每个模块尽可能可以独立完成自己的功能，不依赖于其他外部模块的代码。 </li><li><p>耦合：就是模块与模块之间接口的复杂程度，模块之间的联系如果越复杂那么他们的耦合度就越高，会出现修改一处代码引发蝴蝶效应，牵一发而动全身。</p></li><li><p>结果：使得各个业务模块的<code>“可重用性”</code>、<code>“移植性”</code>明显提升；通常项目代码结构中各模块的内聚程度越高，那么模块间的耦合程度就越低</p></li></ul><h1 id="模块："><a href="#模块：" class="headerlink" title="模块："></a>模块：</h1><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>  高内聚：尽可能类的每个成员方法只完成一件事（最大限度的聚合）<br>  低耦合：减少类内部，一个成员方法调用另一个成员方法 </p><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>   高内聚低耦合：减少类内部，对其他类的调用 </p><h2 id="功能块"><a href="#功能块" class="headerlink" title="功能块"></a>功能块</h2><p>   高内聚低耦合：减少模块之间的交互复杂度（接口数量，参数数据）</p><h1 id="多聚合、少继承"><a href="#多聚合、少继承" class="headerlink" title="多聚合、少继承"></a>多聚合、少继承</h1><ul><li>聚合：事物A由若干个事物B组成，体现在类与类之间的关系就是：“类B的实例”作为“类A”的“成员对象”出现。 </li><li>继承：顾名思义，体现在类与类之间的关系就是：“类B”被类A所继承<br>显然，当观察类B所具有的行为能力时，“聚合”方式更加清晰。 </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;面向对象原则：高内聚、低耦合;多聚合、少继承；使得各个业务模块的&lt;code&gt;“可重用性”&lt;/code&gt;、&lt;code&gt;“移植性”&lt;/code&gt;明显提升。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/js/mxdxyz.jpg&quot; alt=&quot;Javascript&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="https://duanruilong.github.io/categories/Javascript/"/>
    
    
      <category term="Javascript" scheme="https://duanruilong.github.io/tags/Javascript/"/>
    
      <category term="编程" scheme="https://duanruilong.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Gitment使用 GitHub Issues 搭建评论系统</title>
    <link href="https://duanruilong.github.io/2018/12/07/Gitment%E4%BD%BF%E7%94%A8-GitHub-Issues-%E6%90%AD%E5%BB%BA%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"/>
    <id>https://duanruilong.github.io/2018/12/07/Gitment使用-GitHub-Issues-搭建评论系统/</id>
    <published>2018-12-07T07:42:06.000Z</published>
    <updated>2019-01-29T12:14:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>Gitment 是一款基于 GitHub Issues 的评论系统。支持在前端直接引入，不需要任何后端代码。可以在页面进行登录、查看、评论、点赞等操作，同时有完整的 Markdown / GFM 和代码高亮支持。尤为适合各种基于 GitHub Pages 的静态博客或项目页面。</p><p><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/gitment.png" alt="Gitment"></p><a id="more"></a><h1 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h1><h2 id="1-注册-OAuth-Application"><a href="#1-注册-OAuth-Application" class="headerlink" title="1. 注册 OAuth Application"></a>1. 注册 OAuth Application</h2><p><a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">点击此处</a> 来注册一个新的 OAuth Application。其他内容可以随意填写，但要确保填入正确的 callback URL（一般是评论页面对应的域名，如 <a href="https://imsun.net）。" target="_blank" rel="noopener">https://imsun.net）。</a></p><p>你会得到一个 client ID 和一个 client secret，这个将被用于之后的用户登录。</p><h2 id="2-引入-Gitment"><a href="#2-引入-Gitment" class="headerlink" title="2. 引入 Gitment"></a>2. 引入 Gitment</h2><p>将下面的代码添加到你的页面：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"container"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"https://imsun.github.io/gitment/style/default.css"</span>&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://imsun.github.io/gitment/dist/gitment.browser.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var gitment = <span class="keyword">new</span> Gitment(&#123;</span><br><span class="line">  id: '页面 ID', // 可选。默认为 location.href</span><br><span class="line">  owner: '你的 GitHub ID',</span><br><span class="line">  repo: '存储评论的 repo',</span><br><span class="line">  oauth: &#123;</span><br><span class="line">    client_id: '你的 client ID',</span><br><span class="line">    client_secret: '你的 client secret',</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">gitment.render('container')</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>注意，上述代码引用的 Gitment 将会随着开发变动。如果你希望始终使用最新的界面与特性即可引入上述代码。</p><p>如果你希望引用确定版本的 Gitment，则应该使用 npm 进行安装。</p><p><code>$ npm install --save gitment</code><br>关于构造函数中的更多可用参数请查看 Gitment Options</p><h2 id="3-初始化评论"><a href="#3-初始化评论" class="headerlink" title="3. 初始化评论"></a>3. 初始化评论</h2><p>页面发布后，你需要访问页面并使用你的 GitHub 账号登录（请确保你的账号是第二步所填 repo 的 owner），点击初始化按钮。</p><p>之后其他用户即可在该页面发表评论。</p><h2 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h2><p>Gitment 很容易进行自定义，你可以写一份自定义的 CSS 或者使用一个新的主题。（主题可以改变 DOM 结构而自定义 CSS 不能）</p><p>比如你可以通过自定义主题将评论框放在评论列表前面：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myTheme = &#123;</span><br><span class="line">  render(state, instance) &#123;</span><br><span class="line">    const container = document.createElement('div')</span><br><span class="line">    container.lang = <span class="string">"en-US"</span></span><br><span class="line">    container.className = 'gitment-container gitment-root-container'</span><br><span class="line">    container.appendChild(instance.renderHeader(state, instance))</span><br><span class="line">    container.appendChild(instance.renderEditor(state, instance))</span><br><span class="line">    container.appendChild(instance.renderComments(state, instance))</span><br><span class="line">    container.appendChild(instance.renderFooter(state, instance))</span><br><span class="line">    <span class="keyword">return</span> container</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> gitment = <span class="keyword">new</span> Gitment(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  theme: myTheme,</span><br><span class="line">&#125;)</span><br><span class="line">gitment.render('container')</span><br></pre></td></tr></table></figure><p>更多自定义内容请查看<a href="https://github.com/imsun/gitment#customize" target="_blank" rel="noopener">文档</a>。</p><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><p>语言问题<br>考虑到 GitHub 本身使用英文，而本项目面向用户均为 GitHub 用户，所以作者没有提供中文支持的打算。实在有需求的可以通过自定义主题支持中文。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Gitment 是一款基于 GitHub Issues 的评论系统。支持在前端直接引入，不需要任何后端代码。可以在页面进行登录、查看、评论、点赞等操作，同时有完整的 Markdown / GFM 和代码高亮支持。尤为适合各种基于 GitHub Pages 的静态博客或项目页面。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/gitment.png&quot; alt=&quot;Gitment&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="软件" scheme="https://duanruilong.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="编程" scheme="https://duanruilong.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="软件" scheme="https://duanruilong.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>React16新特性来认识一波</title>
    <link href="https://duanruilong.github.io/2018/11/29/React16%E6%96%B0%E7%89%B9%E6%80%A7%E6%9D%A5%E8%AE%A4%E8%AF%86%E4%B8%80%E6%B3%A2/"/>
    <id>https://duanruilong.github.io/2018/11/29/React16新特性来认识一波/</id>
    <published>2018-11-29T10:34:52.000Z</published>
    <updated>2019-01-29T12:14:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>React的16版本，采用了MIT开源许可证,React16新特性来认识一波。</p><ul><li><code>Fragments</code>：render函数可以返回数组和字符串</li><li><code>error boundaries</code>：错误处理</li><li><code>portals</code> ：支持声明性地将子树渲染到另一个DOM节点</li><li><code>custom DOM attributes</code> ：ReactDom允许传递非标准属性</li><li><code>improved server-side rendering</code>:提升服务端渲染性能</li><li>支持自定义DOM属性</li><li>setState传入null时不会再触发更新</li><li>更好的服务器端渲染</li><li>新的打包策略</li></ul><p><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/react16.png" alt="React"></p><a id="more"></a><h1 id="新特性"><a href="#新特性" class="headerlink" title="新特性"></a>新特性</h1><h1 id="1、render可以return数组-，字符串"><a href="#1、render可以return数组-，字符串" class="headerlink" title="1、render可以return数组 ，字符串"></a>1、render可以return数组 ，字符串</h1><p> React16新增加了render的返回格式，你可以return返回<code>string，number，boolean，null，portal，以及fragments(带有key属性的数组)</code>，且不需要外层包含div标签。不过需要添加对应的key值。</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//string</span></span><br><span class="line">render()&#123;</span><br><span class="line">    return 'Hello,world'</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//number</span></span><br><span class="line">render()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0123456789</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//boolean</span></span><br><span class="line">render()&#123;</span><br><span class="line">    <span class="keyword">return</span> isTrue ? <span class="literal">true</span> : <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//null</span></span><br><span class="line">render()&#123;</span><br><span class="line">    <span class="keyword">return</span> null</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//fragments，遇到控制台出现warning,是未加key标识符，</span></span><br><span class="line">render()&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        &lt;div&gt;Hello&lt;/div&gt;,</span><br><span class="line">        &lt;span&gt;world&lt;/span&gt;,</span><br><span class="line">        &lt;p&gt;DRL&lt;/p&gt;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2、error-boundaries错误处理"><a href="#2、error-boundaries错误处理" class="headerlink" title="2、error boundaries错误处理"></a>2、error boundaries错误处理</h1><p>React16新增加了抛异常的生命周期函数<code>componentDidCatch</code></p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">componentDidCatch(err,info)&#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;isError:<span class="number">1</span>&#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p> 运用这个寿命周期在遇到页面报错的时候就可以定义报错方式，给用户更好的体验。React 16之前页面内的组件如果发生错误，那么整个组件树就会从根节点被卸载，到了React 16 产生了一个“错误边界（error boundaries）”的概念,它会捕捉页面内的错误并且对这些错误进行处理。我们可以把它比喻为<code>try-catch</code></p><p> 在容易出错的组件外使用ErrorBoundary将它包裹起来:</p> <figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用方式</span></span><br><span class="line"></span><br><span class="line">import React, &#123; Component &#125; from 'react'</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorBoundary</span> <span class="title">extends</span> <span class="title">Component</span> &#123;</span></span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props)</span><br><span class="line">        <span class="keyword">this</span>.state = &#123; hasError: <span class="literal">false</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    componentDidCatch(err, info) &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123; hasError: <span class="literal">true</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.state.hasError)&#123;</span><br><span class="line">            <span class="keyword">return</span> &lt;div&gt;Something wrong!&lt;/div&gt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.props.children</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">render()&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;ErrorBoundary&gt;</span><br><span class="line">                &lt;Listview user=&#123;<span class="keyword">this</span>.state.data&#125; /&gt;</span><br><span class="line">            &lt;/ErrorBoundary&gt;</span><br><span class="line">            &lt;button onClick=&#123;<span class="keyword">this</span>.onClickChange&#125;&gt;toUpdate&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果Listview组件发生错误，将会使用ErrorBoundary提供的<code>&lt;div&gt;Something went wrong&lt;/div&gt;</code>代替它，不会引起整个组件树的卸载。</p><h1 id="3、portals支持声明性地将子树渲染到另一个DOM节点"><a href="#3、portals支持声明性地将子树渲染到另一个DOM节点" class="headerlink" title="3、portals支持声明性地将子树渲染到另一个DOM节点"></a>3、<code>portals</code>支持声明性地将子树渲染到另一个DOM节点</h1><p>Portals机制提供了一种最直接的方式可以把一个子组件渲染到父组件渲染的DOM树之外。默认情况下，React组件树和DOM树是完全对应的，因此对于一些Modal,Overlay之类的组件，通常是将它们放在顶层，但逻辑上它们可能只是属于某个子组件，不利于组件的代码组织。通过使用createPortal，我们可以将组件渲染到我们想要的任意DOM节点中，但该组件依然处在React的父组件之内。带来的一个特性就是，在子组件产生的event依然可以被React父组件捕获，但在DOM结构中，它却不是你的父组件。对于组件组织，代码切割来说，这是一个很好的属性。</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现一个简易蒙层效果，抽象出一个通用的Overlay组件</span></span><br><span class="line">import React, &#123; Component &#125; from 'react';</span><br><span class="line">import ReactDOM from 'react-dom';</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Overlay</span> <span class="title">extends</span> <span class="title">Component</span> &#123;</span></span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props);</span><br><span class="line">        this.container = document.createElement('div');</span><br><span class="line">        document.body.appendChild(<span class="keyword">this</span>.container);</span><br><span class="line">    &#125;</span><br><span class="line">    componentWillUnmount() &#123;</span><br><span class="line">        document.body.removeChild(<span class="keyword">this</span>.container);</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> ReactDOM.createPortal(</span><br><span class="line">            &lt;div className='overlay'&gt;</span><br><span class="line">                &lt;span className='overlay-close' onClick=&#123;this.props.onClose&#125;&gt;&amp;times;&lt;/span&gt;</span><br><span class="line">                &#123;<span class="keyword">this</span>.props.children&#125;</span><br><span class="line">            &lt;/div&gt;,</span><br><span class="line">            <span class="keyword">this</span>.container</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//该组件对应的样式如下</span></span><br><span class="line">.overlay&#123;</span><br><span class="line">    box-sizing:border-box;</span><br><span class="line">    position: fixed;</span><br><span class="line">    top:<span class="number">50</span>%;</span><br><span class="line">    left:<span class="number">50</span>%;</span><br><span class="line">    width:<span class="number">260</span>px;</span><br><span class="line">    height:<span class="number">200</span>px;</span><br><span class="line">    margin-left:<span class="number">-130</span>px;</span><br><span class="line">    margin-top:<span class="number">-100</span>px;</span><br><span class="line">    padding:<span class="number">10</span>px;</span><br><span class="line">    background-color: <span class="meta">#fff;</span></span><br><span class="line">    outline: rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">.5</span>) solid <span class="number">9999</span>px;</span><br><span class="line">&#125;</span><br><span class="line">.overlay-close&#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top:<span class="number">10</span>px;</span><br><span class="line">    right:<span class="number">10</span>px;</span><br><span class="line">    color:red;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">使用方式如下：</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="title">extends</span> <span class="title">Component</span> &#123;</span></span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      overlayActive: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.closeOverlay = <span class="keyword">this</span>.closeOverlay.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.showOverlay = <span class="keyword">this</span>.showOverlay.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  closeOverlay() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; overlayActive: <span class="literal">false</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  showOverlay() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; overlayActive: <span class="literal">true</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">        &lt;div&gt;hello world!&lt;/div&gt;</span><br><span class="line">        &#123;<span class="keyword">this</span>.state.overlayActive &amp;&amp;</span><br><span class="line">          &lt;Overlay onClose=&#123;<span class="keyword">this</span>.closeOverlay&#125;&gt;overlay content&lt;/Overlay&gt;&#125;</span><br><span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>.showOverlay&#125;&gt;show&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4、custom-DOM-attributes-：ReactDom允许传递非标准属性"><a href="#4、custom-DOM-attributes-：ReactDom允许传递非标准属性" class="headerlink" title="4、custom DOM attributes ：ReactDom允许传递非标准属性"></a>4、<code>custom DOM attributes</code> ：ReactDom允许传递非标准属性</h1><h1 id="5、-improved-server-side-rendering-提升服务端渲染性能"><a href="#5、-improved-server-side-rendering-提升服务端渲染性能" class="headerlink" title="5、 improved server-side rendering:提升服务端渲染性能"></a>5、 <code>improved server-side rendering</code>:提升服务端渲染性能</h1><h1 id="6、-支持自定义DOM属性"><a href="#6、-支持自定义DOM属性" class="headerlink" title="6、 支持自定义DOM属性"></a>6、 支持自定义DOM属性</h1><h1 id="7、-setState传入null时不会再触发更新"><a href="#7、-setState传入null时不会再触发更新" class="headerlink" title="7、 setState传入null时不会再触发更新"></a>7、 setState传入null时不会再触发更新</h1><h1 id="8、-更好的服务器端渲染"><a href="#8、-更好的服务器端渲染" class="headerlink" title="8、 更好的服务器端渲染"></a>8、 更好的服务器端渲染</h1><h1 id="9、-新的打包策略"><a href="#9、-新的打包策略" class="headerlink" title="9、 新的打包策略"></a>9、 新的打包策略</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;React的16版本，采用了MIT开源许可证,React16新特性来认识一波。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Fragments&lt;/code&gt;：render函数可以返回数组和字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error boundaries&lt;/code&gt;：错误处理&lt;/li&gt;
&lt;li&gt;&lt;code&gt;portals&lt;/code&gt; ：支持声明性地将子树渲染到另一个DOM节点&lt;/li&gt;
&lt;li&gt;&lt;code&gt;custom DOM attributes&lt;/code&gt; ：ReactDom允许传递非标准属性&lt;/li&gt;
&lt;li&gt;&lt;code&gt;improved server-side rendering&lt;/code&gt;:提升服务端渲染性能&lt;/li&gt;
&lt;li&gt;支持自定义DOM属性&lt;/li&gt;
&lt;li&gt;setState传入null时不会再触发更新&lt;/li&gt;
&lt;li&gt;更好的服务器端渲染&lt;/li&gt;
&lt;li&gt;新的打包策略&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/react16.png&quot; alt=&quot;React&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="React" scheme="https://duanruilong.github.io/categories/React/"/>
    
    
      <category term="React" scheme="https://duanruilong.github.io/tags/React/"/>
    
      <category term="编程" scheme="https://duanruilong.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript: 什么是纯函数以及为什么要用纯函数</title>
    <link href="https://duanruilong.github.io/2018/11/11/JavaScript-%E4%BB%80%E4%B9%88%E6%98%AF%E7%BA%AF%E5%87%BD%E6%95%B0%E4%BB%A5%E5%8F%8A%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8%E7%BA%AF%E5%87%BD%E6%95%B0/"/>
    <id>https://duanruilong.github.io/2018/11/11/JavaScript-什么是纯函数以及为什么要用纯函数/</id>
    <published>2018-11-11T09:57:25.000Z</published>
    <updated>2018-11-25T13:20:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>当我第一次听到 “纯函数 (Pure Function)” 这个术语的时候我很疑惑。常规的函数做错了什么？为什么要变纯？ 为什么我需要纯的函数？</p><p>除非你已经知道什么是纯函数，否则你可能会问同样的疑惑。不过这个概念其实很简单。可以花点时间一起来看以下。</p><p><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/js_d.png" alt="js"></p><a id="more"></a><h1 id="什么函数是纯"><a href="#什么函数是纯" class="headerlink" title="什么函数是纯"></a>什么函数是纯</h1><p>纯函数的定义是：</p><ul><li><p>1、如果函数的调用参数相同，则永远返回相同的结果。它不依赖于程序执行期间函数外部任何状态或数据的变化，必须只依赖于其输入参数。</p></li><li><p>2、该函数不会产生任何可观察的副作用，例如网络请求，输入和输出设备或数据突变（mutation）。</p></li></ul><p>这就是纯的函数。 如果一个函数符合上述 2 个要求，它就是纯函数。 你可能在过去甚至无意地情况下编写过纯函数。</p><p>在我们研究一个函数一个纯或不纯之前，让我们先讨论一下可怕的“副作用”。</p><h1 id="什么是可观察的副作用"><a href="#什么是可观察的副作用" class="headerlink" title="什么是可观察的副作用"></a>什么是可观察的副作用</h1><p>一个可以被观察的副作用是在函数内部与其外部的任意交互。这可能是在函数内修改外部的变量，或者在函数里调用另外一个函数等。</p><p>注: 如果纯函数调用纯函数，则不产生副作用依旧是纯函数。</p><p>副作用来自，但不限于：</p><ul><li><p>进行一个 HTTP 请求</p></li><li><p>Mutating data</p></li><li><p>输出数据到屏幕或者控制台</p></li><li><p>DOM 查询/操作</p></li><li><p>Math.random()</p></li><li><p>获取的当前时间</p></li></ul><p>副作用本身并不是毒药，某些时候往往是必需的。 但是，对于要保持纯粹的函数，它不能包含任何副作用。当然，并非所有函数都需要是纯函数。 我将在稍后讨论这个情况。</p><p>不过首先，让我们来看一些纯的和不纯的函数对比的例子……</p><h1 id="纯函数"><a href="#纯函数" class="headerlink" title="纯函数"></a>纯函数</h1><p>以下是一个计算产品税后价格（英国税率是20%）的纯函数的例子：<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">priceAfterTax</span><span class="params">(productPrice)</span> </span>&#123; <span class="keyword">return</span> (productPrice * <span class="number">0.20</span>) + productPrice;&#125;</span><br></pre></td></tr></table></figure></p><p>它符合我们所说的两条纯函数的定义。<code>不依赖于任何外部输入，不改变任何外部数据、没有副作用</code>。</p><p>即使你用同样的输入运行运行这个函数 100,000,000 次它依旧产生同样的结果。</p><h1 id="非纯函数"><a href="#非纯函数" class="headerlink" title="非纯函数"></a>非纯函数</h1><p>我们已经看了纯函数的例子，现在一起来看一个非纯函数（Impure function）的 JavaScript 例子:<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var tax = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">function <span class="title">calculateTax</span><span class="params">(productPrice)</span> </span>&#123; <span class="keyword">return</span> (productPrice * (tax/<span class="number">100</span>)) + productPrice;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>暂停片刻，看看你是否能看出为什么这个函数不纯。</p><p>其中函数的计算结果取决于外部 tax 变量，而纯函数不能依赖外部变量。它没有满足定义中的第一个要求，因此这个函数是不纯的。</p><h1 id="为什么说纯函数在-JavaScript-很重要"><a href="#为什么说纯函数在-JavaScript-很重要" class="headerlink" title="为什么说纯函数在 JavaScript 很重要"></a>为什么说纯函数在 JavaScript 很重要</h1><p>纯函数在函数式编程中被大量使用。而且诸如 ReactJS 和 Redux 等优质的库都需要使用纯函数。</p><p>不过，纯函数也可以用在平常的 JavaScript 开发中使用，不一定要限死在某个编程范例中。 你可以混合纯的和不纯的函数，这完全没问题。</p><p>并非所有函数都需要是纯的。 例如，操作 DOM 的按钮按下的事件处理程序就不适合纯函数。 不过，这种事件处理函数可以调用其他纯函数来处理，以此减少项目中不纯函数的数量。</p><h1 id="可测试性和重构"><a href="#可测试性和重构" class="headerlink" title="可测试性和重构"></a>可测试性和重构</h1><p>另一个使用纯函数的原因是测试以及重构。</p><p>使用纯函数的一个主要好处是它们可以直接测。 如果传入相同的参数，它们将始终产生相同的结果。</p><p>同时纯函数还使得维护和重构代码变得更加容易。你可以放心地重构一个纯函数，不必操心没注意到的副作用搞乱了整个应用而导致终调试地狱。（译注：如果项目中充斥着副作用，那么函数/模块之间的逻辑可能互相交织耦合，在后期新增逻辑时可能由于依赖复杂而难以重构，更常见的是开发为了应付需求而不断的引入新的副作用到原本的逻辑上从而导致代码变得越来越糟糕。）</p><p><code>正确地使用纯函数可以产生更加高质量的代码。并且也是一种更加干净的编码方式。</code></p><p>此外，纯函数不不是 JavaScript 的专利。想要了解更多内容可以参见 <a href="https://en.wikipedia.org/wiki/Pure_function" target="_blank" rel="noopener">Wiki</a>。同时也推荐阅读 <a href="https://drboolean.gitbooks.io/mostly-adequate-guide/ch3.html" target="_blank" rel="noopener">开发建议手册</a> 以及 <a href="https://toddmotto.com/pure-versus-impure-functions" target="_blank" rel="noopener">纯函数 vs. 非纯函数</a>.</p><p>原文链接： medium.com</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当我第一次听到 “纯函数 (Pure Function)” 这个术语的时候我很疑惑。常规的函数做错了什么？为什么要变纯？ 为什么我需要纯的函数？&lt;/p&gt;
&lt;p&gt;除非你已经知道什么是纯函数，否则你可能会问同样的疑惑。不过这个概念其实很简单。可以花点时间一起来看以下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/js_d.png&quot; alt=&quot;js&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="https://duanruilong.github.io/categories/Javascript/"/>
    
    
      <category term="Javascript" scheme="https://duanruilong.github.io/tags/Javascript/"/>
    
      <category term="编程" scheme="https://duanruilong.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>在PHP里很好的使用ImageMagick---convert篇</title>
    <link href="https://duanruilong.github.io/2018/09/18/%E5%9C%A8PHP%E9%87%8C%E5%BE%88%E5%A5%BD%E7%9A%84%E4%BD%BF%E7%94%A8ImageMagick-convert%E7%AF%87/"/>
    <id>https://duanruilong.github.io/2018/09/18/在PHP里很好的使用ImageMagick-convert篇/</id>
    <published>2018-09-17T16:15:54.000Z</published>
    <updated>2018-09-24T17:01:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>ImageMagick 包括一组命令行工具来操作图片，之前的ImageMagick实现base64图片的逻辑在服务器端可能会造成溢出的事故，所以在接下的文章里会介绍另外一种好的实现方式就是—-convert命令。使用命令格式的形式去生成图片和大小的裁剪数据格式的转换。</p><p><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/php.jpg" alt="PHP"></p><a id="more"></a><h1 id="基本命令与格式"><a href="#基本命令与格式" class="headerlink" title="基本命令与格式"></a>基本命令与格式</h1><h2 id="1、基本命令"><a href="#1、基本命令" class="headerlink" title="1、基本命令"></a>1、基本命令</h2><ul><li><code>magick:</code> 创建、编辑图像，转换图像格式，以及调整图像大小、模糊、裁切、除去杂点、抖动 ( dither )、绘图、翻转、合并、重新采样等。</li><li><code>convert:</code> 等同于 magick 命令。</li><li><code>identify:</code> 输出一个或多个图像文件的格式和特征信息，如分辨率、大小、尺寸、色彩空间等。</li><li><code>mogrify:</code> 与 magick 功能一样，不过不需要指定输出文件，自动覆盖原始图像文件。</li><li><code>composite:</code> 将一个图片或多个图片组合成新图片。</li><li><p><code>montage:</code> 组合多个独立的图像来创建合成图像。每个图像都可以用边框，透明度等特性进行装饰。</p></li><li><p><code>compare:</code> 从数学和视觉角度比较源图像与重建图像之间的差异。</p></li><li><code>display:</code>在任何 X server 上显示一个图像或图像序列。</li><li><code>animate:</code> 在任何 X server 上显示图像序列。</li><li><code>import:</code> 保存 X server 上的任何可见窗口并把它作为图像文件输出。可以捕捉单个窗口，整个屏幕或屏幕的任意矩形部分。</li><li><code>conjure:</code>解释并执行 MSL ( Magick Scripting Language ) 写的脚本。</li><li><code>stream:</code> 一个轻量级工具，用于将图像或部分图像的一个或多个像素组件流式传输到存储设备。在处理大图像或原始像素组件时很有用。</li></ul><h2 id="2、命令格式"><a href="#2、命令格式" class="headerlink" title="2、命令格式"></a>2、命令格式</h2><p>基本命令的使用，遵循 Unix 风格的标准格式，例如  <code>command [options] input_image output_image</code></p><blockquote><p>将一张宽高 300x300 的图片 goods.png 转换成 200x200 的goods.jpg，可以这样用</p></blockquote><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert -resize <span class="number">200</span>x200 goods.png goods.jpg</span><br></pre></td></tr></table></figure><hr><h1 id="开始绘制生成图片"><a href="#开始绘制生成图片" class="headerlink" title="开始绘制生成图片"></a>开始绘制生成图片</h1><h2 id="一些前期参数"><a href="#一些前期参数" class="headerlink" title="一些前期参数"></a>一些前期参数</h2><h3 id="1、入参"><a href="#1、入参" class="headerlink" title="1、入参"></a>1、入参</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$item_img='https://img.alicdn.com/bao/uploaded/i1/1750208593/TB1rgM3hhtnkeRjSZSgXXXAuXXa_!!0-item_pic.jpg';</span><br><span class="line">$item_title='测试字体';</span><br><span class="line">$shop_title='测试店铺';</span><br><span class="line">$shop_img='http://q.aiyongbao.com/item/web/images/qap_img/mobile/userAvatar.png';</span><br><span class="line">$qr_img='https://img.alicdn.com/tfscom/TB1uJDStYZnBKNjSZFKwu3GOVXa.png';</span><br><span class="line">$numid_share='0000000';</span><br><span class="line">$qr_title='长按识别二维码';</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对宝贝标题裁剪</span></span><br><span class="line">$drawtitone=mb_substr($item_title,0,13, 'utf-8');</span><br><span class="line">$drawtittow=mb_substr($item_title,13,13, 'utf-8');</span><br><span class="line">$drawtitthree=mb_substr($item_title,26,13, 'utf-8');</span><br><span class="line">$time_date = time(); <span class="comment">// 时间戳</span></span><br><span class="line">$workDir = '/data/tmp/'.$numid_share.'_con'.$time_date; // 目标路径----&gt;指定一个文件夹保存生成图片过程里的图片</span><br></pre></td></tr></table></figure><h3 id="2、先下载素材文件"><a href="#2、先下载素材文件" class="headerlink" title="2、先下载素材文件"></a>2、先下载素材文件</h3><p>我们这里需要一个拼接图片的链接，所以先下载到之前的创建的文件夹下，因为这些素材图片只是为了最后的拼接，最后可以完全删除。<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$item_img_down = $workDir<span class="number">.'</span>/itemimage.jpg';</span><br><span class="line">$shop_img_down = $workDir<span class="number">.'</span>/shopimage.jpg';</span><br><span class="line">$qr_img_down = $workDir<span class="number">.'</span>/qrimage.jpg';</span><br><span class="line"><span class="comment">// 下载宝贝主图</span></span><br><span class="line">\NetworkUtils::curlDownload($item_img, $item_img_down);</span><br><span class="line"><span class="comment">// 下载店铺图片</span></span><br><span class="line">\NetworkUtils::curlDownload($shop_img, $shop_img_down);</span><br><span class="line"><span class="comment">// 下载二维码</span></span><br><span class="line">\NetworkUtils::curlDownload($qr_img, $qr_img_down);</span><br></pre></td></tr></table></figure></p><p><code>\NetworkUtils::curlDownload($item_img, $item_img_down);</code> 下载<code>$item_img</code>保存在目标路径文件夹下的<code>$workDir.&#39;/itemimage.jpg&#39;</code>路径。</p><h3 id="3、指定字体和颜色"><a href="#3、指定字体和颜色" class="headerlink" title="3、指定字体和颜色"></a>3、指定字体和颜色</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$fontFamily = '/usr/share/fonts/chinese/msyh.ttf';</span><br><span class="line">$fontColor = '#333333';</span><br><span class="line">$fontColor_shoptitle = '#999999';</span><br><span class="line">$fontColor_qrtitlt = '#666666';</span><br></pre></td></tr></table></figure><h3 id="4、创建一个底图"><a href="#4、创建一个底图" class="headerlink" title="4、创建一个底图"></a>4、创建一个底图</h3><p>创建一个<code>750x1046</code>白色的底图，我们可以在上面绘制文字</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个底图(并且加上一些文字)</span></span><br><span class="line"></span><br><span class="line">$back_img=$workDir<span class="number">.'</span>/bg.jpg'; <span class="comment">//要生成的图片的路径----&gt;可以在服务器端看到</span></span><br><span class="line">$back_cmds=<span class="string">"convert 'xc:[750x1046!]' -background white -font &#123;$fontFamily&#125; -draw 'text 580,994 \"&#123;$qr_title&#125;\"' -fill \"&#123;$fontColor_qrtitlt&#125;\" </span></span><br><span class="line"><span class="string">            -pointsize 20 -draw 'text 114,990 \"&#123;$shop_title&#125;\"' -font &#123;$fontFamily&#125; -pointsize 22 -fill '#999999' &#123;$workDir&#125;/bg.jpg"</span>;</span><br><span class="line">$result_back_cmds = \SystemCommon::runningCmd($back_cmds);</span><br></pre></td></tr></table></figure><blockquote><p>这里需要注意一下文字的绘制命令顺序，否则会出现没有生效的问题。<br><code>-font {$fontFamily} -draw &#39;text 580,994 \&quot;{$qr_title}\&quot;&#39; -fill \&quot;{$fontColor_qrtitlt}\&quot; -pointsize 20</code></p></blockquote><p>解释一下：</p><ul><li><code>xc:[100x40!]</code>: 设置画布大小的一种简写方式，方括号里写入画布宽高，注意要加 !</li><li><code>-fill &#39;rgba(0, 0, 0, 0)&#39;</code>：设置了文本的填充颜色</li><li><code>text 114,990</code>: 对文字进行定位</li><li><code>-font</code>：指定字体</li><li><code>-pointsize</code>：指定文本的字体大小</li><li><code>-draw</code>：绘图选项，text 声明绘制文本， 0,0 声明文本距离图片左上角的偏移值，绘制文本的格式为 text x,y string，当然还可以绘制其他类型，诸如圆 ( circle )、折线 ( polyline )</li></ul><p>继续添加文字：</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$back_img_shoptitle=$workDir<span class="number">.'</span>/btitle.jpg'; <span class="comment">//要生成的图片的路径</span></span><br><span class="line">$back_cmds_shoptitle=<span class="string">"convert -draw 'text 40,820 \"&#123;$drawtitone&#125;\"' -font &#123;$fontFamily&#125; -pointsize 32 -fill \"&#123;$fontColor&#125;\" -draw 'text 40,866 \"&#123;$drawtittow&#125;\"' </span></span><br><span class="line"><span class="string">                    -font &#123;$fontFamily&#125; -pointsize 32 -fill \"&#123;$fontColor&#125;\" -draw 'text 40,912 \"&#123;$drawtitthree&#125;\"' -font &#123;$fontFamily&#125; -pointsize 32 -fill \"&#123;$fontColor&#125;\"  </span></span><br><span class="line"><span class="string">                    &#123;$back_img&#125; &#123;$workDir&#125;/btitle.jpg"</span>;</span><br><span class="line">$result_back_cmds_shoptitle = \SystemCommon::runningCmd($back_cmds_shoptitle);</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/php/php_convert_6.png" alt="convert"></p><h3 id="5、拼接图片"><a href="#5、拼接图片" class="headerlink" title="5、拼接图片"></a>5、拼接图片</h3><p>现在就可以在之前得到的图片上拼接所需要的图片了</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 在底图上合并商品主图</span></span><br><span class="line">$back_img_itemimg='/data/tmp/' . md5(microtime(true)).'.jpg';  //要生成的图片的路径</span><br><span class="line">$geometryX = <span class="string">"+"</span> . <span class="number">0</span>; <span class="comment">// 定位</span></span><br><span class="line">$geometryY = <span class="string">"+"</span> . <span class="number">0</span>; <span class="comment">// 定位</span></span><br><span class="line">$customPicPos = <span class="string">"northwest"</span>;</span><br><span class="line">$back_cmds_itemimg = <span class="string">"convert &#123;$back_img_shoptitle&#125; &#123;$workDir&#125;/item_img_mag.jpg -gravity &#123;$customPicPos&#125; -geometry &#123;$geometryX&#125;&#123;$geometryY&#125; </span></span><br><span class="line"><span class="string">                    -compose over -composite -antialias -set colorspace sRGB -colorspace sRGB &#123;$workDir&#125;/result.jpg"</span>;</span><br><span class="line">$result_back_cmds_itemimg = \SystemCommon::runningCmd($back_cmds_itemimg);</span><br></pre></td></tr></table></figure><p>解释一下：</p><ul><li><code>-geometry</code>: 设置文本在图片里的排列方式 ( 类似 CSS 里的 align-items + justify-content )，center 表示水平垂直都居中，其他值还可以是：NorthWest, North, NorthEast, West, East, SouthWest, South, SouthEast，不记大小写</li><li><code>composite</code>: 将一个图片或多个图片组合成新图片。</li></ul><p>这里是把<code>{$workDir}/item_img_mag.jpg</code>路径的图片绘制到之前绘制文字的图片上<code>$back_img_shoptitle</code>，最终得到的图片保存路径是在<code>{$workDir}/result.jpg</code></p><p>让我们继续操作图片</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 合并二维码 </span></span><br><span class="line">$geometryXshop = <span class="string">"+"</span> . <span class="number">40</span>;</span><br><span class="line">$geometryYshop = <span class="string">"+"</span> . <span class="number">950</span>;</span><br><span class="line">$back_cmds_shopimg = <span class="string">"convert &#123;$workDir&#125;/result.jpg &#123;$workDir&#125;/shop_img_mag.jpg -gravity &#123;$customPicPos&#125; -geometry &#123;$geometryXshop&#125;&#123;$geometryYshop&#125; -compose over -composite -antialias -set colorspace sRGB -colorspace sRGB &#123;$workDir&#125;/result1.jpg"</span>;</span><br><span class="line">$result_back_cmds_shopimg = \SystemCommon::runningCmd($back_cmds_shopimg);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并店铺图标</span></span><br><span class="line">$geometryXqr = <span class="string">"+"</span> . <span class="number">520</span>;</span><br><span class="line">$geometryYqr = <span class="string">"+"</span> . <span class="number">784</span>;</span><br><span class="line">$back_cmds_qrimg = <span class="string">"convert &#123;$workDir&#125;/result1.jpg &#123;$workDir&#125;/qr_img_mag.jpg -gravity &#123;$customPicPos&#125; -geometry &#123;$geometryXqr&#125;&#123;$geometryYqr&#125; -compose over -composite -antialias -set colorspace sRGB -colorspace sRGB &#123;$workDir&#125;/result2.jpg"</span>;</span><br><span class="line">$result_back_cmds_qrimg = \SystemCommon::runningCmd($back_cmds_qrimg);</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/php/php_convert_7.png" alt="convert"></p><p>发现图片并不是我们预期的效果，拼接我们也设置了图片的大小，但是没有起作用，尝试过不同的方案后决定在拼接之前把图片统一放大为需要拼接的尺寸来操作。</p><h3 id="6、放大拼接图片尺寸"><a href="#6、放大拼接图片尺寸" class="headerlink" title="6、放大拼接图片尺寸"></a>6、放大拼接图片尺寸</h3><p>需要对多拼接的图片都进行操作</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 看来需要先放大主图</span></span><br><span class="line">$item_img_m=<span class="string">"convert -resize '750x766!' &#123;$item_img_down&#125; &#123;$workDir&#125;/item_img_mag.jpg"</span>;</span><br><span class="line">$item_img_mag = \SystemCommon::runningCmd($item_img_m);  </span><br><span class="line"><span class="comment">// 看来需要先放大二维码</span></span><br><span class="line">$shop_img_m=<span class="string">"convert -resize 64x64 &#123;$shop_img_down&#125; &#123;$workDir&#125;/shop_img_mag.jpg"</span>;</span><br><span class="line">$shop_img_mag = \SystemCommon::runningCmd($shop_img_m);  </span><br><span class="line"><span class="comment">// 看来需要先放大店铺图标</span></span><br><span class="line">$qr_img_m=<span class="string">"convert -resize 200x200 &#123;$qr_img_down&#125; &#123;$workDir&#125;/qr_img_mag.jpg"</span>;</span><br><span class="line">$qr_img_mag = \SystemCommon::runningCmd($qr_img_m);</span><br></pre></td></tr></table></figure><blockquote><p>-resize 延伸解读</p></blockquote><p> IamgeMagick 提供了几种符号来定义缩放</p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">convert -resize '150x100!' goods.jpg thumbnail.jpg</span><br><span class="line"></span><br><span class="line">convert -resize '150x100&gt;' goods.jpg thumbnail.jpg</span><br><span class="line"></span><br><span class="line">convert -resize '150x100&lt;' goods.jpg thumbnail.jpg</span><br></pre></td></tr></table></figure><ul><li><code>!</code>：不管图片宽高如何，都缩放成 150x100 这样的尺寸。</li><li><code>&gt;</code>：只有宽高均大于 150x100 的图片才缩放成该尺寸 ( 按比例取最大值 )，小于的图片不做处理。</li><li><code>&lt;</code>：与 &gt; 功能相反</li></ul><p>缩放对比</p><p><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/php/php_convert_1.png" alt="convert"></p><p>这样的结果也不是我们需要的<br><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/php/php_convert_4.png" alt="convert"></p><p>只有<code>convert -resize &#39;750x766!&#39; {$item_img_down} {$workDir}/item_img_mag.jpg</code>这样固定尺寸之后可以得到：</p><p><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/php/php_convert_5.png" alt="convert"></p><h3 id="7、图片转换为-base64格式"><a href="#7、图片转换为-base64格式" class="headerlink" title="7、图片转换为 base64格式"></a>7、图片转换为 base64格式</h3><p>我们最后同样的以base64格式输出给前端</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$<span class="built_in">stdout</span> = trim($result_back_cmds_qrimg[<span class="string">"stdout"</span>]);</span><br><span class="line">$Return = <span class="built_in">array</span>();</span><br><span class="line"><span class="keyword">if</span> (empty($<span class="built_in">stdout</span>) || strpos($result_back_cmds_qrimg[<span class="string">"stderr"</span>], <span class="string">"identify"</span>) != <span class="literal">false</span>) &#123;  <span class="comment">// runningCmd执行成功</span></span><br><span class="line">    $dest_img = $workDir<span class="number">.'</span>/result2.jpg';</span><br><span class="line">    <span class="comment">// /*图片转换为 base64格式编码*/</span></span><br><span class="line">    $base64_image = '';</span><br><span class="line">    $image_info = getimagesize($dest_img);</span><br><span class="line">    $image_data = fread(fopen($dest_img, <span class="string">'r'</span>), filesize($dest_img));</span><br><span class="line">    $base64_image = 'data:' . $image_info['mime'] . ';base64,' . chunk_split(base64_encode($image_data));</span><br><span class="line"></span><br><span class="line">    $Return['data']=$base64_image;</span><br><span class="line">    $Return['dest_img']=$dest_img;</span><br><span class="line">    $Return['type']='success';</span><br><span class="line">    $Return['msg']=1;</span><br><span class="line">    <span class="keyword">return</span> $Return;</span><br><span class="line">&#125;</span><br><span class="line">$Return['data']='';</span><br><span class="line">$Return['msg']=2;</span><br><span class="line"><span class="keyword">return</span> $Return;</span><br></pre></td></tr></table></figure><p><code>$workDir.&#39;/result2.jpg</code>是我们最终的拼接图片，至于文件夹下的其他图片，可以选择删除。我们只要得到结果就好了。</p><p>（小姐姐拼接图）<br><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/php/php_convert_8.png" alt="convert"></p><p>这次<code>convert命令</code>的介绍是以解读整个方法的形式，对拼接的开始进行到结尾生成最终的图片，希望对大家有力所能及的帮助。</p><p>欢迎光顾个人<a href="https://duanruilong.github.io/blog">Blog</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ImageMagick 包括一组命令行工具来操作图片，之前的ImageMagick实现base64图片的逻辑在服务器端可能会造成溢出的事故，所以在接下的文章里会介绍另外一种好的实现方式就是—-convert命令。使用命令格式的形式去生成图片和大小的裁剪数据格式的转换。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/php.jpg&quot; alt=&quot;PHP&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="后端" scheme="https://duanruilong.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="编程" scheme="https://duanruilong.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="PHP" scheme="https://duanruilong.github.io/tags/PHP/"/>
    
      <category term="后端" scheme="https://duanruilong.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>在PHP里使用ImageMagick生成base64图片</title>
    <link href="https://duanruilong.github.io/2018/09/05/%E5%9C%A8PHP%E9%87%8C%E5%BE%88%E5%A5%BD%E7%9A%84%E4%BD%BF%E7%94%A8ImageMagick/"/>
    <id>https://duanruilong.github.io/2018/09/05/在PHP里很好的使用ImageMagick/</id>
    <published>2018-09-04T16:08:37.000Z</published>
    <updated>2018-09-12T17:40:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近的PHP项目中，需要用到画图和图片拼接效果，这里是一些开发过程里用到的一些点还有就是一些踩过的坑。通过ImageMagick生成base64图片格式，为前端所使用。</p><p><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/php.jpg" alt="PHP"></p><a id="more"></a><blockquote><p>一些需要的知识点</p></blockquote><h1 id="PHP将图片转base64编码以及base64图片转换为图片并保存代码"><a href="#PHP将图片转base64编码以及base64图片转换为图片并保存代码" class="headerlink" title="PHP将图片转base64编码以及base64图片转换为图片并保存代码"></a>PHP将图片转base64编码以及base64图片转换为图片并保存代码</h1><h2 id="图片转base64编码"><a href="#图片转base64编码" class="headerlink" title="图片转base64编码"></a>图片转base64编码</h2><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*图片转换为 base64格式编码*/</span></span><br><span class="line">$img = 'uploads/about.png';</span><br><span class="line">$base64_img = base64EncodeImage($img);</span><br><span class="line">echo '&lt;img src="' . $base64_img . '" /&gt;';</span><br><span class="line"> </span><br><span class="line"><span class="function">function <span class="title">base64EncodeImage</span> <span class="params">($image_file)</span> </span>&#123;</span><br><span class="line">    $base64_image = '';</span><br><span class="line">    $image_info = getimagesize($image_file);</span><br><span class="line">    $image_data = fread(fopen($image_file, <span class="string">'r'</span>), filesize($image_file));</span><br><span class="line">    $base64_image = 'data:' . $image_info['mime'] . ';base64,' . chunk_split(base64_encode($image_data));</span><br><span class="line">    <span class="keyword">return</span> $base64_image;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="base64图片转换为图片并保存"><a href="#base64图片转换为图片并保存" class="headerlink" title="base64图片转换为图片并保存"></a>base64图片转换为图片并保存</h2><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*  base64格式编码转换为图片并保存对应文件夹 */</span></span><br><span class="line"><span class="function">function <span class="title">base64_image_content</span><span class="params">($base64_image_content,$path)</span></span>&#123;</span><br><span class="line">    <span class="comment">//匹配出图片的格式</span></span><br><span class="line">    if (preg_match('/^(data:\s*image\/(\w+);base64,)/', $base64_image_content, $result))&#123;</span><br><span class="line">        $type = $result[<span class="number">2</span>];</span><br><span class="line">        $new_file = $path."/".date('Ymd',time())."/";</span><br><span class="line">        <span class="keyword">if</span>(!file_exists($new_file))&#123;</span><br><span class="line">            <span class="comment">//检查是否有该文件夹，如果没有就创建，并给予最高权限</span></span><br><span class="line">            mkdir($new_file, <span class="number">0700</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        $new_file = $new_file.time().<span class="string">".&#123;$type&#125;"</span>;</span><br><span class="line">        if (file_put_contents($new_file, base64_decode(str_replace($result[1], '', $base64_image_content))))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'/'</span>.$new_file;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">echo <span class="title">base64_image_content</span><span class="params">($base64_img,<span class="string">"uploads/"</span>)</span></span>;</span><br></pre></td></tr></table></figure><h1 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h1><p>Base64是一种用64个字符来表示任意二进制数据的方法。<br>Base64的原理很简单，首先，准备一个包含64个字符的数组：</p><p><code>[&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, ... &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, ... &#39;0&#39;, &#39;1&#39;, ... &#39;+&#39;, &#39;/&#39;]</code><br>然后，对二进制数据进行处理，每3个字节一组，一共是3x8=24bit，划为4组，每组正好6个bit</p><p>如果要编码的二进制数据不是3的倍数，最后会剩下1个或2个字节怎么办？Base64用\x00字节在末尾补足后，再在编码的末尾加上1个或2个=号，表示补了多少字节，解码的时候，会自动去掉。</p><p>使用jpg图片体积要比png小<br>使用PHP的Imagick类进行图像的操作</p><h1 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h1><h2 id="1-创建一个底图-宽750px，高1046px，白色背景，格式为jpg的图片"><a href="#1-创建一个底图-宽750px，高1046px，白色背景，格式为jpg的图片" class="headerlink" title="(1).创建一个底图,宽750px，高1046px，白色背景，格式为jpg的图片"></a>(1).创建一个底图,宽750px，高1046px，白色背景，格式为jpg的图片</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化一个画板</span></span><br><span class="line">        $img =<span class="keyword">new</span> Imagick();</span><br><span class="line">        $img-&gt;newImage(750,1046,'white','jpg') ;</span><br></pre></td></tr></table></figure><h2 id="2-在底图上添加需求图片"><a href="#2-在底图上添加需求图片" class="headerlink" title="(2).在底图上添加需求图片"></a>(2).在底图上添加需求图片</h2><p>前提是我们已经知道了需要合并的图片链接地址<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">$item_img='https://img.alicdn.com/bao/uploaded/i1/1750208593/TB1rgM3hhtnkeRjSZSgXXXAuXXa_!!0-item_pic.jpg'</span><br><span class="line"></span><br><span class="line">第一步：实例化图片</span><br><span class="line">$imgtwo = <span class="keyword">new</span> Imagick($item_img);</span><br><span class="line"></span><br><span class="line">第二步：设置添加图片的大小</span><br><span class="line">$imgtwo-&gt;resizeImage(<span class="number">750</span>,<span class="number">764</span>,Imagick::FILTER_LANCZOS,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">关于resizeImage参数说明</span><br><span class="line">    <span class="keyword">bool</span> Imagick::resizeImage ( <span class="keyword">int</span> $columns , <span class="keyword">int</span> $rows , <span class="keyword">int</span> $filter , <span class="keyword">float</span> $blur [, <span class="keyword">bool</span> $bestfit = <span class="literal">false</span> ] )</span><br><span class="line"></span><br><span class="line">参数：</span><br><span class="line">  ● columns 图片的宽度</span><br><span class="line">  ● rows 图片高度</span><br><span class="line">  ● filter 过滤器，用于过滤图片，有高斯filte根据情况而定</span><br><span class="line">  ● blur blur=<span class="number">1</span> 为虚化， blur =<span class="number">-1</span> 为锐化</span><br><span class="line"></span><br><span class="line">第三步：与底图合并</span><br><span class="line">$img-&gt;compositeImage($imgtwo,$imgtwo-&gt;getImageCompose(),<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">使用compositeImage();</span><br><span class="line">    <span class="keyword">bool</span> Imagick::compositeImage ( Imagick $composite_object , <span class="keyword">int</span> $composite , <span class="keyword">int</span> $x , <span class="keyword">int</span> $y [, <span class="keyword">int</span> $channel = Imagick::CHANNEL_ALL ] )</span><br><span class="line"></span><br><span class="line">参数：</span><br><span class="line">  ● composite_object ：用于合并的图片的Imagick对象</span><br><span class="line">  ● composite：合并操作，定义操作常量。 具体请查看 合并操作常量列表</span><br><span class="line">  ● x：相对图像顶点左上位置（<span class="number">0</span>,<span class="number">0</span>）的横坐标</span><br><span class="line">  ● y：相对图像顶点左上位置（<span class="number">0</span>,<span class="number">0</span>）的纵坐标</span><br><span class="line">  ● channel：通过传入一个通道常量，来开启通道模式。为了支持多个通道，可以通过二进制运算的操作来合并多个通道常量。</span><br><span class="line"></span><br><span class="line">到这里就可以得到一个合并的图片了</span><br><span class="line"><span class="number">1</span>、加一个header信息，可以直接在网页上查看图片</span><br><span class="line">    header(<span class="string">"Content-Type: img/png"</span>);</span><br><span class="line">    echo $img;</span><br><span class="line"><span class="number">2</span>、可以把图片在指定目录中生成，在指定目录下生成为img.png</span><br><span class="line">$file=<span class="string">"./img.png"</span>;</span><br><span class="line">$img-&gt;writeImage($file);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">我这里是这样处理：</span><br><span class="line">    header ( 'Content-type: ' . strtolower ($img-&gt;getImageFormat ()) );</span><br><span class="line">    $type = strtolower($img-&gt;getImageFormat());</span><br><span class="line">    $dest_img='/data/tmp/' . md5(microtime(true)).'.'.$type;    //要生成的图片的路径，随机生成图片名称</span><br></pre></td></tr></table></figure></p><h2 id="3-图片上拼接文字"><a href="#3-图片上拼接文字" class="headerlink" title="(3).图片上拼接文字"></a>(3).图片上拼接文字</h2><p>写入文字以添加店铺文字为例，逐步完成文字的写入。<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$shop_title='测试店铺'；</span><br><span class="line"><span class="comment">// 添加店铺文字</span></span><br><span class="line">$drawQr = <span class="keyword">new</span> ImagickDraw(); <span class="comment">// 实例化ImagickDraw</span></span><br><span class="line">$drawQr -&gt; setFillColor(new ImagickPixel('#999999')); // 颜色</span><br><span class="line">$drawQr -&gt; setFontSize('24'); // 大小</span><br><span class="line">$drawQr -&gt; setFont('../../conf/Microsoftyahei.ttf'); // 字体</span><br><span class="line">$drawQr -&gt; setTextAlignment(Imagick::ALIGN_LEFT); <span class="comment">// 字体方向</span></span><br><span class="line"><span class="comment">// ps： Imagick::ALIGN_RIGHT 朝右边    Imagick::ALIGN_LEFT 左边   Imagick::ALIGN_CENTER 中间</span></span><br><span class="line">$drawQr -&gt; setTextEncoding(<span class="string">"utf-8"</span>); <span class="comment">// 字体编码</span></span><br><span class="line">$drawQr -&gt; annotation(<span class="number">114</span>,<span class="number">990</span>,$shop_title); <span class="comment">// 画出文字</span></span><br><span class="line">$img -&gt; drawImage($drawQr);  <span class="comment">// 画在地板上</span></span><br></pre></td></tr></table></figure></p><p>详细解读：</p><ul><li>1、实例化ImagickDraw类：<br> <code>$drawQr = new ImagickDraw();</code> </li><li>2、设置字体颜色<br><code>$drawQr -&gt; setFillColor(new ImagickPixel(&#39;#999999&#39;));</code></li><li>3、设置字体大小<br><code>$drawQr -&gt; setFontSize(&#39;24&#39;);</code></li><li>4、设置字体格式<br><code>$drawQr -&gt; setFont(&#39;../../conf/Microsoftyahei.ttf&#39;);</code></li><li>5、设置字体方向<br><code>$draw-&gt;setTextAlignment(Imagick::ALIGN_RIGHT);</code><blockquote><p>ps： Imagick::ALIGN_RIGHT 朝右边    Imagick::ALIGN_LEFT 左边   Imagick::ALIGN_CENTER 中间</p></blockquote></li><li>6、设置字体编码<br><code>$drawQr -&gt; setTextEncoding(&quot;utf-8&quot;);</code></li><li>7、画出文字<br><code>$drawQr -&gt; annotation(114,990,$shop_title);</code></li><li>8、在底图上写入字体<br><code>$img -&gt; drawImage($drawQr);</code></li></ul><p>写入文字这个地方的一些坑：</p><p>没有设置字体格式时，中文字会解析错误<br>（英文没有问题）<br><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/php/php_megick_1.png" alt="PHP"></p><p>（汉字解析失败）</p><p><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/php/php_megick_2.png" alt="PHP"></p><p>(设置字体格式正常显示)</p><p><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/php/php_megick_3.png" alt="PHP"></p><h2 id="4-图片base64导出"><a href="#4-图片base64导出" class="headerlink" title="(4).图片base64导出"></a>(4).图片base64导出</h2><p>最终得到的图片我们组要以base64的格式传递给前端，进行以下操作，把我们最后拼接的到的图片base64转换输出。<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$dest_img='/data/tmp/' . md5(microtime(true)).'.'.$type; //要生成的图片的路径</span><br><span class="line">$Return = <span class="built_in">array</span>();</span><br><span class="line"><span class="comment">// *图片转换为 base64格式编码*</span></span><br><span class="line">$base64_image = '';</span><br><span class="line">$image_info = getimagesize($dest_img);</span><br><span class="line">$image_data = fread(fopen($dest_img, <span class="string">'r'</span>), filesize($dest_img));</span><br><span class="line">$base64_image = 'data:' . $image_info['mime'] . ';base64,' . chunk_split(base64_encode($image_data));</span><br><span class="line">$Return['data']=$base64_image;</span><br><span class="line"><span class="keyword">return</span>  $Return;</span><br></pre></td></tr></table></figure></p><p><code>$base64_image</code>就是base64格式的图片。</p><p>需要注意的是前端得到的额base64数据里包含有<code>&#39;\r\n&#39;</code>回车字符，需要特殊处理才可以正确显示图片。</p><p><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/php/php_megick_4.png" alt="PHP"></p><p>（最后得到的合并图片）</p><p><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/php/php_megick_5.png" alt="PHP"></p><p>(调整拼接图片大小得到不同的图片)<br><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/php/php_megick_6.png" alt="PHP"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近的PHP项目中，需要用到画图和图片拼接效果，这里是一些开发过程里用到的一些点还有就是一些踩过的坑。通过ImageMagick生成base64图片格式，为前端所使用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/php.jpg&quot; alt=&quot;PHP&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="后端" scheme="https://duanruilong.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="编程" scheme="https://duanruilong.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="PHP" scheme="https://duanruilong.github.io/tags/PHP/"/>
    
      <category term="后端" scheme="https://duanruilong.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>小程序之旅(七)</title>
    <link href="https://duanruilong.github.io/2018/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8B%E6%97%85-%E4%B8%83/"/>
    <id>https://duanruilong.github.io/2018/08/08/小程序之旅-七/</id>
    <published>2018-08-08T15:56:51.000Z</published>
    <updated>2018-08-09T17:26:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>小程序是一种新的开放能力，开发者可以快速地开发一个小程序。小程序可以在微信内被便捷地获取和传播，同时具有出色的使用体验。这是关于小程序的动态加载一个列表页小栗子。</p><p><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/wechat_d.png" alt="微信小程序"></p><a id="more"></a><p>这里的列表布局方式，采用flex弹性布局实现，具体内容可以参考<a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">flex 阮一峰</a></p><h1 id="Num1"><a href="#Num1" class="headerlink" title="Num1"></a>Num1</h1><p>简单说一下布局，头部是一个title，下面是一个list，list是由一个一个的card组成，而对于card布局，主要是外部一个box，里面分左右img和内容。</p><p>list.wxml</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--pages/<span class="built_in">list</span>/<span class="built_in">list</span>.wxml--&gt;</span><br><span class="line">&lt;view <span class="class"><span class="keyword">class</span>="<span class="title">box</span>"&gt;</span></span><br><span class="line"><span class="class"> &lt;text class="list_header"&gt;每日一看&lt;/text&gt;</span></span><br><span class="line"><span class="class">  &lt;view class="list" wx:for="&#123;&#123;list&#125;&#125;"&gt;</span></span><br><span class="line"><span class="class">    &lt;view class='list_img'&gt;</span></span><br><span class="line"><span class="class">      &lt;image src="&#123;&#123;item.img&#125;&#125;" class='avatar'&gt;&lt;/image&gt;</span></span><br><span class="line"><span class="class">    &lt;/view&gt;</span></span><br><span class="line"><span class="class">    &lt;view class='list_main'&gt;</span></span><br><span class="line">      &lt;view class='list_title'&gt;&#123;&#123;item.title&#125;&#125;&lt;/view&gt;</span><br><span class="line">      &lt;view class='list_content'&gt;&#123;&#123;item.content&#125;&#125;&lt;/view&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><p>list.wxss<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* pages/list/list.wxss */</span></span><br><span class="line"><span class="comment">/*整个容器*/</span></span><br><span class="line">.box&#123;</span><br><span class="line">display: flex;</span><br><span class="line">flex-direction: column;<span class="comment">/*竖直排列*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*title文字*/</span></span><br><span class="line">.list_header&#123;</span><br><span class="line">font-size: <span class="number">32</span>rpx;</span><br><span class="line">font-weight: bold;</span><br><span class="line">color: #<span class="number">444</span>;</span><br><span class="line">padding:<span class="number">20</span>rpx;</span><br><span class="line">border-bottom: <span class="number">2</span>rpx solid <span class="meta">#ccc;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*列表项容器*/</span></span><br><span class="line">.<span class="built_in">list</span>&#123;</span><br><span class="line">display:flex;</span><br><span class="line">flex-direction: row;<span class="comment">/*横向排列*/</span></span><br><span class="line">align-content: center;</span><br><span class="line">border-bottom:<span class="number">1</span>rpx solid <span class="meta">#ccc;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*图片容器*/</span></span><br><span class="line">.list_img&#123;</span><br><span class="line">display: flex;</span><br><span class="line">align-content: center;</span><br><span class="line">padding:<span class="number">20</span>rpx <span class="number">10</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*图片*/</span></span><br><span class="line">.avatar&#123;</span><br><span class="line">width:<span class="number">130</span>rpx;</span><br><span class="line">height:<span class="number">130</span>rpx;</span><br><span class="line">border-radius: <span class="number">4</span>rpx;</span><br><span class="line">border: <span class="number">1</span>rpx solid #F2F2F2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*文字容器，包含标题和内容*/</span></span><br><span class="line">.list_main&#123;</span><br><span class="line">display: flex;</span><br><span class="line">flex-direction: column;<span class="comment">/*文字竖直排列*/</span></span><br><span class="line">align-content: center;</span><br><span class="line">padding:<span class="number">40</span>rpx <span class="number">20</span>rpx;</span><br><span class="line">overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line">.list_title&#123;</span><br><span class="line">font-size: <span class="number">28</span>rpx;</span><br><span class="line">color: #<span class="number">717171</span>;</span><br><span class="line">font-weight: bold;</span><br><span class="line">padding-bottom: <span class="number">10</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line">.list_content&#123;</span><br><span class="line">font-size: <span class="number">24</span>rpx;</span><br><span class="line">color: #<span class="number">999</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>list.js里的数据先写成假数据。<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pages/list/list.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面的初始数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  data: &#123;</span><br><span class="line">    <span class="built_in">list</span>:[&#123;</span><br><span class="line">      img: 'http://localhost:9999/image/a1.jpg',</span><br><span class="line">      title: '美丽的大海啊！',</span><br><span class="line">      content: '大海啊全是水，美丽的海景让人赏心悦目！海景壁纸请欣赏！'</span><br><span class="line">    &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        img: 'http://localhost:9999/image/a2.jpg',</span><br><span class="line">        title: '回不去的那叫从前',</span><br><span class="line">        content: '回不去的那叫从前，到不了的才是远方；不保留的那叫青春，不完美的才是人生。'</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        img: 'http://localhost:9999/image/a3.jpg',</span><br><span class="line">        title: '森林生存恐怖游戏',</span><br><span class="line">        content: '《森林》是一款PC平台开放世界生存恐怖游戏，游戏中玩家必须建造设施，探索世界，生存下去。《森林》将打造一个活生生的，气候多变，植被动态生长凋零，地下洞穴错综复杂的森林，等待玩家探索。'</span><br><span class="line">      &#125;,</span><br><span class="line">        ]</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></p><p>（也可以使用本地node服务）<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">var express = require('express');</span><br><span class="line">var fs = require('fs');</span><br><span class="line">var app = express();</span><br><span class="line"><span class="comment">//处理静态资源</span></span><br><span class="line">app.use(express.static('./'));</span><br><span class="line">app.get('/list', function (req, res) &#123;</span><br><span class="line">    res.send(&#123;</span><br><span class="line">        code: <span class="number">200</span>,</span><br><span class="line">        data: [&#123;</span><br><span class="line">                img: 'http://localhost:9999/image/a1.jpg',</span><br><span class="line">                title: '美丽的大海啊！',</span><br><span class="line">                content: '大海啊全是水，美丽的海景让人赏心悦目！海景壁纸请欣赏！'</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                img: 'http://localhost:9999/image/a2.jpg',</span><br><span class="line">                title: '回不去的那叫从前',</span><br><span class="line">                content: '回不去的那叫从前，到不了的才是远方；不保留的那叫青春，不完美的才是人生。'</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                img: 'http://localhost:9999/image/a3.jpg',</span><br><span class="line">                title: '森林生存恐怖游戏',</span><br><span class="line">                content: '《森林》是一款PC平台开放世界生存恐怖游戏，游戏中玩家必须建造设施，探索世界，生存下去。《森林》将打造一个活生生的，气候多变，植被动态生长凋零，地下洞穴错综复杂的森林，等待玩家探索。'</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">app.listen(<span class="number">9999</span>); <span class="comment">//监听端口</span></span><br></pre></td></tr></table></figure></p><h1 id="Num2"><a href="#Num2" class="headerlink" title="Num2"></a>Num2</h1><p>接下来是img在头部，下方是文字内容。</p><p>list.wxml</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--pages/listview/listview.wxml--&gt;</span><br><span class="line">&lt;view <span class="class"><span class="keyword">class</span>="<span class="title">box</span>"&gt;</span></span><br><span class="line"><span class="class"> &lt;text class="list_header"&gt;每日一看&lt;/text&gt;</span></span><br><span class="line"><span class="class">  &lt;view class="list" wx:for="&#123;&#123;list&#125;&#125;"&gt;</span></span><br><span class="line"><span class="class">    &lt;view class='list_img'&gt;</span></span><br><span class="line"><span class="class">      &lt;image src="&#123;&#123;item.img&#125;&#125;" class='avatar'&gt;&lt;/image&gt;</span></span><br><span class="line"><span class="class">    &lt;/view&gt;</span></span><br><span class="line"><span class="class">    &lt;view class='list_main'&gt;</span></span><br><span class="line">      &lt;view class='list_title'&gt;&#123;&#123;item.title&#125;&#125;&lt;/view&gt;</span><br><span class="line">      &lt;view class='list_content'&gt;&#123;&#123;item.address&#125;&#125;&lt;/view&gt;</span><br><span class="line">      &lt;view class='list_content'&gt;&#123;&#123;item.content&#125;&#125;&lt;/view&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><p>list.wxss<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* pages/listview/listview.wxss */</span></span><br><span class="line"><span class="comment">/*整个容器*/</span></span><br><span class="line">.box&#123;</span><br><span class="line">display: flex;</span><br><span class="line">background: <span class="meta">#ccc;</span></span><br><span class="line">flex-direction: column;<span class="comment">/*竖直排列*/</span></span><br><span class="line">align-content: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*列表项容器*/</span></span><br><span class="line">.<span class="built_in">list</span>&#123;</span><br><span class="line">background: #FFF;</span><br><span class="line">display:flex;</span><br><span class="line">flex-direction: column;<span class="comment">/*竖直排列*/</span></span><br><span class="line">align-content: center;</span><br><span class="line">width:<span class="number">90</span>%;</span><br><span class="line">margin:<span class="number">20</span>rpx <span class="keyword">auto</span>;<span class="comment">/*居中对齐*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*图片容器*/</span></span><br><span class="line">.list_img&#123;</span><br><span class="line">display: flex;</span><br><span class="line">align-content: center;</span><br><span class="line">width:<span class="number">100</span>%;</span><br><span class="line">padding:<span class="number">20</span>rpx <span class="number">0</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*图片*/</span></span><br><span class="line">.avatar&#123;</span><br><span class="line">width:<span class="number">100</span>%;</span><br><span class="line">height:<span class="number">400</span>rpx;</span><br><span class="line">border-radius: <span class="number">4</span>rpx;</span><br><span class="line">border: <span class="number">1</span>rpx solid #F2F2F2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*文字容器，包含标题和内容*/</span></span><br><span class="line">.list_main&#123;</span><br><span class="line">display: flex;</span><br><span class="line">flex-direction: column;<span class="comment">/*文字竖直排列*/</span></span><br><span class="line">align-content: center;</span><br><span class="line">padding:<span class="number">20</span>rpx;</span><br><span class="line">overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line">.list_title&#123;</span><br><span class="line">font-size: <span class="number">28</span>rpx;</span><br><span class="line">color: #<span class="number">717171</span>;</span><br><span class="line">font-weight: bold;</span><br><span class="line">padding-bottom: <span class="number">10</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line">.list_address&#123;</span><br><span class="line">font-size: <span class="number">24</span>rpx;</span><br><span class="line">color: #<span class="number">717171</span>;</span><br><span class="line">font-weight: bold;</span><br><span class="line">padding-bottom: <span class="number">10</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line">.list_content&#123;</span><br><span class="line">font-size: <span class="number">24</span>rpx;</span><br><span class="line">color: #<span class="number">999</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>list.js里的数据先写成假数据。<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pages/list/list.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面的初始数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  data: &#123;</span><br><span class="line">    <span class="built_in">list</span>:[&#123;</span><br><span class="line">      img: 'http://localhost:9999/image/a1.jpg',</span><br><span class="line">      title: '美丽的大海啊！',</span><br><span class="line">      content: '大海啊全是水，美丽的海景让人赏心悦目！海景壁纸请欣赏！'</span><br><span class="line">    &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        img: 'http://localhost:9999/image/a2.jpg',</span><br><span class="line">        title: '回不去的那叫从前',</span><br><span class="line">        content: '回不去的那叫从前，到不了的才是远方；不保留的那叫青春，不完美的才是人生。'</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        img: 'http://localhost:9999/image/a3.jpg',</span><br><span class="line">        title: '森林生存恐怖游戏',</span><br><span class="line">        content: '《森林》是一款PC平台开放世界生存恐怖游戏，游戏中玩家必须建造设施，探索世界，生存下去。《森林》将打造一个活生生的，气候多变，植被动态生长凋零，地下洞穴错综复杂的森林，等待玩家探索。'</span><br><span class="line">      &#125;,</span><br><span class="line">        ]</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></p><p>（也可以使用本地node服务）<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">var express = require('express');</span><br><span class="line">var fs = require('fs');</span><br><span class="line">var app = express();</span><br><span class="line"><span class="comment">//处理静态资源</span></span><br><span class="line">app.use(express.static('./'));</span><br><span class="line">app.get('/list', function (req, res) &#123;</span><br><span class="line">    res.send(&#123;</span><br><span class="line">        code: <span class="number">200</span>,</span><br><span class="line">        data: [&#123;</span><br><span class="line">                img: 'http://localhost:9999/image/a1.jpg',</span><br><span class="line">                title: '美丽的大海啊！',</span><br><span class="line">                address: '1美丽的大海啊！',</span><br><span class="line">                content: '大海啊全是水，美丽的海景让人赏心悦目！海景壁纸请欣赏！'</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                img: 'http://localhost:9999/image/a2.jpg',</span><br><span class="line">                title: '回不去的那叫从前',</span><br><span class="line">                address: '1回不去的那叫从前',</span><br><span class="line">                content: '回不去的那叫从前，到不了的才是远方；不保留的那叫青春，不完美的才是人生。'</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                img: 'http://localhost:9999/image/a3.jpg',</span><br><span class="line">                title: '森林生存恐怖游戏',</span><br><span class="line">                address: '1森林生存恐怖游戏',</span><br><span class="line">                content: '《森林》是一款PC平台开放世界生存恐怖游戏，游戏中玩家必须建造设施，探索世界，生存下去。《森林》将打造一个活生生的，气候多变，植被动态生长凋零，地下洞穴错综复杂的森林，等待玩家探索。'</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">app.listen(<span class="number">9999</span>); <span class="comment">//监听端口</span></span><br></pre></td></tr></table></figure></p><h1 id="Num3"><a href="#Num3" class="headerlink" title="Num3"></a>Num3</h1><p>上面的样式都是很常见的列表页，我们最终的用户交互效果这样是很不友好的，那就在里面加入下拉刷新，底部加载更多，这样才符合用户的操作习惯。</p><p>主要点：<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">list</span>.json配置:</span><br><span class="line"></span><br><span class="line"><span class="string">"enablePullDownRefresh"</span>: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">需要捕获这两个事件：</span><br><span class="line"></span><br><span class="line">onReachBottom（滚动到底部事件）</span><br><span class="line">onPullDownRefresh（下拉刷新事件）</span><br></pre></td></tr></table></figure></p><p>本地服务：</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">var express = require('express');</span><br><span class="line">var fs = require('fs');</span><br><span class="line">var app = express();</span><br><span class="line"><span class="comment">//处理静态资源</span></span><br><span class="line">app.use(express.static('./'));</span><br><span class="line">app.get('/list/:num',function(req,res)&#123;</span><br><span class="line">var num = req.params.num;<span class="comment">//页码</span></span><br><span class="line">var arr = [];</span><br><span class="line">(function()&#123;</span><br><span class="line"><span class="keyword">for</span>(var i=(num*<span class="number">5</span><span class="number">-5</span>);i&lt;(num*<span class="number">5</span>);i++)&#123;</span><br><span class="line">var obj = &#123;id:i+1,img:'http://localhost:9999/image/1.jpg',title:'这是第'+(i+1)+'条数据',address:'韩国，济州岛',content:'据说半个亚洲的女生都想去权志龙的咖啡厅上班。要是你也想去济州岛的蓝天白云下喝咖啡，偶遇权志龙，那么将是一件非常令人兴奋的事情！'&#125;;</span><br><span class="line">arr.push(obj);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">res.send(&#123;</span><br><span class="line">code: <span class="number">200</span>,</span><br><span class="line">page:num,</span><br><span class="line">data: arr</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">app.listen(<span class="number">9999</span>);<span class="comment">//监听端口</span></span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--pages/listview/listview.wxml--&gt;</span><br><span class="line"></span><br><span class="line">&lt;loading hidden=<span class="string">"&#123;&#123;isLoading&#125;&#125;"</span>&gt;加载中...&lt;/loading&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;view class=<span class="string">"box"</span>&gt;</span><br><span class="line">  &lt;view wx:<span class="keyword">if</span>=<span class="string">"&#123;&#123;isRefesh&#125;&#125;"</span>&gt;</span><br><span class="line">   &lt;icon type='waiting' size='45'&gt;&lt;/icon&gt;</span><br><span class="line">   &lt;text&gt;刷新中...&lt;/text&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line"></span><br><span class="line">  &lt;view <span class="class"><span class="keyword">class</span>="<span class="title">list</span>" <span class="title">wx</span>:</span><span class="keyword">for</span>=<span class="string">"&#123;&#123;list&#125;&#125;"</span> id=<span class="string">"&#123;&#123;page&#125;&#125;"</span>&gt;</span><br><span class="line">    &lt;view class='list_img'&gt;</span><br><span class="line">      &lt;image src="&#123;&#123;item.img&#125;&#125;" class='avatar'&gt;&lt;/image&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">    &lt;view <span class="class"><span class="keyword">class</span>='<span class="title">list_main</span>'&gt;</span></span><br><span class="line">      &lt;view class='list_title'&gt;&#123;&#123;item.title&#125;&#125;&lt;/view&gt;</span><br><span class="line">      &lt;view class='list_content'&gt;&#123;&#123;item.address&#125;&#125;&lt;/view&gt;</span><br><span class="line">      &lt;view class='list_content'&gt;&#123;&#123;item.content&#125;&#125;&lt;/view&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- listview.json --&gt;</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">"enablePullDownRefresh"</span>: <span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pages/listview/listview.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    <span class="built_in">list</span>: [],<span class="comment">//列表项数据</span></span><br><span class="line">    page: <span class="number">1</span>,<span class="comment">//页码</span></span><br><span class="line">    isRefesh: <span class="literal">false</span>,<span class="comment">//是否刷新</span></span><br><span class="line">    isLoading: <span class="literal">true</span><span class="comment">//正在加载</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//下拉刷新</span></span><br><span class="line">  onPullDownRefresh: function () &#123;</span><br><span class="line">    var that = <span class="keyword">this</span>;</span><br><span class="line">    that.setData(&#123; isRefesh: <span class="literal">true</span> &#125;);<span class="comment">//刷新条出现</span></span><br><span class="line">    wx.request(&#123;</span><br><span class="line">      url: 'http://localhost:9999/list/1',</span><br><span class="line">      method: 'GET',</span><br><span class="line">      success: function (res) &#123;</span><br><span class="line">        var listdata = res.data.data;</span><br><span class="line">        setTimeout(function () &#123;</span><br><span class="line">          wx.stopPullDownRefresh;<span class="comment">//停止下拉刷新效果</span></span><br><span class="line">          that.setData(&#123; page: <span class="number">1</span> &#125;);<span class="comment">//重置页码</span></span><br><span class="line">          that.setData(&#123; <span class="built_in">list</span>: listdata, isRefesh: <span class="literal">false</span> &#125;);<span class="comment">//重新设置列表项和刷新条消失</span></span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//滑到底部加载</span></span><br><span class="line">  onReachBottom: function () &#123;</span><br><span class="line">    var that = <span class="keyword">this</span>;</span><br><span class="line">    var page = that.data.page + <span class="number">1</span>;</span><br><span class="line">    var oldData = <span class="keyword">this</span>.data.<span class="built_in">list</span>;<span class="comment">//老数据</span></span><br><span class="line">    that.setData(&#123; isLoading: <span class="literal">false</span> &#125;);<span class="comment">//loading出现</span></span><br><span class="line">    wx.request(&#123;</span><br><span class="line">      url: 'http://localhost:9999/list/' + page,</span><br><span class="line">      method: 'GET',</span><br><span class="line">      success: function (res) &#123;</span><br><span class="line">        var allData = [];</span><br><span class="line">        var listdata = res.data.data;<span class="comment">//新数据</span></span><br><span class="line">        allData = oldData.concat(listdata);<span class="comment">//老数据和新数据合并</span></span><br><span class="line">        that.setData(&#123; <span class="built_in">list</span>: allData, page: page &#125;);<span class="comment">//重新设置列表项和页码</span></span><br><span class="line">        setTimeout(function () &#123;</span><br><span class="line">          that.setData(&#123; isLoading: <span class="literal">true</span> &#125;);<span class="comment">//loading消失</span></span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//页码初始化</span></span><br><span class="line">  onLoad: function (options) &#123;</span><br><span class="line">    var that = <span class="keyword">this</span>;</span><br><span class="line">    that.setData(&#123; isLoading: <span class="literal">false</span> &#125;);<span class="comment">//loading出现</span></span><br><span class="line">    wx.request(&#123;</span><br><span class="line">      url: 'http://localhost:9999/list/1',</span><br><span class="line">      method: 'GET',</span><br><span class="line">      success: function (res) &#123;</span><br><span class="line">        var listdata = res.data.data;</span><br><span class="line">        that.setData(&#123; <span class="built_in">list</span>: listdata &#125;);</span><br><span class="line">        setTimeout(function () &#123;</span><br><span class="line">          that.setData(&#123; isLoading: <span class="literal">true</span> &#125;);<span class="comment">//loading消失</span></span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;小程序是一种新的开放能力，开发者可以快速地开发一个小程序。小程序可以在微信内被便捷地获取和传播，同时具有出色的使用体验。这是关于小程序的动态加载一个列表页小栗子。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/wechat_d.png&quot; alt=&quot;微信小程序&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="小程序" scheme="https://duanruilong.github.io/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="Javascript" scheme="https://duanruilong.github.io/tags/Javascript/"/>
    
      <category term="编程" scheme="https://duanruilong.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="小程序" scheme="https://duanruilong.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>前端小笔记本</title>
    <link href="https://duanruilong.github.io/2018/08/01/%E5%89%8D%E7%AB%AF%E5%B0%8F%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    <id>https://duanruilong.github.io/2018/08/01/前端小笔记本/</id>
    <published>2018-07-31T16:09:43.000Z</published>
    <updated>2018-08-07T16:26:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>这里会收录一些偶尔不知道了，就去找一下的东西，慢慢积累。<br><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/webjingnang.png" alt="js"></p><a id="more"></a><h1 id="Node环境起一个服务"><a href="#Node环境起一个服务" class="headerlink" title="Node环境起一个服务"></a>Node环境起一个服务</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>需要安装NodeJS环境</p><ul><li><p>1、安装Express<br><code>npm install express -g</code><br><code>npm install express-generator -g</code></p></li><li><p>2、初始化项目<br>新建项目<br><code>express 项目名称</code></p></li></ul><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">➜  Weichat express serverDmo</span><br><span class="line"></span><br><span class="line">  warning: the <span class="keyword">default</span> view engine will <span class="keyword">not</span> be jade in future releases</span><br><span class="line">  warning: use `--view=jade' <span class="keyword">or</span> `--help' <span class="keyword">for</span> additional options</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   create : serverDmo/</span><br><span class="line">   create : serverDmo/<span class="keyword">public</span>/</span><br><span class="line">   create : serverDmo/<span class="keyword">public</span>/javascripts/</span><br><span class="line">   create : serverDmo/<span class="keyword">public</span>/images/</span><br><span class="line">   create : serverDmo/<span class="keyword">public</span>/stylesheets/</span><br><span class="line">   create : serverDmo/<span class="keyword">public</span>/stylesheets/style.css</span><br><span class="line">   create : serverDmo/routes/</span><br><span class="line">   create : serverDmo/routes/index.js</span><br><span class="line">   create : serverDmo/routes/users.js</span><br><span class="line">   create : serverDmo/views/</span><br><span class="line">   create : serverDmo/views/error.jade</span><br><span class="line">   create : serverDmo/views/index.jade</span><br><span class="line">   create : serverDmo/views/layout.jade</span><br><span class="line">   create : serverDmo/app.js</span><br><span class="line">   create : serverDmo/package.json</span><br><span class="line">   create : serverDmo/bin/</span><br><span class="line">   create : serverDmo/bin/www</span><br><span class="line"></span><br><span class="line">   change directory:</span><br><span class="line">     $ cd serverDmo</span><br><span class="line"></span><br><span class="line">   install dependencies:</span><br><span class="line">     $ npm install</span><br><span class="line"></span><br><span class="line">   run the app:</span><br><span class="line">     $ DEBUG=serverdmo:* npm start</span><br></pre></td></tr></table></figure><p>目录介绍：<br>/bin:用来启动应用（服务器）<br>/public: 存放静态资源目录<br>/routes：路由用于确定应用程序如何响应对特定端点的客户机请求，包含一个 URI（或路径）和一个特定的 HTTP 请求方法（GET、POST 等）。每个路由可以具有一个或多个处理程序函数，这些函数在路由匹配时执行。<br>/views: 模板文件所在目录 文件格式为.jade<br>目录app.js程序main文件 这个是服务器启动的入口</p><h2 id="首先启动服务器"><a href="#首先启动服务器" class="headerlink" title="首先启动服务器"></a>首先启动服务器</h2><p><code>npm start //启动服务器</code></p><p>在浏览器中访问 <a href="http://localhost:3000/" target="_blank" rel="noopener">http://localhost:3000/</a></p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>打开app.js 这里介绍下主要代码<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"> var express = require('express');</span><br><span class="line"> var path = require('path');</span><br><span class="line"> var favicon = require('serve-favicon');</span><br><span class="line"> var logger = require('morgan');</span><br><span class="line"> var cookieParser = require('cookie-parser');</span><br><span class="line"> var bodyParser = require('body-parser');</span><br><span class="line"></span><br><span class="line"> var app = express();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">///=======路由信息 （接口地址）开始 存放在./routes目录下===========//</span></span><br><span class="line"> var routes = require('./routes/index');//home page接口</span><br><span class="line"> var users = require('./routes/users'); //用户接口</span><br><span class="line"></span><br><span class="line"> app.use(<span class="string">'/'</span>, routes); <span class="comment">//在app中注册routes该接口 </span></span><br><span class="line"> app.use('/users', users);//在app中注册users接口</span><br><span class="line"><span class="comment">///=======路由信息 （接口地址 介绍===========//</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">///=======模板 开始===========//</span></span><br><span class="line"><span class="comment">// view engine setup</span></span><br><span class="line"> app.set('views', path.join(__dirname, 'views'));</span><br><span class="line"> app.set('view engine', 'jade');</span><br><span class="line"><span class="comment">///=======模板 结束===========//</span></span><br><span class="line"></span><br><span class="line">当我们在浏览器中 访问 http:<span class="comment">//localhost:3000/ 调用的就是index中的接口</span></span><br><span class="line">我们打开index.js就可以看到该接口的定义：</span><br><span class="line">var express = require('express');</span><br><span class="line">var router = express.Router();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个get请求 path为根目录</span></span><br><span class="line"><span class="comment">/* GET home page. */</span></span><br><span class="line">router.get(<span class="string">'/'</span>, function(req, res, next) &#123;</span><br><span class="line"> res.render('index', &#123; title: 'Express' &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span>.exports = router;</span><br></pre></td></tr></table></figure></p><p>定义一个路由的基本格式为：<br><code>app.METHOD(PATH, HANDLER)</code><br>其中：<br>app 是 express 的实例。<br>METHOD是 HTTP 请求方法。<br>PATH 是服务器上的路径。<br>HANDLER 是在路由匹配时执行的函数。<br>以上的定义代表</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里会收录一些偶尔不知道了，就去找一下的东西，慢慢积累。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/webjingnang.png&quot; alt=&quot;js&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="https://duanruilong.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="React" scheme="https://duanruilong.github.io/tags/React/"/>
    
      <category term="Javascript" scheme="https://duanruilong.github.io/tags/Javascript/"/>
    
      <category term="编程" scheme="https://duanruilong.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="小程序" scheme="https://duanruilong.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>小程序之旅(六)</title>
    <link href="https://duanruilong.github.io/2018/07/31/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8B%E6%97%85-%E5%85%AD/"/>
    <id>https://duanruilong.github.io/2018/07/31/小程序之旅-六/</id>
    <published>2018-07-31T15:32:25.000Z</published>
    <updated>2018-08-07T16:41:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>小程序是一种新的开放能力，开发者可以快速地开发一个小程序。小程序可以在微信内被便捷地获取和传播，同时具有出色的使用体验。这是关于小程序的数据本地存储进一步的认识，比如很多图片和视频旅行。</p><p><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/wechat_d.png" alt="微信小程序"></p><a id="more"></a><p>有时候的需求就是不单单只是保存到你自己的手机上就可以了，要考虑到多场景的应用。还有文件的内容广度上也要拓展。<br>那么这就需要一些准备工作，比如服务器，使用Nodejs来实现服务器的东西，至于API主要是官方的<code>wx.uploadFile(obj)</code></p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install express</span><br><span class="line">npm install formidable</span><br></pre></td></tr></table></figure><p>Node-server文件</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">var express = require('express');</span><br><span class="line"><span class="comment">//处理post需要引入这个中间件,处理的是form-data</span></span><br><span class="line">var formidable = require('formidable');</span><br><span class="line">var fs = require('fs');</span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理静态资源</span></span><br><span class="line">app.use(express.static('./'));</span><br><span class="line"><span class="comment">// 处理post的form-data 类型</span></span><br><span class="line"></span><br><span class="line">app.post('/postformdata',function (req,res) &#123;</span><br><span class="line">    var form = <span class="keyword">new</span> formidable.IncomingForm(); <span class="comment">// 输入流</span></span><br><span class="line">    form.encoding = 'utf-8';</span><br><span class="line">    form.uploadDir = 'upload'; //这里设置上传目录</span><br><span class="line">    form.parse(req,function(err,fields,files)&#123; <span class="comment">// 这里解析请求</span></span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            res.send(err);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        var avatarName = Date.now() + '.jpg'; // 以时间作为名字</span><br><span class="line">        var newPath = form.uploadDir + avatarName;</span><br><span class="line">        fs.renameSync(files.my_upload.path,newPath); <span class="comment">// my_upload是前端设置的name，把图片储存下来并且重新命名</span></span><br><span class="line">        res.send(&#123;</span><br><span class="line">            code:<span class="number">200</span>,</span><br><span class="line">            path:'http:localhost:9998/'+newPath</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">9998</span>); <span class="comment">// 监听端口</span></span><br></pre></td></tr></table></figure><h1 id="Num-1"><a href="#Num-1" class="headerlink" title="Num 1"></a>Num 1</h1><blockquote><p>第一个例子，选择本地图片，然后保存到服务器，上传成功之后可以看到缩略图，但是 点击每一张图片又可以幻灯片式预览。</p></blockquote><p>在upload文件目录下操作</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--pages/upload/upload.wxml--&gt;</span><br><span class="line">&lt;view <span class="class"><span class="keyword">class</span>='<span class="title">container</span>'&gt;</span></span><br><span class="line"><span class="class">  &lt;button type='primary' bindtap='uploadImg'&gt;上传图片&lt;/button&gt;</span></span><br><span class="line"><span class="class">    &lt;view class="imginfo" wx:for="&#123;&#123;imglist&#125;&#125;" wx:for-index="id" wx:for-item="item"&gt;</span></span><br><span class="line"><span class="class">      &lt;image src='&#123;&#123;item&#125;&#125;' bindtap='previewImg' data-imgid="&#123;&#123;id&#125;&#125;" class='myimg'&gt;&lt;/image&gt;</span></span><br><span class="line"><span class="class">    &lt;/view&gt;</span></span><br><span class="line"><span class="class">&lt;/view&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/* pages/upload/upload.wxss */</span></span><br><span class="line">.imginfo&#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-direction: column;</span><br><span class="line">  align-items: center;</span><br><span class="line">&#125;</span><br><span class="line">.myimg&#123;</span><br><span class="line">  width: <span class="number">70</span>px;</span><br><span class="line">  height: <span class="number">70</span>px;</span><br><span class="line">  border:<span class="number">1</span>px solid <span class="meta">#ccc;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pages/upload/upload.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面的初始数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  data: &#123;</span><br><span class="line">    imgList:[] <span class="comment">// 图片列表</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 上传图片</span></span><br><span class="line">  uploadImg:function()&#123;</span><br><span class="line">    var that = <span class="keyword">this</span>;</span><br><span class="line">    wx.chooseImage(&#123;</span><br><span class="line">      success: function(res) &#123;</span><br><span class="line">        var tempFilePaths = res.tempFilePaths;</span><br><span class="line">        wx.uploadFile(&#123;</span><br><span class="line">          url: 'http://localhost:9998/postformdata', //nodeJS数据接口</span><br><span class="line">          filePath: tempFilePaths[<span class="number">0</span>],</span><br><span class="line">          name: 'my_upload',//这个前后台名称需要保持一致，别乱写。</span><br><span class="line">          formData: &#123;</span><br><span class="line">            'user': 'test'</span><br><span class="line">          &#125;,</span><br><span class="line">          success:function(res)&#123;</span><br><span class="line">            var data = JSON.parse(res.data);<span class="comment">//返回来的是字符串格式。</span></span><br><span class="line">            var arr = that.data.imgList;</span><br><span class="line">            arr.push(data.path);</span><br><span class="line">            that.setData(&#123; imgList: arr &#125;);<span class="comment">//只有这种方式才能更新视图</span></span><br><span class="line">            console.<span class="built_in">log</span>(that.data.imgList);</span><br><span class="line">            wx.showToast(&#123;</span><br><span class="line">              title: '文件上传成功',</span><br><span class="line">              icon: 'success',</span><br><span class="line">              duration: <span class="number">2000</span></span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//预览图片</span></span><br><span class="line">  previewImg: function (e) &#123;</span><br><span class="line">    var index = e.target.dataset.imgid;<span class="comment">//获取图片的id</span></span><br><span class="line">    var that = <span class="keyword">this</span>;</span><br><span class="line">    console.<span class="built_in">log</span>(index);</span><br><span class="line">    wx.previewImage(&#123;</span><br><span class="line">      current: that.data.imgList[index],<span class="comment">//当前的图片</span></span><br><span class="line">      urls: that.data.imgList <span class="comment">// 需要预览的图片http链接列表</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>以上就是不要的步骤。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;小程序是一种新的开放能力，开发者可以快速地开发一个小程序。小程序可以在微信内被便捷地获取和传播，同时具有出色的使用体验。这是关于小程序的数据本地存储进一步的认识，比如很多图片和视频旅行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/wechat_d.png&quot; alt=&quot;微信小程序&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="小程序" scheme="https://duanruilong.github.io/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="Javascript" scheme="https://duanruilong.github.io/tags/Javascript/"/>
    
      <category term="编程" scheme="https://duanruilong.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="小程序" scheme="https://duanruilong.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>开发小锦囊</title>
    <link href="https://duanruilong.github.io/2018/07/30/%E5%BC%80%E5%8F%91%E5%B0%8F%E9%94%A6%E5%9B%8A/"/>
    <id>https://duanruilong.github.io/2018/07/30/开发小锦囊/</id>
    <published>2018-07-29T16:30:40.000Z</published>
    <updated>2019-01-29T12:14:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>这里会收录一下遇到的，或者解决问题的方法。不断收集，不断壮大。<br><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/webjingnang.png" alt="js"></p><a id="more"></a><blockquote><p>开发小锦囊</p></blockquote><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="1、js-判断字符串中是否包含某个字符串"><a href="#1、js-判断字符串中是否包含某个字符串" class="headerlink" title="1、js 判断字符串中是否包含某个字符串"></a>1、js 判断字符串中是否包含某个字符串</h2><blockquote><p>String对象的方法</p></blockquote><p>方法一: indexOf()   (推荐)</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var str = <span class="string">"123"</span>;</span><br><span class="line">console.<span class="built_in">log</span>(str.indexOf(<span class="string">"3"</span>) != <span class="number">-1</span> );  <span class="comment">// true</span></span><br><span class="line">indexOf() 方法可返回某个指定的字符串值在字符串中首次出现的位置。如果要检索的字符串值没有出现，则该方法返回 <span class="number">-1</span>。</span><br></pre></td></tr></table></figure><p>方法二: search() </p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var str = <span class="string">"123"</span>;</span><br><span class="line">console.<span class="built_in">log</span>(str.search(<span class="string">"3"</span>) != <span class="number">-1</span> );  <span class="comment">// true</span></span><br><span class="line">search() 方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串。如果没有找到任何匹配的子串，则返回 <span class="number">-1</span>。</span><br></pre></td></tr></table></figure><p>方法三:match()</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var str = <span class="string">"123"</span>;</span><br><span class="line">var reg = RegExp(/<span class="number">3</span>/);</span><br><span class="line"><span class="keyword">if</span>(str.match(reg))&#123;</span><br><span class="line">    <span class="comment">// 包含        </span></span><br><span class="line">&#125;</span><br><span class="line">match() 方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。</span><br></pre></td></tr></table></figure><blockquote><p>RegExp 对象方法</p></blockquote><p>方法四:test() </p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var str = <span class="string">"123"</span>;</span><br><span class="line">var reg = RegExp(/<span class="number">3</span>/);</span><br><span class="line">console.<span class="built_in">log</span>(reg.test(str)); <span class="comment">// true</span></span><br><span class="line">test() 方法用于检索字符串中指定的值。返回 <span class="literal">true</span> 或 <span class="literal">false</span>。</span><br></pre></td></tr></table></figure><p>方法五:exec()</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var str = <span class="string">"123"</span>;</span><br><span class="line">var reg = RegExp(/<span class="number">3</span>/);</span><br><span class="line"><span class="keyword">if</span>(reg.exec(str))&#123;</span><br><span class="line">    <span class="comment">// 包含        </span></span><br><span class="line">&#125;</span><br><span class="line">exec() 方法用于检索字符串中的正则表达式的匹配。返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 null。</span><br></pre></td></tr></table></figure><h2 id="2、-JS中every-和some-的用法"><a href="#2、-JS中every-和some-的用法" class="headerlink" title="2、 JS中every()和some()的用法"></a>2、 JS中every()和some()的用法</h2><blockquote><p>every()与some()方法都是JS中数组的迭代方法。</p></blockquote><p>every()是对数组中每一项运行给定函数，如果该函数对每一项返回true,则返回true。</p><p>some()是对数组中每一项运行给定函数，如果该函数对任一项返回true，则返回true。</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var arr = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> ]; </span><br><span class="line"> </span><br><span class="line">console.<span class="built_in">log</span>( arr.some( function( item, index, <span class="built_in">array</span> )&#123; </span><br><span class="line">    console.log( 'item=' + item + ',index='+index+',array='+array ); </span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">3</span>; </span><br><span class="line">&#125;)); </span><br><span class="line"> </span><br><span class="line">console.<span class="built_in">log</span>( arr.every( function( item, index, <span class="built_in">array</span> )&#123; </span><br><span class="line">    console.log( 'item=' + item + ',index='+index+',array='+array ); </span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">3</span>; </span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><h2 id="3、-用Set为数组去重"><a href="#3、-用Set为数组去重" class="headerlink" title="3、 用Set为数组去重"></a>3、 用Set为数组去重</h2><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>] <span class="comment">// 需要去重的数组</span></span><br><span class="line"></span><br><span class="line">var <span class="built_in">set</span> = <span class="keyword">new</span> Set(arr) <span class="comment">// &#123;1,2,3,4&#125;</span></span><br><span class="line">var newArr = Array.from(<span class="built_in">set</span>) <span class="comment">// 再把set转变成array</span></span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(newArr) <span class="comment">// [1,2,3,4]</span></span><br></pre></td></tr></table></figure><h2 id="4、-删除数组尾部元素"><a href="#4、-删除数组尾部元素" class="headerlink" title="4、 删除数组尾部元素"></a>4、 删除数组尾部元素</h2><p>一个简单的用来清空或则删除数组尾部元素的简单方法就是改变数组的length属性值。<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>];</span><br><span class="line"><span class="comment">// truncanting</span></span><br><span class="line">arr.length = <span class="number">3</span>;</span><br><span class="line">console.<span class="built_in">log</span>(arr); <span class="comment">//=&gt; [11, 22, 33]</span></span><br><span class="line"><span class="comment">// clearing</span></span><br><span class="line">arr.length = <span class="number">0</span>;</span><br><span class="line">console.<span class="built_in">log</span>(arr); <span class="comment">//=&gt; []</span></span><br><span class="line">console.<span class="built_in">log</span>(arr[<span class="number">2</span>]); <span class="comment">//=&gt; undefined</span></span><br></pre></td></tr></table></figure></p><h2 id="5、-平铺多维数组"><a href="#5、-平铺多维数组" class="headerlink" title="5、 平铺多维数组"></a>5、 平铺多维数组</h2><p>使用Spread操作，可以很容易去平铺嵌套多维数组：<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">11</span>, [<span class="number">22</span>, <span class="number">33</span>], [<span class="number">44</span>, <span class="number">55</span>], <span class="number">66</span>];</span><br><span class="line"><span class="keyword">const</span> flatArr = [].concat(...arr); <span class="comment">//=&gt; [11, 22, 33, 44, 55, 66]</span></span><br></pre></td></tr></table></figure></p><p>可惜，上面的方法仅仅适用于二维数组。不过，通过递归，我们可以平铺任意维度的嵌套数组。<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">unction <span class="title">flattenArray</span><span class="params">(arr)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> flattened = [].concat(...arr);</span><br><span class="line">  <span class="keyword">return</span> flattened.some(item =&gt; Array.isArray(item)) ? </span><br><span class="line">    flattenArray(flattened) : flattened;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">11</span>, [<span class="number">22</span>, <span class="number">33</span>], [<span class="number">44</span>, [<span class="number">55</span>, <span class="number">66</span>, [<span class="number">77</span>, [<span class="number">88</span>]], <span class="number">99</span>]]];</span><br><span class="line"><span class="keyword">const</span> flatArr = flattenArray(arr); </span><br><span class="line"><span class="comment">//=&gt; [11, 22, 33, 44, 55, 66, 77, 88, 99]</span></span><br></pre></td></tr></table></figure></p><h2 id="6、-格式化JSON代码"><a href="#6、-格式化JSON代码" class="headerlink" title="6、 格式化JSON代码"></a>6、 格式化JSON代码</h2><p>JSON.stringify不止可以将一个对象字符化，还可以格式化输出JSON对象。<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; </span><br><span class="line">  foo: &#123; bar: [11, 22, 33, 44], baz: &#123; bing: true, boom: 'Hello' &#125; &#125; </span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// The third parameter is the number of spaces used to </span></span><br><span class="line"><span class="comment">// beautify the JSON output.</span></span><br><span class="line">JSON.stringify(obj, null, <span class="number">4</span>); </span><br><span class="line"><span class="comment">// =&gt;"&#123;</span></span><br><span class="line"><span class="comment">// =&gt;    "foo": &#123;</span></span><br><span class="line"><span class="comment">// =&gt;        "bar": [</span></span><br><span class="line"><span class="comment">// =&gt;            11,</span></span><br><span class="line"><span class="comment">// =&gt;            22,</span></span><br><span class="line"><span class="comment">// =&gt;            33,</span></span><br><span class="line"><span class="comment">// =&gt;            44</span></span><br><span class="line"><span class="comment">// =&gt;        ],</span></span><br><span class="line"><span class="comment">// =&gt;        "baz": &#123;</span></span><br><span class="line"><span class="comment">// =&gt;            "bing": true,</span></span><br><span class="line"><span class="comment">// =&gt;            "boom": "Hello"</span></span><br><span class="line"><span class="comment">// =&gt;        &#125;</span></span><br><span class="line"><span class="comment">// =&gt;    &#125;</span></span><br><span class="line"><span class="comment">// =&gt;&#125;"</span></span><br></pre></td></tr></table></figure></p><h2 id="7、-await多个async函数"><a href="#7、-await多个async函数" class="headerlink" title="7、 await多个async函数"></a>7、 await多个async函数</h2><p>在使用async/await的时候，可以使用Promise.all来await多个async函数。<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">await Promise.all([anAsyncCall(), thisIsAlsoAsync(), oneMore()])</span><br></pre></td></tr></table></figure></p><h2 id="8、JSON对象和JSON数组添加删除元素"><a href="#8、JSON对象和JSON数组添加删除元素" class="headerlink" title="8、JSON对象和JSON数组添加删除元素"></a>8、JSON对象和JSON数组添加删除元素</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）纯JSON文本可以这样</span><br><span class="line">var json=&#123;</span><br><span class="line">   id:<span class="string">"id1"</span>,</span><br><span class="line">   name:<span class="string">"开心"</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//添加</span></span><br><span class="line">json[<span class="string">"gender"</span>]=<span class="string">"男"</span></span><br><span class="line">json[<span class="string">"age"</span>]=<span class="number">26</span>;</span><br><span class="line">alert(json.age);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="keyword">delete</span> json[<span class="string">"age"</span>];</span><br><span class="line">alert(json.age);</span><br><span class="line">alert(json.gender);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">正常对象的删除：</span><br><span class="line">var o = <span class="keyword">new</span> Object;</span><br><span class="line">o.name = <span class="string">"David"</span>;</span><br><span class="line">alert(o.name); <span class="comment">//输出 "David"</span></span><br><span class="line"><span class="keyword">delete</span> o.name;</span><br><span class="line">alert(o.name); <span class="comment">//输出 "undefined"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">（<span class="number">2</span>纯json对象的话就把以上的var json先json1 = JSON.parse(json)就可以了</span><br><span class="line"></span><br><span class="line">（<span class="number">3</span>)如果用JSON数组文本的话可以这样</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var mainArray = [</span><br><span class="line">    &#123;<span class="string">"tag"</span> :<span class="string">"任务"</span>,<span class="string">"num"</span>:<span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"tag"</span> :<span class="string">"工作"</span> ,<span class="string">"num"</span>:<span class="number">6</span>&#125;</span><br><span class="line">];</span><br><span class="line"> </span><br><span class="line">mainArray .push(&#123;</span><br><span class="line">   <span class="string">"tag"</span>:<span class="string">"开会"</span>,<span class="string">"num"</span>:<span class="number">3</span></span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">mainArray.shift();<span class="comment">//删除数组头元素</span></span><br><span class="line">mainArray.pop();<span class="comment">//删除数组尾元素</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">----------------------由object创建json文本格式的方法----------------------</span><br><span class="line"></span><br><span class="line">&lt;p id=<span class="string">"a"</span>&gt;ssss&lt;/p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var data = <span class="keyword">new</span> Object();</span><br><span class="line">data.name = <span class="string">"airuikun"</span>;</span><br><span class="line">data.sex = <span class="string">"man"</span>;</span><br><span class="line">var s = JSON.stringify(data);</span><br><span class="line">document.getElementById(<span class="string">"a"</span>).innerHTML = s;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="9、随机生成验证码"><a href="#9、随机生成验证码" class="headerlink" title="9、随机生成验证码"></a>9、随机生成验证码</h2><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var str=Math.<span class="built_in">floor</span>((<span class="number">1</span> + Math.random()) * <span class="number">0x10000</span>)</span><br><span class="line">      .toString(<span class="number">16</span>)</span><br><span class="line">      .substring(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果如下</span></span><br><span class="line"></span><br><span class="line">=&gt;  <span class="number">8</span>a51</span><br></pre></td></tr></table></figure><hr><hr><h1 id="React篇"><a href="#React篇" class="headerlink" title="React篇"></a>React篇</h1><hr><h2 id="1、-关于this-setState更新的问题"><a href="#1、-关于this-setState更新的问题" class="headerlink" title="1、 关于this.setState更新的问题"></a>1、 关于this.setState更新的问题</h2><p>this.setState是异步，所以在this.setState之后立即调用this.state是获取不到最新的数据的，那么怎么获取最新的数据呢？下面介绍三个方法:</p><p>1.回调函数callback<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.setState(&#123;</span><br><span class="line">  val: <span class="keyword">this</span>.state.val+<span class="number">1</span></span><br><span class="line">&#125;, () =&gt; &#123;</span><br><span class="line">  console.<span class="built_in">log</span>(<span class="keyword">this</span>.state.val)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>2.componentDidUpdate</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">componentDidUpdate()&#123;</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="keyword">this</span>.state.val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在this.setState之后去componentDidUpdate函数中调用，此时的this.state已经更新</p><p>3.将this.setState放入setTimeout函数中<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let self = <span class="keyword">this</span>;</span><br><span class="line">setTimeout(function () &#123;</span><br><span class="line">  self.setState(&#123;</span><br><span class="line">    val:self.state.val+<span class="number">1</span></span><br><span class="line">  &#125;);</span><br><span class="line">  console.<span class="built_in">log</span>(self.state.val);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>在setTimeout函数中，在this.setState之后this.state是立即更新的，所以也可以获取到更新后的数据。</p><hr><hr><h1 id="PHP篇"><a href="#PHP篇" class="headerlink" title="PHP篇"></a>PHP篇</h1><h2 id="php-字符串中是否包含指定字符串的多种方法"><a href="#php-字符串中是否包含指定字符串的多种方法" class="headerlink" title="php 字符串中是否包含指定字符串的多种方法"></a>php 字符串中是否包含指定字符串的多种方法</h2><h3 id="1-strstr"><a href="#1-strstr" class="headerlink" title="1. strstr"></a>1. strstr</h3><p>strstr() 函数搜索一个字符串在另一个字符串中的第一次出现。<br>该函数返回字符串的其余部分（从匹配点）。如果未找到所搜索的字符串，则返回 false。</p><p>代码如下:<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"> <span class="comment">/*如手册上的举例*/</span></span><br><span class="line"> $email = 'user@example.com';</span><br><span class="line"> $domain = <span class="built_in">strstr</span>($email, <span class="string">'@'</span>);</span><br><span class="line"> echo $domain;</span><br><span class="line"> <span class="comment">// prints @example.com</span></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><h3 id="2-stristr"><a href="#2-stristr" class="headerlink" title="2. stristr"></a>2. stristr</h3><p>stristr() 函数查找字符串在另一个字符串中第一次出现的位置。<br>如果成功，则返回字符串的其余部分（从匹配点）。如果没有找到该字符串，则返回 false。</p><p>它和strstr的使用方法完全一样.唯一的区别是stristr不区分大小写.</p><h3 id="3-strpos"><a href="#3-strpos" class="headerlink" title="3. strpos"></a>3. strpos</h3><p>strpos函数返回boolean值.FALSE和TRUE不用多说.用 “===”进行判断.strpos在执行速度上都比以上两个函数快,另外strpos有一个参数指定判断的位置,但是默认为空.意思是判断整个字符串.缺点是对中文的支持不好.</p><p>实例1<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if(strpos('www.jb51.net','jb51') !== false)&#123; </span><br><span class="line"> echo '包含jb51'; </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> echo '不包含jb51'; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实例2<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$str= 'abc';</span><br><span class="line">$needle= <span class="string">'a'</span>;</span><br><span class="line">$pos = strpos($str, $needle); <span class="comment">// 返回第一次找到改字符串的位置，这里返回为1，若查不到则返回False</span></span><br></pre></td></tr></table></figure></p><h3 id="4-explode"><a href="#4-explode" class="headerlink" title="4. explode"></a>4. explode</h3><p>用explode进行判断PHP判断字符串的包含代码如下:<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">checkstr</span><span class="params">($str)</span></span>&#123;</span><br><span class="line"> $needle =<span class="string">'a'</span>;<span class="comment">//判断是否包含a这个字符</span></span><br><span class="line"> $tmparray = explode($needle,$str);</span><br><span class="line"> <span class="keyword">if</span>(count($tmparray)&gt;<span class="number">1</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="5、substr例如我们需要判断最后一个字符是不是制定字符"><a href="#5、substr例如我们需要判断最后一个字符是不是制定字符" class="headerlink" title="5、substr例如我们需要判断最后一个字符是不是制定字符"></a>5、substr例如我们需要判断最后一个字符是不是制定字符</h3><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">$str1="&lt;p&gt;这是个winrar专用的dll然后下哦啊不错的dll文件，QlogWin32.dll&lt;/p&gt;";</span></span><br><span class="line"><span class="comment">if(substr($str1,-8)==".dll&lt;/p&gt;")&#123;</span></span><br><span class="line"><span class="comment">echo substr($str1,0,-4);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="6、substr-count统计“子字符串”在“原始字符串中出现的次数”"><a href="#6、substr-count统计“子字符串”在“原始字符串中出现的次数”" class="headerlink" title="6、substr_count统计“子字符串”在“原始字符串中出现的次数”"></a>6、substr_count统计“子字符串”在“原始字符串中出现的次数”</h3><p>substr_count()函数本是一个小字符串在一个大字符串中出现的次数：<br>$number = substr_count(big_string, small_string);<br>正好今天需要一个查找字符串的函数，要实现判断字符串big_string是否包含字符串small_string，返回true或fasle；</p><p>查了半天手册没有找到现成的函数，于是想到可以用substr_count函数来实现代码如下：<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">check_str</span><span class="params">($str, $substr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> $nums=substr_count($str,$substr);</span><br><span class="line">  <span class="keyword">if</span> ($nums&gt;=<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h2 id="php中数组和字符串的相互转换"><a href="#php中数组和字符串的相互转换" class="headerlink" title="php中数组和字符串的相互转换"></a>php中数组和字符串的相互转换</h2><p>数组转字符串：<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implode(<span class="string">'!'</span>, $arr);<span class="comment">//将一维数组以！分隔组合成一个字符串，参数一可以为""</span></span><br></pre></td></tr></table></figure></p><p>字符串转数组：<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">explode(<span class="string">'!'</span>, $str);<span class="comment">//将字符串以!分割为一个一维数组,参数一不可以为""</span></span><br><span class="line"></span><br><span class="line">str_split($str, <span class="number">3</span>);<span class="comment">//将字符串分割成数组，参数二将字符串从左向右每3个字符分割一次，最后的不够3个了 有几个算几个。</span></span><br></pre></td></tr></table></figure></p><hr><h2 id="php的strpos-函数判断字符串中是否包含某字符串的方法"><a href="#php的strpos-函数判断字符串中是否包含某字符串的方法" class="headerlink" title="php的strpos() 函数判断字符串中是否包含某字符串的方法"></a>php的strpos() 函数判断字符串中是否包含某字符串的方法</h2><p>判断某字符串中是否包含某字符串的方法<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if(strpos('www.idc-gz.com','idc-gz') !== false)&#123;</span><br><span class="line">    echo '包含';</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    echo '不包含';</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h2 id="PHP中实现中文字串截取无乱码的方法"><a href="#PHP中实现中文字串截取无乱码的方法" class="headerlink" title="PHP中实现中文字串截取无乱码的方法"></a>PHP中实现中文字串截取无乱码的方法</h2><p>在PHP中，substr()函数截取带有中文字符串的话，可能会出现乱码，这是因为中西文一个字节所占有的字节数不一样，而substr的长度参数是按照字节去算的，在GB2312编码时，一个中文占2个字节，英文为1个字节，而在UTF-8编码当中，一个中文可能占有2个或3个字节，英文或半角标点占1字节。</p><p>直接使用PHP函数substr截取中文字符可能会出现乱码，主要是substr可能硬生生的将一个中文字符“锯”成两半。解决办法：<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、使用mbstring扩展库的mb_substr截取就不会出现乱码了。</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、自己书写截取函数，但效率不如用mbstring扩展库来得高。</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、如果仅是为了输出截取的串，可用如下方式实现：substr($str, <span class="number">0</span>, <span class="number">30</span>).chr(<span class="number">0</span>)。</span><br></pre></td></tr></table></figure></p><p>substr()函数可以分割文字，但要分割的文字如果包括中文字符往往会遇到问题，这时可以用mb_substr()/mb_strcut这个函数，mb_substr()/mb_strcut的用法与substr()相似，只是在mb_substr()/mb_strcut最后要加入多一个参数，以设定字符串的编码，但是一般的服务器都没打开php_mbstring.dll，需要在php.ini在把php_mbstring.dll打开。<br>举个例子：<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo mb_substr('这样一来我的字符串就不会有乱码^_^', 0, 7, 'utf-8');</span><br><span class="line">?&gt;</span><br><span class="line">输出：这样一来我的字</span><br><span class="line">&lt;?php</span><br><span class="line">echo mb_strcut('这样一来我的字符串就不会有乱码^_^', 0, 7, 'utf-8');</span><br><span class="line">?&gt;</span><br><span class="line">输出：这样一</span><br><span class="line">从上面的例子可以看出，mb_substr是按字来切分字符，而mb_strcut是按字节来切分字符，但是都不会产生半个字符的现象。</span><br></pre></td></tr></table></figure></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里会收录一下遇到的，或者解决问题的方法。不断收集，不断壮大。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/webjingnang.png&quot; alt=&quot;js&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="https://duanruilong.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="React" scheme="https://duanruilong.github.io/tags/React/"/>
    
      <category term="Javascript" scheme="https://duanruilong.github.io/tags/Javascript/"/>
    
      <category term="编程" scheme="https://duanruilong.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="小程序" scheme="https://duanruilong.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>怎样在JS里尽量少写for循环</title>
    <link href="https://duanruilong.github.io/2018/07/29/%E6%80%8E%E6%A0%B7%E5%9C%A8JS%E9%87%8C%E5%B0%BD%E9%87%8F%E5%B0%91%E5%86%99for%E5%BE%AA%E7%8E%AF/"/>
    <id>https://duanruilong.github.io/2018/07/29/怎样在JS里尽量少写for循环/</id>
    <published>2018-07-29T15:39:15.000Z</published>
    <updated>2018-08-07T16:20:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>“很多场景，for来的更直接，更明了。”  “最喜欢for循环了。想break就break。可能会多数据的还是for循环。” “for循环灵活易用，高阶函数简洁明了，合适的用合适方式，还是不能限制的太死吧，不然思维也会受影响”,这是很多时候都会考虑的问题。</p><p><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/js_d.png" alt="js"></p><a id="more"></a><h1 id="用好-filter，map，和其它-ES6-新增的高阶遍历函数"><a href="#用好-filter，map，和其它-ES6-新增的高阶遍历函数" class="headerlink" title="用好 filter，map，和其它 ES6 新增的高阶遍历函数"></a>用好 filter，map，和其它 ES6 新增的高阶遍历函数</h1><p>问题一： 将数组中的空值去除<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> arrContainsEmptyVal = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, undefined, null, <span class="number">0</span>, <span class="string">""</span>];</span><br><span class="line"></span><br><span class="line">答案：</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> compact = arr =&gt; arr.filter(Boolean);</span><br></pre></td></tr></table></figure></p><p>问题二： 将数组中的 VIP 用户余额加 10<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> users = [</span><br><span class="line">  &#123; username: <span class="string">"Kelly"</span>, isVIP: <span class="literal">true</span>, balance: <span class="number">20</span> &#125;,</span><br><span class="line">  &#123; username: <span class="string">"Tom"</span>, isVIP: <span class="literal">false</span>, balance: <span class="number">19</span> &#125;,</span><br><span class="line">  &#123; username: <span class="string">"Stephanie"</span>, isVIP: <span class="literal">true</span>, balance: <span class="number">30</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">答案：</span><br><span class="line"></span><br><span class="line">users.<span class="built_in">map</span>(</span><br><span class="line">  user =&gt; (user.isVIP ? &#123; ...user, balance: user.balance + <span class="number">10</span> &#125; : user)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">补充：有人说很明显这里该用 forEach，你为了举例而举例！我比较无语。forEach 是用来执行副作用的好吗？你把原数据都改了。我的习惯是使用 Immutable 数据。你要改数据的话，开心就好。</span><br></pre></td></tr></table></figure></p><p>问题三： 判断字符串中是否含有元音字母<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> randomStr = <span class="string">"hdjrwqpi"</span>;</span><br><span class="line"></span><br><span class="line">答案：</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isVowel = <span class="keyword">char</span> =&gt; [<span class="string">"a"</span>, <span class="string">"e"</span>, <span class="string">"o"</span>, <span class="string">"i"</span>, <span class="string">"u"</span>].includes(<span class="keyword">char</span>);</span><br><span class="line"><span class="keyword">const</span> containsVowel = str =&gt; [...str].some(isVowel);</span><br><span class="line"></span><br><span class="line">containsVowel(randomStr);</span><br></pre></td></tr></table></figure></p><p>问题四： 判断用户是否全部是成年人<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> users = [</span><br><span class="line">  &#123; name: <span class="string">"Jim"</span>, age: <span class="number">23</span> &#125;,</span><br><span class="line">  &#123; name: <span class="string">"Lily"</span>, age: <span class="number">17</span> &#125;,</span><br><span class="line">  &#123; name: <span class="string">"Will"</span>, age: <span class="number">25</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">答案：</span><br><span class="line"></span><br><span class="line">users.every(user =&gt; user.age &gt;= <span class="number">18</span>);</span><br></pre></td></tr></table></figure></p><p>问题五： 找出上面用户中的未成年人<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> users = [</span><br><span class="line">  &#123; name: <span class="string">"Jim"</span>, age: <span class="number">23</span> &#125;,</span><br><span class="line">  &#123; name: <span class="string">"Lily"</span>, age: <span class="number">17</span> &#125;,</span><br><span class="line">  &#123; name: <span class="string">"Will"</span>, age: <span class="number">25</span> &#125;</span><br><span class="line">];</span><br><span class="line">答案：</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> findTeen = users =&gt; users.find(user =&gt; user.age &lt; <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">findTeen(users);</span><br></pre></td></tr></table></figure></p><p>问题六： 将数组中重复项清除<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> dupArr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"></span><br><span class="line">答案：</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> uniq = arr =&gt; [...<span class="keyword">new</span> Set(arr)];</span><br><span class="line"></span><br><span class="line">uniq(dupArr);</span><br></pre></td></tr></table></figure></p><p>问题七： 生成由随机整数组成的数组，数组长度和元素大小可自定义<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">答案：</span><br><span class="line"><span class="keyword">const</span> genNumArr = (length, limit) =&gt;</span><br><span class="line">  Array.from(&#123; length &#125;, _ =&gt; Math.<span class="built_in">floor</span>(Math.random() * limit));</span><br><span class="line"></span><br><span class="line">genNumArr(<span class="number">10</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure></p><h1 id="理解和熟练使用-reduce"><a href="#理解和熟练使用-reduce" class="headerlink" title="理解和熟练使用 reduce"></a>理解和熟练使用 reduce</h1><p>问题一： 不借助原生高阶函数，定义 reduce<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">答案：</span><br><span class="line"><span class="keyword">const</span> reduce = (f, acc, arr) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length === <span class="number">0</span>) <span class="keyword">return</span> acc;</span><br><span class="line">  <span class="keyword">const</span> [head, ...tail] = arr;</span><br><span class="line">  <span class="keyword">return</span> reduce(f, f(head, acc), tail);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>问题二： 将多层数组转换成一层数组<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> nestedArr = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>]]];</span><br><span class="line"></span><br><span class="line">答案：</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> flatten = arr =&gt;</span><br><span class="line">  arr.reduce(</span><br><span class="line">    (flat, next) =&gt; flat.concat(Array.isArray(next) ? flatten(next) : next),</span><br><span class="line">    []</span><br><span class="line">  );</span><br></pre></td></tr></table></figure></p><p>问题三：将下面数组转成对象，key/value 对应里层数组的两个值<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> objLikeArr = [[<span class="string">"name"</span>, <span class="string">"Jim"</span>], [<span class="string">"age"</span>, <span class="number">18</span>], [<span class="string">"single"</span>, <span class="literal">true</span>]];</span><br><span class="line"></span><br><span class="line">答案：</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fromPairs = pairs =&gt;</span><br><span class="line">  pairs.reduce((res, pair) =&gt; ((res[pair[<span class="number">0</span>]] = pair[<span class="number">1</span>]), res), &#123;&#125;);</span><br><span class="line"></span><br><span class="line">fromPairs(objLikeArr);</span><br></pre></td></tr></table></figure></p><p>问题四： 取出对象中的深层属性<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> deepAttr = &#123; a: &#123; b: &#123; c: <span class="number">15</span> &#125; &#125; &#125;;</span><br><span class="line"></span><br><span class="line">答案：</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pluckDeep = path =&gt; obj =&gt;</span><br><span class="line">  path.split(<span class="string">"."</span>).reduce((val, attr) =&gt; val[attr], obj);</span><br><span class="line"></span><br><span class="line">pluckDeep(<span class="string">"a.b.c"</span>)(deepAttr);</span><br></pre></td></tr></table></figure></p><p>问题五：将用户中的男性和女性分别放到不同的数组里：<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> users = [</span><br><span class="line">  &#123; name: <span class="string">"Adam"</span>, age: <span class="number">30</span>, sex: <span class="string">"male"</span> &#125;,</span><br><span class="line">  &#123; name: <span class="string">"Helen"</span>, age: <span class="number">27</span>, sex: <span class="string">"female"</span> &#125;,</span><br><span class="line">  &#123; name: <span class="string">"Amy"</span>, age: <span class="number">25</span>, sex: <span class="string">"female"</span> &#125;,</span><br><span class="line">  &#123; name: <span class="string">"Anthony"</span>, age: <span class="number">23</span>, sex: <span class="string">"male"</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">答案：</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> partition = (arr, isValid) =&gt;</span><br><span class="line">  arr.reduce(</span><br><span class="line">    ([pass, fail], elem) =&gt;</span><br><span class="line">      isValid(elem) ? [[...pass, elem], fail] : [pass, [...fail, elem]],</span><br><span class="line">    [[], []],</span><br><span class="line">  );</span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> isMale = person =&gt; person.sex === <span class="string">"male"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [maleUser, femaleUser] = partition(users, isMale);</span><br></pre></td></tr></table></figure></p><p>问题六： reduce 的计算过程，在范畴论里面叫 catamorphism，即一种连接的变形。和它相反的变形叫 anamorphism。现在我们定义一个和 reduce 计算过程相反的函数 unfold（注：reduce 在 Haskell 里面叫 fold，对应 unfold）</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> unfold = (f, seed) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> go = (f, seed, acc) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> res = f(seed);</span><br><span class="line">    <span class="keyword">return</span> res ? go(f, res[<span class="number">1</span>], acc.concat(res[<span class="number">0</span>])) : acc;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> go(f, seed, []);</span><br><span class="line">&#125;;</span><br><span class="line">根据这个 unfold 函数，定义一个 Python 里面的 range 函数。</span><br><span class="line">答案：</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> range = (min, max, step = <span class="number">1</span>) =&gt;</span><br><span class="line">  unfold(x =&gt; x &lt; max &amp;&amp; [x, x + step], min);</span><br></pre></td></tr></table></figure><h1 id="用递归代替循环（可以break！）"><a href="#用递归代替循环（可以break！）" class="headerlink" title="用递归代替循环（可以break！）"></a>用递归代替循环（可以break！）</h1><p>问题一： 将两个数组每个元素一一对应相加。注意，第二个数组比第一个多出两个，不要把第二个数组遍历完。<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> num1 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">const</span> num2 = [<span class="number">43</span>, <span class="number">23</span>, <span class="number">5</span>, <span class="number">67</span>, <span class="number">87</span>, <span class="number">3</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line">答案：</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> zipWith = f =&gt; xs =&gt; ys =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (xs.length === <span class="number">0</span> || ys.length === <span class="number">0</span>) <span class="keyword">return</span> [];</span><br><span class="line">  <span class="keyword">const</span> [xHead, ...xTail] = xs;</span><br><span class="line">  <span class="keyword">const</span> [yHead, ...yTail] = ys;</span><br><span class="line">  <span class="keyword">return</span> [f(xHead)(yHead), ...zipWith(f)(xTail)(yTail)];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> add = x =&gt; y =&gt; x + y;</span><br><span class="line"></span><br><span class="line">zipWith(add)(num1)(num2);</span><br></pre></td></tr></table></figure></p><p>问题二： 将 Stark 家族成员提取出来。注意，目标数据在数组前面，使用 filter 方法遍历整个数组是浪费。<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> houses = [</span><br><span class="line">  <span class="string">"Eddard Stark"</span>,</span><br><span class="line">  <span class="string">"Catelyn Stark"</span>,</span><br><span class="line">  <span class="string">"Rickard Stark"</span>,</span><br><span class="line">  <span class="string">"Brandon Stark"</span>,</span><br><span class="line">  <span class="string">"Rob Stark"</span>,</span><br><span class="line">  <span class="string">"Sansa Stark"</span>,</span><br><span class="line">  <span class="string">"Arya Stark"</span>,</span><br><span class="line">  <span class="string">"Bran Stark"</span>,</span><br><span class="line">  <span class="string">"Rickon Stark"</span>,</span><br><span class="line">  <span class="string">"Lyanna Stark"</span>,</span><br><span class="line">  <span class="string">"Tywin Lannister"</span>,</span><br><span class="line">  <span class="string">"Cersei Lannister"</span>,</span><br><span class="line">  <span class="string">"Jaime Lannister"</span>,</span><br><span class="line">  <span class="string">"Tyrion Lannister"</span>,</span><br><span class="line">  <span class="string">"Joffrey Baratheon"</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">答案：</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> takeWhile = f =&gt; ([head, ...tail]) =&gt;</span><br><span class="line">  f(head) ? [head, ...takeWhile(f)(tail)] : [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isStark = name =&gt; name.toLowerCase().includes(<span class="string">"stark"</span>);</span><br><span class="line"></span><br><span class="line">takeWhile(isStark)(houses);</span><br></pre></td></tr></table></figure></p><p>问题二： 找出数组中的奇数，然后取出前4个：<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> numList = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"></span><br><span class="line">答案：</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> takeFirst = (limit, f, arr) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (limit === <span class="number">0</span> || arr.length === <span class="number">0</span>) <span class="keyword">return</span> [];</span><br><span class="line">  <span class="keyword">const</span> [head, ...tail] = arr;</span><br><span class="line">  <span class="keyword">return</span> f(head)</span><br><span class="line">    ? [head, ...takeFirst(limit - <span class="number">1</span>, f, tail)]</span><br><span class="line">    : takeFirst(limit, f, tail);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isOdd = n =&gt; n % <span class="number">2</span> === <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">takeFirst(<span class="number">4</span>, isOdd, numList);</span><br></pre></td></tr></table></figure></p><h1 id="使用高阶函数遍历数组时可能遇到的陷阱"><a href="#使用高阶函数遍历数组时可能遇到的陷阱" class="headerlink" title="使用高阶函数遍历数组时可能遇到的陷阱"></a>使用高阶函数遍历数组时可能遇到的陷阱</h1><p>问题一：  从长度为 100 万的随机整数组成的数组中取出偶数，再把所有数字乘以 3<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 用我们刚刚定义的辅助函数来生成符合要求的数组</span></span><br><span class="line"><span class="keyword">const</span> bigArr = genNumArr(<span class="number">1e6</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">答案：</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isEven = num =&gt; num % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> triple = num =&gt; num * <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">bigArr.filter(isEven).<span class="built_in">map</span>(triple);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意，上面的解决方案将数组遍历了两次，无疑是浪费。如果写 for 循环，只用遍历一次：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> results = [];</span><br><span class="line"><span class="keyword">for</span> (let i = <span class="number">0</span>; i &lt; bigArr.length; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (isEven(bigArr[i])) &#123;</span><br><span class="line">    results.push(triple(bigArr[i]));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试，先 filter 再 map 的方法耗时 105.024 ms，而采用 for 循环的方法耗时仅 25.598 ms！那是否说明遇到此类情况必须用 for 循环解决呢? No！</span></span><br><span class="line"></span><br><span class="line"># Transduce</span><br><span class="line"></span><br><span class="line">先用 reduce 来定义 filter 和 <span class="built_in">map</span>，至于为什么这样做等下再解释。</span><br><span class="line">```h</span><br><span class="line"><span class="keyword">const</span> filter = (f, arr) =&gt;</span><br><span class="line">  arr.reduce((acc, val) =&gt; (f(val) &amp;&amp; acc.push(val), acc), []);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">map</span> = (f, arr) =&gt; arr.reduce((acc, val) =&gt; (acc.push(f(val)), acc), []);</span><br></pre></td></tr></table></figure></p><p>重新定义的 filter 和 map 有共有的逻辑。我们把这部分共有的逻辑叫做 reducer。有了共有的逻辑后，我们可以进一步地抽象，把 reducer 抽离出来，然后传入 filter 和 map：<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> filter = f =&gt; reducer =&gt; (acc, value) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (f(value)) <span class="keyword">return</span> reducer(acc, value);</span><br><span class="line">  <span class="keyword">return</span> acc;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">map</span> = f =&gt; reducer =&gt; (acc, value) =&gt; reducer(acc, f(value));</span><br></pre></td></tr></table></figure></p><p>现在 filter 和 map 的函数 signature 一样，我们就可以进行函数组合（function composition）了。<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pushReducer = (acc, value) =&gt; (acc.push(value), acc);</span><br><span class="line"></span><br><span class="line">bigNum.reduce(<span class="built_in">map</span>(triple)(filter(isEven)(pushReducer)), []);</span><br></pre></td></tr></table></figure></p><p>但是这样嵌套写法易读性太差，很容易出错。我们可以写一个工具函数来辅助函数组合：<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pipe = (...fns) =&gt; (...args) =&gt; fns.reduce((fx, fy) =&gt; fy(fx), ...args);</span><br></pre></td></tr></table></figure></p><p>然后我们就可以优雅地组合函数了：<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bigNum.reduce(</span><br><span class="line">  pipe(</span><br><span class="line">    filter(isEven),</span><br><span class="line">    <span class="built_in">map</span>(triple)</span><br><span class="line">  )(pushReducer),</span><br><span class="line">  []</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>经过测试（用 console.time()/console.timeEnd()）,上面的写法耗时 33.898 ms，仅比 for 循环慢 8 ms。为了代码的易维护性和易读性，这点性能上的微小牺牲，我认为是可以接受的。<br>这种写法叫 transduce。有很多工具库提供了 transducer 函数。比如 <a href="https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fcognitect-labs%2Ftransducers-js" target="_blank" rel="noopener">transducers-js</a>。除了用 transducer 来遍历数组，还能用它来遍历对象和其它数据集。功能相当强大。</p><h1 id="for-循环和-for-…-of-循环的区别"><a href="#for-循环和-for-…-of-循环的区别" class="headerlink" title="for 循环和 for … of 循环的区别"></a>for 循环和 for … of 循环的区别</h1><p>for … of 循环是在 ES6 引入 Iterator 后，为了遍历 Iterable 数据类型才产生的。EcmaScript 的 Iterable 数据类型有数组，字符串，Set 和 Map。for … of 循环属于重型的操作（具体细节我也没了解过），如果用 AirBNB 的 ESLint 规则，在代码中使用 for … of 来遍历数组是会被禁止的。<br>那么，for … of 循环应该在哪些场景使用呢？目前我发现的合理使用场景是遍历自定义的 Iterable。来看这个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">问题： 将 Stark 家族成员名字遍历，每次遍历暂停一秒，然后将当前遍历的名字打印来，遍历完后回到第一个元素再重新开始，无限循环。</span><br><span class="line">```h</span><br><span class="line"></span><br><span class="line">const starks = [</span><br><span class="line">  &quot;Eddard Stark&quot;,</span><br><span class="line">  &quot;Catelyn Stark&quot;,</span><br><span class="line">  &quot;Rickard Stark&quot;,</span><br><span class="line">  &quot;Brandon Stark&quot;,</span><br><span class="line">  &quot;Rob Stark&quot;,</span><br><span class="line">  &quot;Sansa Stark&quot;,</span><br><span class="line">  &quot;Arya Stark&quot;,</span><br><span class="line">  &quot;Bran Stark&quot;,</span><br><span class="line">  &quot;Rickon Stark&quot;,</span><br><span class="line">  &quot;Lyanna Stark&quot;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">答案：</span><br><span class="line"></span><br><span class="line">function* repeatedArr(arr) &#123;</span><br><span class="line">  let i = 0;</span><br><span class="line">  while (true) &#123;</span><br><span class="line">    yield arr[i++ % arr.length];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const infiniteNameList = repeatedArr(starks);</span><br><span class="line"></span><br><span class="line">const wait = ms =&gt;</span><br><span class="line">  new Promise(resolve =&gt; &#123;</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">      resolve();</span><br><span class="line">    &#125;, ms);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">(async () =&gt; &#123;</span><br><span class="line">  for (const name of infiniteNameList) &#123;</span><br><span class="line">    await wait(1000);</span><br><span class="line">    console.log(name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>前面讲到的问题基本覆盖了大部分需要使用 for 循环的场景。那是否我们可以保证永远不用 for 循环呢？其实不是。常用的数组原型链上的 map，filter 等高阶函数，底层其实是用 for 循环实现的。在需要写一些底层代码的时候，还是需要写 for 循环的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“很多场景，for来的更直接，更明了。”  “最喜欢for循环了。想break就break。可能会多数据的还是for循环。” “for循环灵活易用，高阶函数简洁明了，合适的用合适方式，还是不能限制的太死吧，不然思维也会受影响”,这是很多时候都会考虑的问题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/js_d.png&quot; alt=&quot;js&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="https://duanruilong.github.io/categories/Javascript/"/>
    
    
      <category term="Javascript" scheme="https://duanruilong.github.io/tags/Javascript/"/>
    
      <category term="编程" scheme="https://duanruilong.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>小程序之旅(五)</title>
    <link href="https://duanruilong.github.io/2018/07/22/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8B%E6%97%85-%E4%BA%94/"/>
    <id>https://duanruilong.github.io/2018/07/22/小程序之旅-五/</id>
    <published>2018-07-22T15:54:08.000Z</published>
    <updated>2018-08-07T16:41:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>小程序是一种新的开放能力，开发者可以快速地开发一个小程序。小程序可以在微信内被便捷地获取和传播，同时具有出色的使用体验。这是关于小程序的数据本地存储的旅行。</p><p><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/wechat_d.png" alt="微信小程序"></p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>数据存储是非常重要的一个功能，比如页面之间的切换，参数保存是必不可少的。html5的本地存储其实不怎么好使，因为它只支持存储字符串，对于object对象，就只能用序列化的方式来回折腾，俩字——麻烦。<br>而自从有了小程序的数据存储，写代码的效率明显上来了，这可都是咱小程序的数据存储的功劳哇！</p><p>那么来看个需求：</p><ul><li>做一个按钮。要求点击按钮后可以浏览相册，选择一张图片，可以保存在小程序里。当下次打开小程序时，这张图片还存在。</li></ul><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul><li>wx.chooseImage：选择图片</li><li>wx.saveFile(OBJ)：将临时图片保存在本地</li><li>wx.setStorage(OBJ)：保存图片的路径。</li></ul><p>当我们预览完一张图片并选中后，首先要将这个临时文件保存在本地，成功后会返回图片的本地保存路径了，然后我们就保存这个路径，下次进来时直接读取就行了。<br>好了，理顺了思路，我们看一下代码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// &lt;!--index.wxml--&gt;</span></span><br><span class="line">&lt;view <span class="class"><span class="keyword">class</span>="<span class="title">container</span>"&gt;</span></span><br><span class="line"><span class="class">  &lt;view class="userinfo"&gt;</span></span><br><span class="line"><span class="class">    &lt;button wx:if="&#123;&#123;!hasUserInfo &amp;&amp; canIUse&#125;&#125;" open-type="getUserInfo" bindgetuserinfo="getUserInfo"&gt; 获取头像昵称 &lt;/button&gt;</span></span><br><span class="line"><span class="class">    &lt;block wx:else&gt;</span></span><br><span class="line"><span class="class">      &lt;image bindtap="bindViewTap" class="userinfo-avatar" src="&#123;&#123;userInfo.avatarUrl&#125;&#125;" mode="cover"&gt;&lt;/image&gt;</span></span><br><span class="line">      &lt;text class="userinfo-nickname"&gt;&#123;&#123;userInfo.nickName&#125;&#125;&lt;/text&gt;</span><br><span class="line">    &lt;/block&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">  &lt;view <span class="class"><span class="keyword">class</span>="<span class="title">usermotto</span>"&gt;</span></span><br><span class="line">    &lt;text class="user-motto"&gt;&#123;&#123;motto&#125;&#125;&lt;/text&gt;</span><br><span class="line">    &lt;button bindtap='keepImg'&gt;保存图片&lt;/button&gt;</span><br><span class="line">    &lt;button bindtap='deleteImg'&gt;删除图片&lt;/button&gt;</span><br><span class="line">    &lt;image src='&#123;&#123;imgPath&#125;&#125;'&gt;&lt;/image&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="comment">//获取应用实例</span></span><br><span class="line"><span class="keyword">const</span> app = getApp()</span><br><span class="line"></span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    motto: 'Hello World',</span><br><span class="line">    userInfo: &#123;&#125;,</span><br><span class="line">    hasUserInfo: <span class="literal">false</span>,</span><br><span class="line">    canIUse: wx.canIUse('button.open-type.getUserInfo'),</span><br><span class="line">    imgPath:<span class="string">''</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//事件处理函数</span></span><br><span class="line">  bindViewTap: function() &#123;</span><br><span class="line">    wx.navigateTo(&#123;</span><br><span class="line">      url: '../logs/logs'</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  keepImg:function()&#123;</span><br><span class="line">    var that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">// 浏览文件</span></span><br><span class="line">    wx.chooseImage(&#123;</span><br><span class="line">      count:<span class="number">1</span>,</span><br><span class="line">      sizeType: ['original', 'compressed'], // 可以指定是原图还是压缩图，默认二者都有</span><br><span class="line">      sourceType: ['album', 'camera'], //// 可以指定来源是相册还是相机，默认二者都有</span><br><span class="line">      success: function(res) &#123;</span><br><span class="line">        <span class="comment">// 返回选定照片的本地文件路径列表，tempFilePath可以作为img标签的src属性显示图片</span></span><br><span class="line">        var tempFilePaths = res.tempFilePaths;</span><br><span class="line">        console.<span class="built_in">log</span>(tempFilePaths)</span><br><span class="line">        <span class="comment">//将本地照片保存在小程序内</span></span><br><span class="line">        wx.saveFile(&#123;</span><br><span class="line">          tempFilePath: tempFilePaths[<span class="number">0</span>],</span><br><span class="line">          success:function(res)&#123;</span><br><span class="line">            var savedFilePath = res.savedFilePath; <span class="comment">// 图片成功之后存储在本地的路径</span></span><br><span class="line">            console.<span class="built_in">log</span>(savedFilePath)</span><br><span class="line"></span><br><span class="line">            if (!wx.getStorageSync('storageImgPath')) &#123; //数据存储，保存图片的路径</span><br><span class="line">              wx.setStorageSync('storageImgPath', savedFilePath)</span><br><span class="line">            &#125;</span><br><span class="line">            that.setData(&#123; imgPath: wx.getStorageSync('storageImgPath')&#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  deleteImg:function()&#123;</span><br><span class="line">    wx.removeStorageSync('storageImgPath'); //从数据缓存中删除</span><br><span class="line">    var that = <span class="keyword">this</span>;</span><br><span class="line">    wx.getSavedFileList(&#123; <span class="comment">//获取本地的文件列表</span></span><br><span class="line">      success:function(res)&#123;</span><br><span class="line">        console.<span class="built_in">log</span>(res.errMsg);</span><br><span class="line">        var files = res.fileList;</span><br><span class="line">        <span class="keyword">if</span>(res.fileList.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">          <span class="comment">// 删除第一张</span></span><br><span class="line">          wx.removeSavedFile(&#123;</span><br><span class="line">            filePath:res.fileList[<span class="number">0</span>].filePath,</span><br><span class="line">            success:function(res)&#123;</span><br><span class="line">              <span class="comment">// 提示语</span></span><br><span class="line">              wx.showToast(&#123;</span><br><span class="line">                title: '删除成功',</span><br><span class="line">                icon:'success',</span><br><span class="line">                duration:<span class="number">2000</span></span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  onLoad: function () &#123;</span><br><span class="line">    <span class="keyword">if</span> (app.globalData.userInfo) &#123;</span><br><span class="line">      <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">        userInfo: app.globalData.userInfo,</span><br><span class="line">        hasUserInfo: <span class="literal">true</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.data.canIUse)&#123;</span><br><span class="line">      <span class="comment">// 由于 getUserInfo 是网络请求，可能会在 Page.onLoad 之后才返回</span></span><br><span class="line">      <span class="comment">// 所以此处加入 callback 以防止这种情况</span></span><br><span class="line">      app.userInfoReadyCallback = res =&gt; &#123;</span><br><span class="line">        <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">          userInfo: res.userInfo,</span><br><span class="line">          hasUserInfo: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 在没有 open-type=getUserInfo 版本的兼容处理</span></span><br><span class="line">      wx.getUserInfo(&#123;</span><br><span class="line">        success: res =&gt; &#123;</span><br><span class="line">          app.globalData.userInfo = res.userInfo</span><br><span class="line">          <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">            userInfo: res.userInfo,</span><br><span class="line">            hasUserInfo: <span class="literal">true</span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  getUserInfo: function(e) &#123;</span><br><span class="line">    console.<span class="built_in">log</span>(e)</span><br><span class="line">    app.globalData.userInfo = e.detail.userInfo</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      userInfo: e.detail.userInfo,</span><br><span class="line">      hasUserInfo: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/wechat/wechat_05.png" alt="微信小程序"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;小程序是一种新的开放能力，开发者可以快速地开发一个小程序。小程序可以在微信内被便捷地获取和传播，同时具有出色的使用体验。这是关于小程序的数据本地存储的旅行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/wechat_d.png&quot; alt=&quot;微信小程序&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="小程序" scheme="https://duanruilong.github.io/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="Javascript" scheme="https://duanruilong.github.io/tags/Javascript/"/>
    
      <category term="编程" scheme="https://duanruilong.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="小程序" scheme="https://duanruilong.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>iTerm2 + oh my zsh打造最强Mac终端</title>
    <link href="https://duanruilong.github.io/2018/07/22/iTerm2-oh-my-zsh-agnoster-%E6%89%93%E9%80%A0%E6%9C%80%E5%BC%BAMac%E7%BB%88%E7%AB%AF/"/>
    <id>https://duanruilong.github.io/2018/07/22/iTerm2-oh-my-zsh-agnoster-打造最强Mac终端/</id>
    <published>2018-07-22T14:53:37.000Z</published>
    <updated>2018-08-07T16:22:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>iTerm2 + oh my zsh 打造最强Mac终端</p><p><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/logo2x.jpg" alt="iTerm2"></p><a id="more"></a><p>#安装iTerm2<br>iTerm2官方下载地址 <a href="http://www.iterm2.com/downloads.html" target="_blank" rel="noopener">http://www.iterm2.com/downloads.html</a></p><p>#安装 oh-my-zsh</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https:<span class="comment">//raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh</span></span><br></pre></td></tr></table></figure><p>#配置<br>创建配置文件<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp ~/.oh-my-zsh/templates/zshrc.zsh-<span class="keyword">template</span> ~/.zshrc</span><br></pre></td></tr></table></figure></p><h1 id="设置zsh为默认的shell"><a href="#设置zsh为默认的shell" class="headerlink" title="设置zsh为默认的shell"></a>设置zsh为默认的shell</h1><p><code>chsh -s /bin/zsh</code></p><p>此时，zsh已经安装成功 </p><p>接来下，可以去<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/themes" target="_blank" rel="noopener">https://github.com/robbyrussell/oh-my-zsh/wiki/themes</a> 上下载一些zsh的主题，放置在 ~/.oh-my-zsh/themes 目录目录下，并在配置文件.zshrc中进行适当的配置。其实，默认情况下，themes目录下已有很多样式。 </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;iTerm2 + oh my zsh 打造最强Mac终端&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/logo2x.jpg&quot; alt=&quot;iTerm2&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="软件" scheme="https://duanruilong.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="编程" scheme="https://duanruilong.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="软件" scheme="https://duanruilong.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Async Functions (异步函数)</title>
    <link href="https://duanruilong.github.io/2018/07/15/Async-Functions-%E5%BC%82%E6%AD%A5%E5%87%BD%E6%95%B0/"/>
    <id>https://duanruilong.github.io/2018/07/15/Async-Functions-异步函数/</id>
    <published>2018-07-15T13:43:58.000Z</published>
    <updated>2019-06-28T09:29:19.000Z</updated>
    
    <content type="html"><![CDATA[<p> ECMAScript 2017 新特性 Async Functions(异步函数) 。</p><p><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/js_d.png" alt="js"></p><a id="more"></a><h1 id="async-异步-函数变体"><a href="#async-异步-函数变体" class="headerlink" title="async(异步) 函数变体"></a>async(异步) 函数变体</h1><p>以下是已经存在的异步函数变体。请注意无处不在的  async 关键字。</p><ul><li>异步函数声明： async function foo() {}</li><li>异步函数表达式： const foo = async function () {};</li><li>异步函数定义：let obj = { async foo() {} }</li><li>异步箭头函数： const foo = async () =&gt; {};</li></ul><h1 id="async-异步-函数总是返回-Promises"><a href="#async-异步-函数总是返回-Promises" class="headerlink" title="async(异步) 函数总是返回 Promises"></a>async(异步) 函数总是返回 Promises</h1><p>async(异步) 函数的 Promise 完成状态：</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">async function <span class="title">asyncFunc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">asyncFunc()</span><br><span class="line">.then(x =&gt; console.<span class="built_in">log</span>(x));</span><br><span class="line">    <span class="comment">// 123</span></span><br></pre></td></tr></table></figure><p>async(异步) 函数的 Promise 拒绝状态：</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">async function <span class="title">asyncFunc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    throw new Error('Problem!');</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">asyncFunc()</span><br><span class="line">.<span class="keyword">catch</span>(err =&gt; console.<span class="built_in">log</span>(err));</span><br><span class="line">    <span class="comment">// Error: Problem!</span></span><br></pre></td></tr></table></figure><h1 id="通过-await-处理-async-异步-计算的结果和错误"><a href="#通过-await-处理-async-异步-计算的结果和错误" class="headerlink" title="通过 await 处理 async(异步) 计算的结果和错误"></a>通过 await 处理 async(异步) 计算的结果和错误</h1><p>await（只允许在 async(异步) 函数内部使用）等待其操作对象 Promise 返回：</p><ul><li>如果 Promise 是完成状态，await 的结果是完成态的值。</li><li>如果 Promise 是拒绝状态，await 会抛出拒绝值。</li></ul><p>处理单个 async(异步) 返回值：<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">async function <span class="title">asyncFunc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> result = await otherAsyncFunc();</span><br><span class="line">    console.<span class="built_in">log</span>(result);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 等价于:</span></span><br><span class="line"><span class="function">function <span class="title">asyncFunc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> otherAsyncFunc()</span><br><span class="line">    .then(result =&gt; &#123;</span><br><span class="line">        console.<span class="built_in">log</span>(result);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>按顺序处理多个 async(异步) 返回值：</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">async function <span class="title">asyncFunc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> result1 = await otherAsyncFunc1();</span><br><span class="line">    console.<span class="built_in">log</span>(result1);</span><br><span class="line">    <span class="keyword">const</span> result2 = await otherAsyncFunc2();</span><br><span class="line">    console.<span class="built_in">log</span>(result2);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 等价于:</span></span><br><span class="line"><span class="function">function <span class="title">asyncFunc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> otherAsyncFunc1()</span><br><span class="line">    .then(result1 =&gt; &#123;</span><br><span class="line">        console.<span class="built_in">log</span>(result1);</span><br><span class="line">        <span class="keyword">return</span> otherAsyncFunc2();</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(result2 =&gt; &#123;</span><br><span class="line">        console.<span class="built_in">log</span>(result2);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并行处理多个 async(异步) 返回值：</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">async function <span class="title">asyncFunc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> [result1, result2] = await Promise.all([</span><br><span class="line">        otherAsyncFunc1(),</span><br><span class="line">        otherAsyncFunc2(),</span><br><span class="line">    ]);</span><br><span class="line">    console.<span class="built_in">log</span>(result1, result2);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 等价于:</span></span><br><span class="line"><span class="function">function <span class="title">asyncFunc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Promise.all([</span><br><span class="line">        otherAsyncFunc1(),</span><br><span class="line">        otherAsyncFunc2(),</span><br><span class="line">    ])</span><br><span class="line">    .then([result1, result2] =&gt; &#123;</span><br><span class="line">        console.<span class="built_in">log</span>(result1, result2);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>错误处理：</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">async function <span class="title">asyncFunc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="function">await <span class="title">otherAsyncFunc</span><span class="params">()</span></span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        console.error(err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 等价于:</span></span><br><span class="line"><span class="function">function <span class="title">asyncFunc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> otherAsyncFunc()</span><br><span class="line">    .<span class="keyword">catch</span>(err =&gt; &#123;</span><br><span class="line">        console.error(err);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="理解-async-异步-函数"><a href="#理解-async-异步-函数" class="headerlink" title="理解 async(异步) 函数"></a>理解 async(异步) 函数</h1><p>解释 async(异步) 函数之前，我需要解释一下如何组合使用 Promises 和 Generator ，通过看起来同步的代码来执行 async(异步) 操作。</p><p>对于能够 async(异步) 计算其一次性结果的函数，作为 ES6 一部分的 Promises 已经变得流行起来。一个例子是 客户端 fetch API ，它是 XMLHttpRequest 获取数据的替代方法。使用示例如下：</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">fetchJson</span><span class="params">(url)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fetch(url)</span><br><span class="line">    .then(request =&gt; request.text())</span><br><span class="line">    .then(text =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> JSON.parse(text);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="keyword">catch</span>(error =&gt; &#123;</span><br><span class="line">        console.<span class="built_in">log</span>(`ERROR: $&#123;error.<span class="built_in">stack</span>&#125;`);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">fetchJson('http://example.com/some_file.json')</span><br><span class="line">.then(obj =&gt; console.<span class="built_in">log</span>(obj));</span><br></pre></td></tr></table></figure><h1 id="通过-generator-来编写异步代码"><a href="#通过-generator-来编写异步代码" class="headerlink" title="通过 generator 来编写异步代码"></a>通过 generator 来编写异步代码</h1><p>co 是一个使用 Promise 和 generator 来实现看似同步编码的库，但与上一示例中使用的样式相同：</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fetchJson = co.wrap(function* (url) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        let request = yield fetch(url);</span><br><span class="line">        let text = yield request.text();</span><br><span class="line">        <span class="keyword">return</span> JSON.parse(text);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        console.<span class="built_in">log</span>(`ERROR: $&#123;error.<span class="built_in">stack</span>&#125;`);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>每次回调函数（ generator 函数）产生一个 Promise 对象给 co ，回调会被暂停，只有当 Promise 执行完成后，co 才会继续执行回调 。 如果 Promise 处于完成状态，yield 返回完成状态的值，如果处于拒绝状态，yield 抛出拒绝状态的错误。此外，co 保证结果是通过回调执行完成才返回的（类似于  then() 所做的工作）。</p><h1 id="通过-async-异步-函数来编写异步代码"><a href="#通过-async-异步-函数来编写异步代码" class="headerlink" title="通过 async(异步) 函数来编写异步代码"></a>通过 async(异步) 函数来编写异步代码</h1><p>async(异步) 函数用的特定语法基本上和 co 类似：<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">async function <span class="title">fetchJson</span><span class="params">(url)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        let request = await fetch(url);</span><br><span class="line">        let text = await request.text();</span><br><span class="line">        <span class="keyword">return</span> JSON.parse(text);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        console.<span class="built_in">log</span>(`ERROR: $&#123;error.<span class="built_in">stack</span>&#125;`);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在内部，异步函数写法更类似于 generators 。</p><h1 id="以同步开始，异步处理的-async-异步-函数"><a href="#以同步开始，异步处理的-async-异步-函数" class="headerlink" title="以同步开始，异步处理的 async(异步) 函数"></a>以同步开始，异步处理的 async(异步) 函数</h1><p>以下是 async(异步)函数是如何工作的：</p><ul><li>1、async(异步) 函数总是返回一个 Promise 对象 p 。Promise 对象在 async(异步) 函数开始执行时被创建。</li><li>2、函数体执行过程中，可以通过 return 或 throw 终止执行。或者通过 await 暂停执行，在这种情况下，通常会在以后继续执行。</li><li>3、返回 Promise 对象 p。</li></ul><p>当执行 async(异步) 函数的函数体时，return x 中的 x 是 Promise 对象 p 的完成状态的结果，而 throw err 是 p 的拒绝状态的结果。执行结果是异步返回的。换句话说：then() 和  catch() 的回调总是在当前代码完成后执行。</p><p>以下是代码示例：</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">async function <span class="title">asyncFunc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    console.log('asyncFunc()'); // (A)</span><br><span class="line">    return 'abc';</span><br><span class="line">&#125;</span><br><span class="line">asyncFunc().</span><br><span class="line">then(x =&gt; console.<span class="built_in">log</span>(`Resolved: $&#123;x&#125;`)); <span class="comment">// (B)</span></span><br><span class="line">console.log('main'); // (C)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// asyncFunc()</span></span><br><span class="line"><span class="comment">// main</span></span><br><span class="line"><span class="comment">// Resolved: abc</span></span><br></pre></td></tr></table></figure><p>您可以认为是以下的执行顺序：</p><ul><li>1、行A：async(异步) 函数以同步开始。async(异步) 函数的 Promise 通过 return 来返回完成状态的结果。</li><li>2、行C：执行继续。</li><li>3、行B：Promise 完成状态通知是异步发生的。</li></ul><h1 id="返回不被包裹的-Promise-对象"><a href="#返回不被包裹的-Promise-对象" class="headerlink" title="返回不被包裹的 Promise 对象"></a>返回不被包裹的 Promise 对象</h1><p>Promise 的 resolve 是一项标准操作。 return 就是使用它来 resolve async(异步) 函数的 Promise  p 的。这意味着：</p><ul><li>1、返回一个非 Promise 值，该值将被处理成 p 的完成状态值。</li><li>2、返回一个 Promise 对象，那么 p 此时相当于是该 Promise 的状态。<br>因此，您可以返回一个 Promise ，并且这个 Promise 不会包裹在别的 Promise 中：<figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">async function <span class="title">asyncFunc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Promise.resolve(<span class="number">123</span>);</span><br><span class="line">&#125;</span><br><span class="line">asyncFunc()</span><br><span class="line">.then(x =&gt; console.<span class="built_in">log</span>(x)) <span class="comment">// 123</span></span><br></pre></td></tr></table></figure></li></ul><p>有趣的是，返回一个拒绝状态（reject）的 Promise 对象会导致 async(异步) 函数被拒绝（reject）（通常，您可以使用 throw ）：</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">JavaScript 代码:</span><br><span class="line"><span class="function">async function <span class="title">asyncFunc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    return Promise.reject(new Error('Problem!'));</span><br><span class="line">&#125;</span><br><span class="line">asyncFunc()</span><br><span class="line">.<span class="keyword">catch</span>(err =&gt; console.error(err)); <span class="comment">// Error: Problem!</span></span><br></pre></td></tr></table></figure><p>这与 Promise 解决方案的工作方式是一致的。 使你能够在不使用 await 的情况下，使用其他 async(异步) 计算来执行完成和拒绝处理：<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JavaScript 代码:</span><br><span class="line"><span class="function">async function <span class="title">asyncFunc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> anotherAsyncFunc();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面的代码示例和下面的类似，但是比下面的更高效。（以下代码示例没有包裹  anotherAsyncFunc() 的 Promise ，而是包裹 anotherAsyncFunc() 本身 ）：<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JavaScript 代码:</span><br><span class="line"><span class="function">async function <span class="title">asyncFunc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> await anotherAsyncFunc();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="使用-await-小贴士"><a href="#使用-await-小贴士" class="headerlink" title="使用 await 小贴士"></a>使用 await 小贴士</h1><h2 id="不要忘记使用-await"><a href="#不要忘记使用-await" class="headerlink" title="不要忘记使用 await"></a>不要忘记使用 await</h2><p>在 async(异步) 函数中容易犯的一个错误就是在调用 async(异步) 函数时忘记使用 await ：<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JavaScript 代码:</span><br><span class="line"><span class="function">async function <span class="title">asyncFunc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> value = otherAsyncFunc(); <span class="comment">// missing `await`!</span></span><br><span class="line">    ···</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在这个例子中，方法执行返回的 Promise 对象赋值给了 value ，它通常不是你在 async(异步) 函数中想要的结果。</p><p>await 甚至可以在 async(异步) 函数不返回任何值的情况下起作用。它的 Promise 只是用来告诉调用者完成状态。例如：<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JavaScript 代码:</span><br><span class="line"><span class="function">async function <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">await <span class="title">step1</span><span class="params">()</span></span>; <span class="comment">// (A)</span></span><br><span class="line">    ···</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>行A中的 await 确保在执行 foo() 剩余部分之前， step1() 已经执行完成。</p><h2 id="不需要使用-await-的情况"><a href="#不需要使用-await-的情况" class="headerlink" title="不需要使用 await 的情况"></a>不需要使用 await 的情况</h2><p>有时，你只想触发异步计算，并且不需要关注它什么时候完成。以下是代码示例：<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">JavaScript 代码:</span><br><span class="line"><span class="function">async function <span class="title">asyncFunc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    const writer = openFile('someFile.txt');</span><br><span class="line">    writer.write('hello'); // don’t wait</span><br><span class="line">    writer.write('world'); // don’t wait</span><br><span class="line">    await writer.close(); <span class="comment">// wait for file to close</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在这里，我们不关心单个的写入操作是否完成，只需要他们以正确的顺序执行 (API必须保证，但这是由 async(异步) 函数的执行模型所鼓励的，正如我们所见)。</p><p>asyncFunc() 函数最后一行的 await 确保该函数仅在文件写入关闭后才会执行。</p><p>由于返回的 Promises 没有被其他 async(异步) 函数包裹，所以你可以用 return 替换  await writer.close() ：<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">JavaScript 代码:</span><br><span class="line"><span class="function">async function <span class="title">asyncFunc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    const writer = openFile('someFile.txt');</span><br><span class="line">    writer.write('hello');</span><br><span class="line">    writer.write('world');</span><br><span class="line">    <span class="keyword">return</span> writer.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这两个版本各有利弊，await 版本可能稍微更容易理解。</p><h2 id="await-是顺序执行的，Promise-all-是并行的"><a href="#await-是顺序执行的，Promise-all-是并行的" class="headerlink" title="await 是顺序执行的，Promise.all() 是并行的"></a>await 是顺序执行的，Promise.all() 是并行的</h2><p>下面的代码调用了两个 async(异步) 函数， asyncFunc1() 和 asyncFunc1() 。<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JavaScript 代码:</span><br><span class="line"><span class="function">async function <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> result1 = await asyncFunc1();</span><br><span class="line">    <span class="keyword">const</span> result2 = await asyncFunc2();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这两个函数调用顺序执行。但是并行执行它们往往会加快速度。您可以使用 Promise.all() ：</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">JavaScript 代码:</span><br><span class="line"><span class="function">async function <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> [result1, result2] = await Promise.all([</span><br><span class="line">        asyncFunc1(),</span><br><span class="line">        asyncFunc2(),</span><br><span class="line">    ]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们现在正在等待一个包含两个元素的数组的 Promise ，而不是等待两个 Promise。</p><h1 id="异步函数和回调"><a href="#异步函数和回调" class="headerlink" title="异步函数和回调"></a>异步函数和回调</h1><p>async(异步) 函数的一个限制是 await(等待) 只影响直接相关的 async(异步) 函数。因此，async(异步) 函数无法在回调（但是，回调可以是 async(异步) 函数本身，稍后我们将会看到）中使用 await(等待)。这使得基于回调的实用函数和方法难以使用。例子中我们将使用数组方法 map() 和 forEach() 。</p><h1 id="Array-prototype-map"><a href="#Array-prototype-map" class="headerlink" title="Array.prototype.map()"></a>Array.prototype.map()</h1><p>我们从数组方法 map() 开始讲解。在下面的代码示例中，我们想要加载由 URLs 数组指向的文件，并将它们返回到数组中。<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">JavaScript 代码:</span><br><span class="line"><span class="function">async function <span class="title">downloadContent</span><span class="params">(urls)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> urls.<span class="built_in">map</span>(url =&gt; &#123;</span><br><span class="line">        <span class="comment">// 错误的语法!</span></span><br><span class="line">        <span class="keyword">const</span> content = await httpGet(url);</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这不起作用，因为在正常箭头函数中 await 语法上是非法的(愚人码头注： await(等待) 只影响直接相关的 async(异步) 函数)。那么如何使用异步的箭头函数呢？<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">JavaScript 代码:</span><br><span class="line"><span class="function">async function <span class="title">downloadContent</span><span class="params">(urls)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> urls.<span class="built_in">map</span>(async (url) =&gt; &#123; <span class="comment">// 注意这一行中的 async ;</span></span><br><span class="line">        <span class="keyword">const</span> content = await httpGet(url);</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这段代码有两个问题：</p><p>现在返回的结果是一个 Promises 对象的数组，而不是一个字符串的数组。<br>一旦 map() 执行完成，回调执行的工作并不能同时完成，因为 await 只暂停了包裹它的箭头函数 和 httpGet() 异步执行达到完成状态。这意味着你不能使用 await，来等待  downloadContent() 执行结束。<br>我们可以通过 Promise.all() 来解决这两个问题，Promise.all() 可以将一系列的 Promise 转换为一个 Promise 数组（所有值都是经过 Promise 完成并返回）：<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">JavaScript 代码:</span><br><span class="line"><span class="function">async function <span class="title">downloadContent</span><span class="params">(urls)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> promiseArray = urls.<span class="built_in">map</span>(async (url) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> content = await httpGet(url);</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> await Promise.all(promiseArray);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>map() 的回调并不对 httpGet() 的结果起作用，只是起到不断执行的作用。因此，这里我们不需要一个异步的箭头函数，只需要一个普通的箭头函数就能达到相同的结果。<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">JavaScript 代码:</span><br><span class="line"><span class="function">async function <span class="title">downloadContent</span><span class="params">(urls)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> promiseArray = urls.<span class="built_in">map</span>(</span><br><span class="line">        url =&gt; httpGet(url));</span><br><span class="line">    <span class="keyword">return</span> await Promise.all(promiseArray);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们仍然可以做一个小的改进：这个异步函数稍微有点低效 – 首先通过 await 来解开  Promise.all() 的结果，然后通过 return 再次包裹它。 假设 return 不包裹 Promises，我们可以直接返回 Promise.all() 的结果：<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">JavaScript 代码:</span><br><span class="line"><span class="function">async function <span class="title">downloadContent</span><span class="params">(urls)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> promiseArray = urls.<span class="built_in">map</span>(</span><br><span class="line">        url =&gt; httpGet(url));</span><br><span class="line">    <span class="keyword">return</span> Promise.all(promiseArray);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="Array-prototype-forEach"><a href="#Array-prototype-forEach" class="headerlink" title="Array.prototype.forEach()"></a>Array.prototype.forEach()</h1><p>我们使用数组的 forEach() 方法在控制台中打印几个通过 URLs 加载的文件的内容：<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">JavaScript 代码:</span><br><span class="line"><span class="function">async function <span class="title">logContent</span><span class="params">(urls)</span> </span>&#123;</span><br><span class="line">    urls.forEach(url =&gt; &#123;</span><br><span class="line">        <span class="comment">// Wrong syntax</span></span><br><span class="line">        <span class="keyword">const</span> content = await httpGet(url);</span><br><span class="line">        console.<span class="built_in">log</span>(content);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>同样的，这里的代码会产生一个语法错误，因为你不能在通常的箭头函数内部使用 await 。</p><p>我们换作异步箭头函数：<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">JavaScript 代码:</span><br><span class="line"><span class="function">async function <span class="title">logContent</span><span class="params">(urls)</span> </span>&#123;</span><br><span class="line">    urls.forEach(async url =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> content = await httpGet(url);</span><br><span class="line">        console.<span class="built_in">log</span>(content);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// Not finished here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这段代码起作用了，但是会出现一个警告：httpGet() 返回的 Promise 对象是异步完成的，这也意味着当 forEach() 返回的时候回调可能还没有结束，因此你无法等到 logContent() 只能结束。</p><p>如果你并不想要这个结果，你可以将 forEach() 转换为 for-of 循环。<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">JavaScript 代码:</span><br><span class="line"><span class="function">async function <span class="title">logContent</span><span class="params">(urls)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> url of urls) &#123;</span><br><span class="line">        <span class="keyword">const</span> content = await httpGet(url);</span><br><span class="line">        console.<span class="built_in">log</span>(content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>现在一切都在 for-of 循环完成后完成。但是，处理步骤依次发生：httpGet() 只是在第一次调用完成后再次调用。如果您希望处理步骤并行执行，你必须使用 Promise.all()：<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">JavaScript 代码:</span><br><span class="line"><span class="function">async function <span class="title">logContent</span><span class="params">(urls)</span> </span>&#123;</span><br><span class="line">    await Promise.all(urls.<span class="built_in">map</span>(</span><br><span class="line">        async url =&gt; &#123;</span><br><span class="line">            <span class="keyword">const</span> content = await httpGet(url);</span><br><span class="line">            console.<span class="built_in">log</span>(content);</span><br><span class="line">        &#125;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>map() 用于创建一个 Promises 数组。 我们对他们的完成结果并不感兴趣，我们只要 await(等待) 所有方法执行完成。这意味着我们希望的是在 async(异步) 函数完成之后所有的执行都已经完成。我们也可以返回 Promise.all() ，但是该函数的结果是一个数组，其元素都是未完成状态的。</p><h1 id="使用异步函数小贴士"><a href="#使用异步函数小贴士" class="headerlink" title="使用异步函数小贴士"></a>使用异步函数小贴士</h1><h2 id="了解你的-Promises"><a href="#了解你的-Promises" class="headerlink" title="了解你的 Promises"></a>了解你的 Promises</h2><p>async(异步) 函数的基础就是 <a href="http://exploringjs.com/es6/ch_promises.html" target="_blank" rel="noopener">Promises</a> 对象，这就是为什么理解 Promises 对于理解 async(异步) 函数至关重要。特别是当遇到不是基于 Promises 的老代码来实现 async(异步) 函数时，你通常别无选择，只能用 Promise 来重构。</p><p>举个例子，这里有个 “promisified” 版本的 XMLHttpRequest ：<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">JavaScript 代码:</span><br><span class="line"><span class="function">function <span class="title">httpGet</span><span class="params">(url, responseType=<span class="string">""</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Promise(</span><br><span class="line">        function (resolve, reject) &#123;</span><br><span class="line">            <span class="keyword">const</span> request = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">            request.onload = function () &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.status === <span class="number">200</span>) &#123;</span><br><span class="line">                    <span class="comment">// Success</span></span><br><span class="line">                    resolve(<span class="keyword">this</span>.response);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// Something went wrong (404 etc.)</span></span><br><span class="line">                    reject(<span class="keyword">new</span> Error(<span class="keyword">this</span>.statusText));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            request.onerror = function () &#123;</span><br><span class="line">                reject(<span class="keyword">new</span> Error(</span><br><span class="line">                    'XMLHttpRequest Error: '+this.statusText));</span><br><span class="line">            &#125;;</span><br><span class="line">            request.open('GET', url);</span><br><span class="line">            xhr.responseType = responseType;</span><br><span class="line">            request.send();</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>XMLHttpRequest 的 API 是基于回调的。通过一个 async(异步) 函数来实现它，意味着你必须在回调中返回 Promise 的完成(fulfill) 或拒绝(reject) 状态。这是不可能的，因为你只能通过 return 或者  throw 来完成这样的操作。你不能从回调函数内部 return 一个函数的结果。throw也有类似的约束。</p><p>因此，异步函数的通用编码风格是：</p><ul><li>直接使用 Promise 对象来构建异步原语。</li><li>用异步函数来使用这些原语。<br>扩展阅读：“Exploring ES6” 中的 “<a href="http://exploringjs.com/es6/ch_promises.html" target="_blank" rel="noopener">异步编程中的 Promises 对象</a>” 章节</li></ul><h1 id="立即调用异步函数表达式"><a href="#立即调用异步函数表达式" class="headerlink" title="立即调用异步函数表达式"></a>立即调用异步函数表达式</h1><p>有时，如果你可以在模块或脚本的顶层使用 await ，那将是一种很好的选择。当然，它只能在异步函数中使用。您可以创建一个异步函数 main()  并立即调用它：<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JavaScript 代码:</span><br><span class="line"><span class="function">async function <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    console.<span class="built_in">log</span>(await asyncFunction());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>main();<br>或者您可以使用立即调用异步函数表达式：<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JavaScript 代码:</span><br><span class="line">(async function () &#123;</span><br><span class="line">    console.<span class="built_in">log</span>(await asyncFunction());</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p><p>另一个选择是立即调用异步箭头函数：<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JavaScript 代码:</span><br><span class="line">(async () =&gt; &#123;</span><br><span class="line">    console.<span class="built_in">log</span>(await asyncFunction());</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p><h1 id="用异步函数进行单元测试"><a href="#用异步函数进行单元测试" class="headerlink" title="用异步函数进行单元测试"></a>用异步函数进行单元测试</h1><p>以下代码使用 <a href="https://mochajs.org/" target="_blank" rel="noopener">测试框架 mocha</a> 对异步函数 asyncFun1() 和 asyncFun2() 来进行单元测试：</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import assert from 'assert';</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Bug: the following test always succeeds</span></span><br><span class="line">test('Testing async code', function () &#123;</span><br><span class="line">    asyncFunc1() <span class="comment">// (A)</span></span><br><span class="line">    .then(result1 =&gt; &#123;</span><br><span class="line">        assert.strictEqual(result1, <span class="string">'a'</span>); <span class="comment">// (B)</span></span><br><span class="line">        <span class="keyword">return</span> asyncFunc2();</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(result2 =&gt; &#123;</span><br><span class="line">        assert.strictEqual(result2, <span class="string">'b'</span>); <span class="comment">// (C)</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然而，这个测试总是成功的，因为 mocha 不会等待 B 行和 C 行断言执行完成。</p><p>你可以通过返回链式调用的 Promise 来解决这个问题，因为 mocha 会识别一个测试是否返回一个 Promise ，然后等待该 Promise 完成 再进行下一步（除非超时）。<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JavaScript 代码:</span><br><span class="line"><span class="keyword">return</span> asyncFunc1() <span class="comment">// (A)</span></span><br></pre></td></tr></table></figure></p><p>异步函数总是返回 Promises ，这使得它们能方便的、完美的来进行这种单元测试：<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">JavaScript 代码:</span><br><span class="line">import assert from 'assert';</span><br><span class="line">test('Testing async code', async function () &#123;</span><br><span class="line">    <span class="keyword">const</span> result1 = await asyncFunc1();</span><br><span class="line">    assert.strictEqual(result1, <span class="string">'a'</span>);</span><br><span class="line">    <span class="keyword">const</span> result2 = await asyncFunc2();</span><br><span class="line">    assert.strictEqual(result2, <span class="string">'b'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>在 mocha 中使用异步单元测试异步函数有两个优点：代码更简洁，能够准确处理返回的 Promise 对象。</p><h1 id="不要担心没有处理的拒绝拒态"><a href="#不要担心没有处理的拒绝拒态" class="headerlink" title="不要担心没有处理的拒绝拒态"></a>不要担心没有处理的拒绝拒态</h1><p>当前的 JavaScript 引擎可以在拒绝态未处理的情况下提出警告。以下代码在过去会经常执行失败，但是当前的 JavaScript 引擎可以进行警告：<br><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JavaScript 代码:</span><br><span class="line"><span class="function">async function <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    throw new Error('Problem!');</span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br></pre></td></tr></table></figure></p><h1 id="阅读延伸"><a href="#阅读延伸" class="headerlink" title="阅读延伸"></a>阅读延伸</h1><ul><li><a href="https://github.com/tc39/ecmascript-asyncawait" target="_blank" rel="noopener">异步函数</a> （提出者Brian Terlson）</li><li><a href="http://exploringjs.com/es6/ch_generators.html#sec_co-library" target="_blank" rel="noopener">通过generators来简化异步计算</a>（“Exporing ES6”中的部分章节）<br>原文地址：<a href="http://exploringjs.com/es2016-es2017/ch_async-functions.html" target="_blank" rel="noopener">http://exploringjs.com/es2016-es2017/ch_async-functions.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; ECMAScript 2017 新特性 Async Functions(异步函数) 。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/js_d.png&quot; alt=&quot;js&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="https://duanruilong.github.io/categories/Javascript/"/>
    
    
      <category term="Javascript" scheme="https://duanruilong.github.io/tags/Javascript/"/>
    
      <category term="编程" scheme="https://duanruilong.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>小程序之旅(四)</title>
    <link href="https://duanruilong.github.io/2018/06/28/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8B%E6%97%85-%E5%9B%9B/"/>
    <id>https://duanruilong.github.io/2018/06/28/小程序之旅-四/</id>
    <published>2018-06-27T16:23:57.000Z</published>
    <updated>2018-08-07T16:41:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>小程序是一种新的开放能力，开发者可以快速地开发一个小程序。小程序可以在微信内被便捷地获取和传播，同时具有出色的使用体验。这是关于小程序<code>websocket</code>之旅。<code>websocket</code>是html5定义的一种新协议，原理就是在客户端(浏览器)和服务器之间建立一条专用通道连接，二者可以实时通信，类似于我们日常里的打电话一样。</p><p><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/wechat_d.png" alt="微信小程序"></p><a id="more"></a><h1 id="一个小栗子"><a href="#一个小栗子" class="headerlink" title="一个小栗子"></a>一个小栗子</h1><p>以实现一个股票走势图的功能为例，我们都知道股票这个东西的实时性和准确性是很重要的，一般可以使用<code>ajax</code>轮询（<code>setinterval</code>函数）的方式来解决，可以每半秒轮询一次数据接口，再渲染页面视图。但是这个方式是有一些缺点的，比如，浏览器要时刻不断的向服务器发送数据请求并且接受数据，这样很消耗带宽，还很容易把服务器给搞卡死了。<br>对于<code>websocket</code>技术来说，客户端就与服务器之间建立了一个专用通道，他们之间的数据通信就不需要轮询可以一直进行数据交互，服务器不再是被动的返回数据，而是有了新数据之后就会主动的推送给客户端。<code>websocket</code>很适合对实时性要求的场景，实时性不高还是用ajax就可以实现了。</p><blockquote><p>快速生成标准文件</p></blockquote><p>以charts为例，只需要在app.json文件下添加路劲，保存之后就会自动生成文件夹。</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- app.json文件 --&gt;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"pages"</span>:[</span><br><span class="line">    <span class="string">"pages/index/index"</span>,</span><br><span class="line">    <span class="string">"pages/logs/logs"</span>,</span><br><span class="line">    <span class="string">"pages/charts/charts"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"window"</span>:&#123;</span><br><span class="line">    <span class="string">"backgroundTextStyle"</span>:<span class="string">"light"</span>,</span><br><span class="line">    <span class="string">"navigationBarBackgroundColor"</span>: <span class="string">"#fff"</span>,</span><br><span class="line">    <span class="string">"navigationBarTitleText"</span>: <span class="string">"WeChat"</span>,</span><br><span class="line">    <span class="string">"navigationBarTextStyle"</span>:<span class="string">"black"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><h2 id="1、小栗子试图插件"><a href="#1、小栗子试图插件" class="headerlink" title="1、小栗子试图插件"></a>1、小栗子试图插件</h2><p>图表类的插件一般就是<code>echarts</code>和<code>highcharts</code>,而在小程序里，我们可以使用<code>wxcharts</code>,<code>wxcharts</code>的实现方式是canvas,小程序本身也是支持的。把js文件放到charts文件下，<a href="https://raw.githubusercontent.com/jiangzy27/how_to_react/master/tools/wxcharts.js" target="_blank" rel="noopener">下载链接</a></p><h2 id="2、数据接口支持"><a href="#2、数据接口支持" class="headerlink" title="2、数据接口支持"></a>2、数据接口支持</h2><p>这里的数据支持使用的是<code>Nodejs</code>，还要了解一下<code>websocket</code>,它其实就是web版的socket技术。因为浏览器支持的javascript语言并不支持socket，所以在html5技术标准中新添加了这项特性。用通俗的话语解释就是：socket其实就是在浏览器和服务端各开辟一个专门的端口，双方都监听这个端口，然后互相发送和接收数据。</p><p>Nodejs有个插件封装了socket，叫<code>nodejs-websocket</code>。使用npm安装一下:<br><code>npm install nodejs-websocket</code></p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ npm i nodejs-websocket -g</span><br><span class="line">/usr/local/lib</span><br><span class="line">└── nodejs-websocket@<span class="number">1.7</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><blockquote><p>server.js</p></blockquote><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">var ws = require('nodejs-websocket');</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建server</span></span><br><span class="line"></span><br><span class="line">var server = ws.createServer(function(conn)&#123;</span><br><span class="line">    conn.on(<span class="string">"text"</span>,function(str)&#123; <span class="comment">// 监听文本输入</span></span><br><span class="line">        <span class="keyword">if</span> (str == <span class="string">"stock"</span>) &#123;</span><br><span class="line">            setInterval(function()&#123;</span><br><span class="line">                var arr=[];</span><br><span class="line">                <span class="keyword">for</span> (let i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">                    var count = (Math.<span class="built_in">ceil</span>((Math.random()*<span class="number">100</span>))/<span class="number">100</span>).toFixed(<span class="number">2</span>);</span><br><span class="line">                    arr.push(count)</span><br><span class="line">                &#125;</span><br><span class="line">                var obj = &#123;data:arr&#125;</span><br><span class="line">                conn.send(JSON.stringify(obj))</span><br><span class="line">            &#125;,<span class="number">2000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).listen(<span class="number">8000</span>)</span><br></pre></td></tr></table></figure><p><code>websocket</code>建立专用通道后，服务端只要监听到客户端发来的文本内容是”stock”,就每隔2s修改一次数据，修改后的数据，客户端（浏览器）马上就会监听到，利用这种方式来模拟股票数据的变化。</p><blockquote><p>注意</p></blockquote><p>利用webstorm的run或使用命令行运行脚本后，websocket的协议是ws协议和wss协议。<br>ws就相当于http，wss就相当于https，所以正确的写法应该是：<code>ws://localhost:8000</code></p><blockquote><p>微信客户端</p></blockquote><p>使用websocket很容易，主要就是你这几个步骤：</p><ul><li>建立连接</li><li>发送数据</li><li>接收数据</li><li>结束</li></ul><blockquote><p>charts.js</p></blockquote><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pages/charts/charts.js</span></span><br><span class="line">var wxCharts = require('wxcharts.js');</span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;&#125;,</span><br><span class="line">  onLoad: function (options) &#123;</span><br><span class="line">    <span class="comment">// var data1 = [0.15, 0.2, 0.45, 0.37, 0.4, 0.8];</span></span><br><span class="line">    <span class="comment">// var data2 = [0.30, 0.37, 0.65, 0.78, 0.69, 0.94];</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//建立连接</span></span><br><span class="line">    wx.connectSocket(&#123;</span><br><span class="line">      url: 'ws://localhost:8000',//这里连接的就是服务端的socket</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//连接成功监听</span></span><br><span class="line">    wx.onSocketOpen(function (res) &#123;</span><br><span class="line">      <span class="comment">//发送信息</span></span><br><span class="line">      wx.sendSocketMessage(&#123;</span><br><span class="line">        data: <span class="string">"stock"</span></span><br><span class="line">      &#125;);</span><br><span class="line">      console.log('WebSocket连接已打开！')</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//连接失败监听</span></span><br><span class="line">    wx.onSocketError(function (res) &#123;</span><br><span class="line">      console.log('WebSocket连接打开失败，请检查！')</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//接收数据</span></span><br><span class="line">    wx.onSocketMessage(function (res) &#123;</span><br><span class="line">      <span class="comment">//收到的信息</span></span><br><span class="line">      console.log('收到服务器内容：' + res.data);</span><br><span class="line">      var obj = JSON.parse(res.data);</span><br><span class="line">      console.<span class="built_in">log</span>(obj);</span><br><span class="line">      <span class="comment">//绘制图表，利用canvas绘图技术。</span></span><br><span class="line">      <span class="keyword">new</span> wxCharts(&#123;</span><br><span class="line">        canvasId: 'lineCanvas',//指定canvas的id</span><br><span class="line">        type: 'line',//类型是线形图</span><br><span class="line">        categories: ['2012', '2013', '2014', '2015', '2016', '2017'],</span><br><span class="line"></span><br><span class="line">        series: [&#123;</span><br><span class="line">          name: '成交量1',</span><br><span class="line">          data: obj.data,<span class="comment">//websocket接收到的数据</span></span><br><span class="line">          format: function (val) &#123;</span><br><span class="line">            <span class="keyword">if</span> (typeof val == <span class="string">"string"</span>) &#123;</span><br><span class="line">              val = parseFloat(val);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> val.toFixed(<span class="number">2</span>) + <span class="string">'万'</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: '成交量2',</span><br><span class="line">          data: [<span class="number">0.30</span>, <span class="number">0.37</span>, <span class="number">0.65</span>, <span class="number">0.78</span>, <span class="number">0.69</span>, <span class="number">0.94</span>],</span><br><span class="line">          format: function (val) &#123;</span><br><span class="line">            <span class="keyword">return</span> val.toFixed(<span class="number">2</span>) + <span class="string">'万'</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;],</span><br><span class="line">        yAxis: &#123;</span><br><span class="line">          title: '成交金额 (万元)',</span><br><span class="line">          format: function (val) &#123;</span><br><span class="line">            <span class="keyword">return</span> val.toFixed(<span class="number">2</span>);</span><br><span class="line">          &#125;,</span><br><span class="line">          min: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        width: <span class="number">320</span>,</span><br><span class="line">        height: <span class="number">200</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>charts.wxml:</p></blockquote><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--pages/charts/charts.wxml--&gt;</span><br><span class="line">&lt;canvas style=<span class="string">"width: 100%; height: 200px;border:1px solid #ccc;"</span> canvas-id=<span class="string">"lineCanvas"</span>&gt;</span><br><span class="line">&lt;/canvas&gt;</span><br></pre></td></tr></table></figure><p><img src="http://mmbiz.qpic.cn/mmbiz_gif/amhuPdMsm1nHiaOW0568UbEodbWhIZ4gj5uzrzPwcpeEniaAXGSYSiaUZI3g7gZqlZaeoAROMHB9MVjgqfrL68JHQ/0?wx_fmt=gif&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt="websocket请"></p><p>看下控制台，只有一次请求而已，没有像轮询那样一坨一坨的发请求了。<br>下面通过控制台，看下websocket请求的特征：</p><p><img src="http://mmbiz.qpic.cn/mmbiz_png/amhuPdMsm1nHiaOW0568UbEodbWhIZ4gjeNlDTTIGia8eLvAy3zWjAOV9WTicDFbBONETA7BHvwSpMsK4A5k7Jw8A/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt="websocket请"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;小程序是一种新的开放能力，开发者可以快速地开发一个小程序。小程序可以在微信内被便捷地获取和传播，同时具有出色的使用体验。这是关于小程序&lt;code&gt;websocket&lt;/code&gt;之旅。&lt;code&gt;websocket&lt;/code&gt;是html5定义的一种新协议，原理就是在客户端(浏览器)和服务器之间建立一条专用通道连接，二者可以实时通信，类似于我们日常里的打电话一样。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/wechat_d.png&quot; alt=&quot;微信小程序&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="小程序" scheme="https://duanruilong.github.io/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="Javascript" scheme="https://duanruilong.github.io/tags/Javascript/"/>
    
      <category term="编程" scheme="https://duanruilong.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="小程序" scheme="https://duanruilong.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>ES6里 三种异步解决方案</title>
    <link href="https://duanruilong.github.io/2018/06/27/ES6%E9%87%8C-%E4%B8%89%E7%A7%8D%E5%BC%82%E6%AD%A5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://duanruilong.github.io/2018/06/27/ES6里-三种异步解决方案/</id>
    <published>2018-06-27T15:47:45.000Z</published>
    <updated>2018-08-07T16:21:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>介绍一下ES6里的三种异步方案。</p><p><img src="https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/es6_d.png" alt="ES6攻略"></p><a id="more"></a><h1 id="知识尝鲜"><a href="#知识尝鲜" class="headerlink" title="知识尝鲜"></a>知识尝鲜</h1><blockquote><p>1、newGenerator 函数，它执行之后会返回一个迭代器，在这个迭代器上我们可以去调用<code>next()</code>  方法；<br>2、next() 方法，可以给他传入一个参数。调用<code>next()</code>方法，会返回一个对象<code>{value: res,done: false}</code> ,这里的done 表示迭代器。</p></blockquote><h1 id="方法一：-Generator-Promise"><a href="#方法一：-Generator-Promise" class="headerlink" title="方法一： Generator + Promise"></a>方法一： Generator + Promise</h1><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const fund = require('fund')</span><br><span class="line"></span><br><span class="line"><span class="comment">// Promise 版的readFile</span></span><br><span class="line"><span class="keyword">const</span> readFile = function (fileName) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Promise(function(resolve, reject) &#123;</span><br><span class="line">    fund.readFile(fileName, function(err, data)&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> reject(error);</span><br><span class="line">      resolve(data);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newgen = function * () &#123;</span><br><span class="line">  let demo1 = yield readFile('a.txt');</span><br><span class="line">  let demo2 = yield readFile('b.txt');</span><br><span class="line"></span><br><span class="line">  console.log('demo1---&gt;', demo1.toString());</span><br><span class="line">  console.log('demo2---&gt;', demo2.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 基于 Generator 和 Promise 的自动执行器</span></span><br><span class="line"><span class="function">function <span class="title">run</span><span class="params">(gen)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  let g = gen();</span><br><span class="line">  </span><br><span class="line">  <span class="function">function <span class="title">next</span><span class="params">(data)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    let result = g.next(data);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (result.done) <span class="keyword">return</span> result.value;</span><br><span class="line"></span><br><span class="line">    result.value.then(function(data) &#123;</span><br><span class="line">      next(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  next();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run(gen);</span><br></pre></td></tr></table></figure><p>执行器 中的 <code>result.value</code> 现在是一个Promise, 通过 then 方法拿到需要的结果，传下一次 next 方法，这样  <code>let f1 = yield readFile(&#39;a.txt&#39;);</code>就可以拿到值.</p><h1 id="方法二：-Generator-Thunk函数"><a href="#方法二：-Generator-Thunk函数" class="headerlink" title="方法二： Generator + Thunk函数"></a>方法二： Generator + Thunk函数</h1><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">const fs = require('fs')</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把一个单一执行的函数 ，变成需要再次调用的函数，固定一部分参数</span></span><br><span class="line"><span class="function">function <span class="title">thunkify</span><span class="params">(fn, obj = &#123;&#125;)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> function () &#123;</span><br><span class="line">        let args = Array.from(arguments);</span><br><span class="line">        <span class="keyword">return</span> function (m) &#123;</span><br><span class="line">            args.push(m)</span><br><span class="line">            <span class="keyword">return</span> fn.apply(obj, args)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> readFile = thunkify(fs.readFile, fs);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> gen = function* () &#123;</span><br><span class="line">    let f1 = yield readFile('a.txt');</span><br><span class="line">    let f2 = yield readFile('b.txt');</span><br><span class="line"></span><br><span class="line">    console.log('F1--&gt;', f1.toString());</span><br><span class="line">    console.log('F2--&gt;', f2.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 基于 Generator 和 Thunk函数的自动执行器</span></span><br><span class="line"><span class="function">function <span class="title">run</span><span class="params">(fn)</span> </span>&#123;</span><br><span class="line">    let gen = fn();</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">next</span><span class="params">(err, data)</span> </span>&#123;</span><br><span class="line">        let result = gen.next(data);</span><br><span class="line">        <span class="keyword">if</span> (result.done) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        result.value(next);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    next();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run(gen);</span><br></pre></td></tr></table></figure><p><code>Thunk</code>转换器，把原来的 fs.readFile 函数 转换成需要两次调用的函数 ，readFile 的执行结果，可以通过回调函数能参数传递出来，再传给 next 方法</p><h1 id="方法三：async-函数-await-的异步处理方式"><a href="#方法三：async-函数-await-的异步处理方式" class="headerlink" title="方法三：async 函数 + await 的异步处理方式"></a>方法三：async 函数 + await 的异步处理方式</h1><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const fs = require('fs')</span><br><span class="line"></span><br><span class="line"><span class="comment">// Promise 版的readFile</span></span><br><span class="line"><span class="keyword">const</span> readFile = function (fileName) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Promise(function(resolve, reject) &#123;</span><br><span class="line">    fs.readFile(fileName, function(err, data)&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> reject(err);</span><br><span class="line">      resolve(data);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> asyncReadFile = async function () &#123;</span><br><span class="line">  const f1 = await readFile('a.txt');</span><br><span class="line">  const f2 = await readFile('b.txt');</span><br><span class="line">  console.<span class="built_in">log</span>(f1.toString());</span><br><span class="line">  console.<span class="built_in">log</span>(f2.toString());</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">asyncReadFile();</span><br></pre></td></tr></table></figure><p><code>readFile</code>函数 对比方法一没有大的变化 ，Generator 函数变成 了 async 函数，可见这处方式 只是一个语法糖，async 函数自带了执行器。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介绍一下ES6里的三种异步方案。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Duanruilong/phone_drl/master/image/blog/es6_d.png&quot; alt=&quot;ES6攻略&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ES6" scheme="https://duanruilong.github.io/categories/ES6/"/>
    
    
      <category term="Javascript" scheme="https://duanruilong.github.io/tags/Javascript/"/>
    
      <category term="编程" scheme="https://duanruilong.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="ES6" scheme="https://duanruilong.github.io/tags/ES6/"/>
    
  </entry>
  
</feed>
